# Checkly - Developer-First Synthetic Monitoring

> Code-first synthetic monitoring platform for modern development teams. Monitor APIs, web apps, and user journeys with Playwright-powered browser checks, monitoring as code workflows, and seamless CI/CD integration.

Important notes:

- Checkly is a synthetic monitoring platform designed for developers and DevOps teams
- Provides API monitoring, browser monitoring with Playwright, and monitoring as code workflows
- Supports monitoring as code through CLI, Terraform, and Pulumi for version-controlled monitoring
- Offers uptime monitoring, alerting, dashboards, and integrations with popular tools
- Built for modern development workflows with CI/CD integration and deployment testing
- Before getting started make sure to understand the project structure
- For backend projects identify all resources which can be tested
- For frontend projects identify all pages and user journeys which can be tested
- Understand the authentication setup for the users app so you can support it
- Store required credentials in Checkly
- Make sure to guide the user when setting up a new project, use the `npm create checkly@latest` command to get started
- To generate the first checks/tests explain the user the available check types and ask them which one they want to use
- Make sure to only use npm packages in scripts which are available in Checkly runtimes, Checkly doesn't support all npm packages
- never use the imports in the namespace @checkly. they are outdated. Always import from 'checkly/constructs'
- make sure that generated test files names match the patterns set in Checkly config file
- make sure when using environment variables or secrets to store them in Checkly using Checkly's cli

## Core Platform

### Monitoring
- [How Checkly runs checks](https://www.checklyhq.com/docs/monitoring/)
- [Results](https://www.checklyhq.com/docs/monitoring/check-results/)
- [Global locations](https://www.checklyhq.com/docs/monitoring/global-locations/)
- [Optimizing reliability](https://www.checklyhq.com/docs/monitoring/optimizing-reliability/)
- [How we store data](https://www.checklyhq.com/docs/monitoring/how-we-store-data/)
- [Storing secrets](https://www.checklyhq.com/docs/monitoring/storing-secrets/)
- [Allowlisting traffic](https://www.checklyhq.com/docs/monitoring/allowlisting/)
- [IP information & versions](https://www.checklyhq.com/docs/monitoring/ip-info/)
- [Responsible use](https://www.checklyhq.com/docs/monitoring/responsible-use/)
- [Pricing & Billing](https://www.checklyhq.com/docs/monitoring/check-pricing/)

### Testing
- [Overview](https://www.checklyhq.com/docs/testing/)

### Command Line Interface (CLI)
- [Getting started](https://www.checklyhq.com/docs/cli/)
- [Installation](https://www.checklyhq.com/docs/cli/installation/)
- [Project structure](https://www.checklyhq.com/docs/cli/project-structure/)
- [Using `checkMatch` and `testMatch`](https://www.checklyhq.com/docs/cli/using-check-test-match/)
- [Using Constructs](https://www.checklyhq.com/docs/cli/using-constructs/)
- [Environment variables](https://www.checklyhq.com/docs/cli/using-environment-variables/)
- [Dynamic monitor creation](https://www.checklyhq.com/docs/cli/dynamic-check-creation/)
- [Using Git](https://www.checklyhq.com/docs/cli/using-git/)
- [NPM packages & local dependencies](https://www.checklyhq.com/docs/cli/npm-packages/)
- [Importing existing resources](https://www.checklyhq.com/docs/cli/import/)
- [CLI vs. Terraform & Pulumi - Checkly Docs](https://www.checklyhq.com/docs/cli/cli-vs-terraform-pulumi/)
- [Constructs Reference](https://www.checklyhq.com/docs/cli/constructs-reference/)
- [Command Line Reference](https://www.checklyhq.com/docs/cli/command-line-reference/)

### Traces & OpenTelemetry
- [Getting started](https://www.checklyhq.com/docs/traces-open-telemetry/)
- [How it works](https://www.checklyhq.com/docs/traces-open-telemetry/how-it-works/)

## Resources

### API Checks
- [Overview](https://www.checklyhq.com/docs/api-checks/)
- [HTTP request settings](https://www.checklyhq.com/docs/api-checks/request-settings/)
- [Variables and secrets](https://www.checklyhq.com/docs/api-checks/variables/)
- [API Assertions](https://www.checklyhq.com/docs/api-checks/assertions/)
- [Response time limits](https://www.checklyhq.com/docs/api-checks/limits/)
- [Setup & teardown scripts](https://www.checklyhq.com/docs/api-checks/setup-teardown-scripts/)
- [Setup script examples](https://www.checklyhq.com/docs/api-checks/setup-script-examples/)
- [Teardown script examples](https://www.checklyhq.com/docs/api-checks/teardown-script-examples/)
- [Timeouts and timing phases](https://www.checklyhq.com/docs/api-checks/timeouts-timing/)
- [Client certificates](https://www.checklyhq.com/docs/api-checks/client-certificates/)

### Browser Checks
- [Overview](https://www.checklyhq.com/docs/browser-checks/)
- [Using Playwright Test Runner](https://www.checklyhq.com/docs/browser-checks/playwright-test/): How to use Playwright Test Runner natively within browser checks at Checkly
- [Scraping on page elements](https://www.checklyhq.com/docs/browser-checks/scraping-onpage-elements/): How to scrape web page elements like texts, buttons and forms with Google Chrome and Playwright Test.
- [Screenshots](https://www.checklyhq.com/docs/browser-checks/screenshots/)
- [File system](https://www.checklyhq.com/docs/browser-checks/file-system/)
- [Login scenarios](https://www.checklyhq.com/docs/browser-checks/login-scenarios/)
- [Variables and secrets](https://www.checklyhq.com/docs/browser-checks/variables/)
- [Multiple tabs](https://www.checklyhq.com/docs/browser-checks/multiple-tabs/)
- [Timeouts](https://www.checklyhq.com/docs/browser-checks/timeouts/)
- [Tracing and Web Vitals](https://www.checklyhq.com/docs/browser-checks/tracing-web-vitals/)
- [Visual regression & snapshot testing](https://www.checklyhq.com/docs/browser-checks/visual-regression-snapshot-testing/)
- [Degraded state](https://www.checklyhq.com/docs/browser-checks/degraded-state/)

### Heartbeat Checks
- [Overview](https://www.checklyhq.com/docs/heartbeat-checks/)
- [Ping examples](https://www.checklyhq.com/docs/heartbeat-checks/ping-examples/)

### Multistep Checks
- [Overview](https://www.checklyhq.com/docs/multistep-checks/)
- [Degraded state](https://www.checklyhq.com/docs/multistep-checks/degraded-state/)
- [File uploads, downloads and the file system](https://www.checklyhq.com/docs/multistep-checks/upload-downloads-filesystem/)
- [WebSockets](https://www.checklyhq.com/docs/multistep-checks/websockets/)
- [Examples](https://www.checklyhq.com/docs/multistep-checks/example-checks/)

### TCP Checks
- [Overview](https://www.checklyhq.com/docs/tcp-checks/)

### Playwright Check Suites
- [Overview](https://www.checklyhq.com/docs/playwright-checks/)
- [Reference](https://www.checklyhq.com/docs/playwright-checks/reference/)
- [Add to a group](https://www.checklyhq.com/docs/playwright-checks/groups-usage/)

### Groups
- [Overview](https://www.checklyhq.com/docs/groups/)
- [API check defaults](https://www.checklyhq.com/docs/groups/api-check-defaults/)
- [Variables](https://www.checklyhq.com/docs/groups/variables/)

### Alerting & Retries
- [Overview](https://www.checklyhq.com/docs/alerting-and-retries/)
- [Alert settings](https://www.checklyhq.com/docs/alerting-and-retries/alert-settings/)
- [Alert channels](https://www.checklyhq.com/docs/alerting-and-retries/alert-channels/)
- [Retries](https://www.checklyhq.com/docs/alerting-and-retries/retries/)
- [SSL Cert expiration](https://www.checklyhq.com/docs/alerting-and-retries/ssl-expiration/)
- [Alert states](https://www.checklyhq.com/docs/alerting-and-retries/alert-states/)
- [SMS](https://www.checklyhq.com/docs/alerting-and-retries/sms-delivery/)
- [Phone Calls](https://www.checklyhq.com/docs/alerting-and-retries/phone-calls/)
- [Webhooks](https://www.checklyhq.com/docs/alerting-and-retries/webhooks/)
- [Alert notification log](https://www.checklyhq.com/docs/alerting-and-retries/alert-notification-log/)

### Maintenance Windows
- [Overview](https://www.checklyhq.com/docs/maintenance-windows/)

### Dashboards
- [Overview](https://www.checklyhq.com/docs/dashboards/)
- [Customization](https://www.checklyhq.com/docs/dashboards/dashboard-customization/)
- [Private Dashboards](https://www.checklyhq.com/docs/dashboards/authentication/)
- [Custom CSS](https://www.checklyhq.com/docs/dashboards/custom-css/)
- [Incidents](https://www.checklyhq.com/docs/dashboards/incidents/)

### Status Pages
- [Overview](https://www.checklyhq.com/docs/status-pages/)
- [Incidents](https://www.checklyhq.com/docs/status-pages/incidents/)

### Accounts & Users
- [About Roles in Checkly - Checkly Docs](https://www.checklyhq.com/docs/accounts-and-users/)
- [Adding team members](https://www.checklyhq.com/docs/accounts-and-users/adding-team-members/)
- [Changing email or password](https://www.checklyhq.com/docs/accounts-and-users/changing-your-email-password/)
- [Multi-Factor Authentication](https://www.checklyhq.com/docs/accounts-and-users/multi-factor-authentication/)
- [Creating an API key](https://www.checklyhq.com/docs/accounts-and-users/creating-api-key/)
- [Single Sign-on](https://www.checklyhq.com/docs/accounts-and-users/single-sign-on/)
- [SAML](https://www.checklyhq.com/docs/accounts-and-users/saml/)
- [Microsoft Azure AD](https://www.checklyhq.com/docs/accounts-and-users/microsoft-azure-ad/)

### Private Locations
- [Overview](https://www.checklyhq.com/docs/private-locations/)
- [Checkly Agent Configuration](https://www.checklyhq.com/docs/private-locations/checkly-agent-configuration/)
- [Running on Kubernetes](https://www.checklyhq.com/docs/private-locations/running-on-kubernetes/)
- [Scaling and Redundancy](https://www.checklyhq.com/docs/private-locations/scaling-and-redundancy/)
- [Using HTTP proxies](https://www.checklyhq.com/docs/private-locations/proxy/)

### Reporting
- [Overview](https://www.checklyhq.com/docs/reporting/)

### Analytics
- [Overview](https://www.checklyhq.com/docs/analytics/)

### Runtimes
- [Overview](https://www.checklyhq.com/docs/runtimes/)
- [Runtime specification](https://www.checklyhq.com/docs/runtimes/specs/)

### Snippets
- [Snippets Overview](https://www.checklyhq.com/docs/snippets/)
- [Handlebars Snippets (Legacy)](https://www.checklyhq.com/docs/snippets/handlebars-snippets/)

## Integrations

### Integrations Overview
- [Overview](https://www.checklyhq.com/docs/integrations/)
- [Slack](https://www.checklyhq.com/docs/integrations/slack/)
- [PagerDuty](https://www.checklyhq.com/docs/integrations/pagerduty/): Learn how Checkly integrates seamlessly with PagerDuty, delivering real-time failure and recovery alerts to your PagerDuty account.
- [Opsgenie](https://www.checklyhq.com/docs/integrations/opsgenie/): Learn how to integrate Checkly with Opsgenie and deliver failure, degradation, and recovery events to any Opsgenie team. Check our guide!
- [Incident.io](https://www.checklyhq.com/docs/integrations/incidentio/)
- [Rootly](https://www.checklyhq.com/docs/integrations/rootly/)
- [GitLab Alerts](https://www.checklyhq.com/docs/integrations/gitlab_alerts/)
- [Microsoft Teams](https://www.checklyhq.com/docs/integrations/msteams/)
- [Discord](https://www.checklyhq.com/docs/integrations/discord/)
- [Telegram](https://www.checklyhq.com/docs/integrations/telegram/): Find out how Checkly integrates with Telegram to send failure, degradation, and recovery messages to any chat.
- [Spike.sh](https://www.checklyhq.com/docs/integrations/spike/)
- [Splunk On-Call](https://www.checklyhq.com/docs/integrations/splunk_on_call/)
- [StatusPage](https://www.checklyhq.com/docs/integrations/statuspage/)
- [Prometheus V2](https://www.checklyhq.com/docs/integrations/prometheus-v2/)
- [Prometheus](https://www.checklyhq.com/docs/integrations/prometheus/)
- [Pulumi](https://www.checklyhq.com/docs/integrations/pulumi/)
- [FireHydrant](https://www.checklyhq.com/docs/integrations/firehydrant/)
- [Coralogix](https://www.checklyhq.com/docs/integrations/coralogix/)
- [ilert](https://www.checklyhq.com/docs/integrations/ilert/)

### CI/CD Integration
- [Overview](https://www.checklyhq.com/docs/cicd/)
- [Vercel Deployment Protection](https://www.checklyhq.com/docs/cicd/vercel-deployment-protection/)
- [GitHub Actions](https://www.checklyhq.com/docs/cicd/github-actions/)
- [Managing Users and Plans with Vercel](https://www.checklyhq.com/docs/cicd/vercel-managing-users-and-plan/)
- [Jenkins](https://www.checklyhq.com/docs/cicd/jenkins/)
- [GitLab CI](https://www.checklyhq.com/docs/cicd/gitlabci/)
- [Vercel](https://www.checklyhq.com/docs/cicd/vercel/): Integrate Checkly with Vercel for app development and deployment to benefit from automated browser checks and production deployment testing.
- [GitHub deployments](https://www.checklyhq.com/docs/cicd/github/)
- [Command Line triggers](https://www.checklyhq.com/docs/cicd/triggers/)

### Terraform Provider
- [Overview](https://www.checklyhq.com/docs/terraform-provider/)
- [Checks and groups](https://www.checklyhq.com/docs/terraform-provider/checks-groups/)
- [Alert channels and settings](https://www.checklyhq.com/docs/terraform-provider/alerting/)
- [Snippets and environment variables in Terraform - Checkly Docs](https://www.checklyhq.com/docs/terraform-provider/snippets-variables/)
- [Dashboards](https://www.checklyhq.com/docs/terraform-provider/dashboards/)
- [Service maintenance windows](https://www.checklyhq.com/docs/terraform-provider/maintenance-windows/)
- [Command line triggers](https://www.checklyhq.com/docs/terraform-provider/command-line-triggers/)
- [Testing Terraform scripts locally - Checkly Docs](https://www.checklyhq.com/docs/terraform-provider/testing-scripts-locally/)
- [Parameterized resources in Terraform - Checkly Docs](https://www.checklyhq.com/docs/terraform-provider/parameterized-resources/)
- [CI/CD pipelines](https://www.checklyhq.com/docs/terraform-provider/ci-cd/)
- [Common issues](https://www.checklyhq.com/docs/terraform-provider/troubleshooting/)

### Pulumi Provider
- [Overview](https://www.checklyhq.com/docs/pulumi-provider/)

## Guides
- [Reusing Playwright Monitors Across Every Phase of your Software Development Life Cycle](https://www.checklyhq.com/guides/sdlc-monitoring/): The same Playwright code you write for end-to-end testing before deployment, can also test code earlier as part of the dev process, and end-to-end tests can be run on a cadence in Checkly to turn test code into monitoring code.
- [Automating Check Steps for Developers](https://www.checklyhq.com/guides/developer-fixtures/): When we enable developers to create page or API monitors, we want to automate as much of the code writing process as possible, so that developers can test the functionality they care about without getting bogged down in setup steps.
- [Creating a Keyword-Based Monitor](https://www.checklyhq.com/guides/keyword-monitoring/): With Checkly, we can use Playwright to create monitors that verify page content by checking for keywords.
- [Getting Started with Monitoring as Code](https://www.checklyhq.com/guides/getting-started-with-monitoring-as-code/): Monitoring is essential to ensure that your applications run smoothly, efficiently, and reliably. As systems grow more complex, the need for scalable and automated monitoring has never been greater. This is where Monitoring as Code (MaC) comes into play, allowing you to define, deploy, and manage monitoring configurations programmatically.
- [Go From Playwright Testing to Playwright Monitoring with Checkly](https://www.checklyhq.com/guides/playwright-testing-to-monitoring/): Whether you’re running a small startup or a large enterprise, integrating Playwright and Checkly into your workflow can transform how you approach testing and monitoring. So, start testing in production today—your users will thank you!
- [How to create an API monitor using an OpenAPI (Swagger) spec](https://www.checklyhq.com/guides/monitoring-an-openapi-spec/): OpenAPI and Swagger help users design and document APIs in a way that is readable from both humans and machines. As a consequence, they can also be used to generate the code that will run the specified API - both on the provider and consumer side. Can we leverage this same principle to simplify API monitoring? After a brief first look at OpenAPI and Swagger, this article will show how we can quickly use them to monitor a new or existing API.
- [How to empower developers and operations with Monitoring as Code - Checkly Guides](https://www.checklyhq.com/guides/empowering-developers-with-checkly/): Discover how Checkly empowers developers and platform teams to streamline complex monitoring through a code-first approach. Learn how collaboration, automation, and integrated alerts improve reliability and reduce bottlenecks in modern software delivery workflows.
- [How to monitor for broken links using Playwright and Checkly](https://www.checklyhq.com/guides/how-to-monitor-broken-links/): Learn how to check for broken links on your webpages with Playwright.
- [How to monitor the Stripe customer API with Checkly | API Monitoring Examples](https://www.checklyhq.com/guides/monitoring-the-stripe-api/): Application Programming Interfaces (APIs) are used throughout software to define interactions between different software applications. In this article we focus on web APIs specifically, taking a look at how they fit in the Jamstack architecture and how we can set up API monitoring in order to make sure they don't break and respond fast.
- [How to monitor your e-commerce application using Terraform](https://www.checklyhq.com/guides/monitoring-ecommerce-apps-using-terraform/): The trend of declaring infrastructure as code has been picking up steam over the last few years, offering a way for DevOps teams to transparently manage and scale cloud infrastructure. Why should the way we manage monitoring be any different? In this article, we address this point and illustrate it with a practical example of Monitoring-as-Code on Checkly.
- [How to monitor your e-commerce site with Playwright](https://www.checklyhq.com/guides/monitoring-ecommerce-apps-using-playwright/): Discover how Monitoring as Code transforms cloud infrastructure management with a hands-on Checkly case study. Start optimizing your workflow today!
- [How to use setup scripts for better API monitoring](https://www.checklyhq.com/guides/setup-scripts-for-apis/): Setup scripts are a fundamental tool to tailor API checks to your own target endpoints. Their power and flexibility can intimidate beginners, who might struggle to understand how the different parts fit together. This guide will present and break down different real-world examples to help you master this game-changing tool.
- [The Complete Guide to Migrating from Puppeteer to Playwright](https://www.checklyhq.com/guides/moving-from-puppeteer-to-playwright/): The switch from Puppeteer to Playwright is easy. But is it worth it? And how exactly does one migrate existing scripts from one tool to another? What are the required code-level changes, and what new features and approaches does the switch enable?
- [What is End to End Monitoring? An Overview with Examples](https://www.checklyhq.com/guides/end-to-end-monitoring/): Learn end-to-end monitoring with playwright to test key website flows. Follow our guide that gets you up and running in 10 minutes.
- [What to do when auto-waiting isn't working](https://www.checklyhq.com/guides/auto-waiting-methods/): Playwright's auto-waiting is a great feature to avoid test flakiness, but in some situations it doesn't work as expected, what are the alternatives?
- [Why did my check fail? A guide to diagnosing failures](https://www.checklyhq.com/guides/reading-traces/): When you get a notification of a failed check, you can often determine the cause right in the Checkly dashboard. This guide covers some the most common failure modes and where to find answers.

## Learning Resources
- [What is Incident Response?](https://www.checklyhq.com/learn/incidents/what-is-incident-response/): Learn the key types and stages of incident response—outages, performance issues, security events, user‑reported problems—and keep your services resilient.
- [Monitor Kubernetes](https://www.checklyhq.com/learn/kubernetes/monitoring-challenges/): Managing Kubernetes in production is no small feat, especially when it comes to monitoring and observability.
- [Debugging scripts](https://www.checklyhq.com/learn/playwright/debugging/)
- [Performance](https://www.checklyhq.com/learn/playwright/performance/)
- [Checkout](https://www.checklyhq.com/learn/playwright/checkout-testing-guide/)
- [Common issues](https://www.checklyhq.com/learn/playwright/debugging-errors/)
- [File uploads](https://www.checklyhq.com/learn/playwright/testing-file-uploads/)
- [Testing](https://www.checklyhq.com/learn/playwright/writing-tests/)
- [Click not executed](https://www.checklyhq.com/learn/playwright/error-click-not-executed/)
- [Test data](https://www.checklyhq.com/learn/playwright/handling-test-data/)
- [Discounts & coupons](https://www.checklyhq.com/learn/playwright/testing-coupons/)
- [Parameterizing Projects](https://www.checklyhq.com/learn/playwright/how-to-parameterize-playwright-projects/)
- [Testing APIs](https://www.checklyhq.com/learn/playwright/testing-apis/)
- [Element not found](https://www.checklyhq.com/learn/playwright/error-element-not-found/)
- [Downloading files](https://www.checklyhq.com/learn/playwright/file-download/)
- [Complex workflows](https://www.checklyhq.com/learn/playwright/challenging-flows/)
- [TOTP Authentication](https://www.checklyhq.com/learn/playwright/bypass-totp/)
- [Element not visible](https://www.checklyhq.com/learn/playwright/error-element-not-visible/)
- [Scraping](https://www.checklyhq.com/learn/playwright/web-scraping/)
- [Search](https://www.checklyhq.com/learn/playwright/how-to-search/)
- [Target closed](https://www.checklyhq.com/learn/playwright/error-target-closed/)
- [Scraping behind a login](https://www.checklyhq.com/learn/playwright/scraping-behind-login/)
- [User signup](https://www.checklyhq.com/learn/playwright/user-signup-automation/)
- [Automatic Steps](https://www.checklyhq.com/learn/playwright/steps-decorators/)
- [Test Fixtures](https://www.checklyhq.com/learn/playwright/test-fixtures/)
- [Wait not respected](https://www.checklyhq.com/learn/playwright/error-wait-not-respected/)
- [Script recorders](https://www.checklyhq.com/learn/playwright/script-recorders/)
- [Standard authentication](https://www.checklyhq.com/learn/playwright/login-automation/)
- [Microsoft Live Auth](https://www.checklyhq.com/learn/playwright/microsoft-login-automation/)
- [Google Auth](https://www.checklyhq.com/learn/playwright/google-login-automation/)
- [Understanding the SDLC](https://www.checklyhq.com/learn/monitoring/intro-to-sdlc/): With fast-paced standards for development and operations; where Agile, DevOps, and continuous delivery dominate—understanding SDLC remains crucial.
- [Modern Root Cause Analysis](https://www.checklyhq.com/learn/incidents/modern-root-cause-analysis/): Discover how unified metrics, logs, traces, and synthetic tests help you pinpoint failures faster, reduce downtime, and more.
- [On-Call Schedules - How to](https://www.checklyhq.com/learn/incidents/on-call-schedule/): Learn to design effective on‑call rotations—shift models, clear response rules, scheduling tools, mock drills, and fairness to prevent burnout.
- [Incident Communication](https://www.checklyhq.com/learn/incidents/incident-communication/): Lack of communication, or wrong communication, can often be the part of incident response that comes in for the most criticism. While it’s critical to define playbooks for communication, this article will talk in general about the best practices for communicating with users during an incident.
- [Detecting Downtime](https://www.checklyhq.com/learn/incidents/detection-best-practices/): Discover how to implement multi‑layered monitoring, smart alerts, third‑party checks, failure drills & global probes to catch outages fast and reduce revenue loss
- [Reducing Time to Repair](https://www.checklyhq.com/learn/incidents/mttr-challenges/): Find out why MTTR targets fail—from weak observability and slow detection to cloud‑native complexity—and apply practical tactics to meet your SLAs.
- [What is Observability?](https://www.checklyhq.com/learn/opentelemetry/getting-started-with-observability/): Learn OpenTelemetry with Checkly. Add monitoring to every piece of your stack with the open standards and open-source tools.
- [What is Playwright?](https://www.checklyhq.com/learn/playwright/what-is-playwright/): Learn how Playwright, a browser automation tool, simplifies testing across Chrome, Firefox, and WebKit. Start building more reliable web applications today.
- [Incident Assessment & Severity Guide](https://www.checklyhq.com/learn/incidents/incident-assessment-severity/): Not every alert is an incident—and not every incident is equally urgent. How to classify incidents and determine their severity?
- [Incident Management Challenges](https://www.checklyhq.com/learn/incidents/incident-management-challenges/): Find out what are the most common incident challenges and how to address them.
- [Postmortems That Drive Real Improvement (+ Template)](https://www.checklyhq.com/learn/incidents/postmortems/): Postmortems aren’t just documentation exercises. Check out how to properly do one + get a downloadable template.
- [Metrics Every Team Needs](https://www.checklyhq.com/learn/monitoring/metrics-every-team-needs/): This article will help define the metrics that every team needs to get tracking of their system’s performance
- [Anatomy of a Status Page](https://www.checklyhq.com/learn/incidents/anatomy-of-a-status-page/): Discover what makes a status page users trust - automated monitoring, clear visuals, service groupings, and more.
- [Incident Response Playbooks](https://www.checklyhq.com/learn/incidents/playbooks/): Master playbooks by setting clear standards, empowering team autonomy, and refining processes when steps are skipped.
- [Tracing for Root Cause Analysis](https://www.checklyhq.com/learn/incidents/root-cause-with-traces/): Combine distributed tracing with synthetic checks to pinpoint failures across microservices, preserve request context, and reduce MTTR.
- [Playwright vs other automation frameworks](https://www.checklyhq.com/learn/playwright/playwright-vs-others/): Learn how Playwright, a browser automation tool, simplifies testing across Chrome, Firefox, and WebKit. Start building more reliable web applications today.
- [What is MTTR?](https://www.checklyhq.com/learn/incidents/defining-mttr/): Mean Time to Repair (MTTR) is a critical metric in the world of IT operations and engineering, representing the average time it takes to repair a system or service after a failure occurs. Despite its importance, many teams fail to meet their MTTR goals.
- [Logging best practices](https://www.checklyhq.com/learn/kubernetes/logging-best-practices/): Monitoring logs effectively in a Kubernetes environment requires tools that centralize and streamline log management.
- [Instrumentation](https://www.checklyhq.com/learn/opentelemetry/how-to-instrument/): OpenTelemetry offers two main strategies for adding observability to your application - **direct instrumentation** and **auto-instrumentation**. Each method serves specific use cases, allowing developers to capture telemetry data efficiently while balancing flexibility and simplicity.
- [Playwright vs Cypress](https://www.checklyhq.com/learn/playwright/playwright-vs-cypress/): Discover the differences between Playwright and Cypress. Explore key features, pros and cons, and how to pick the right framework.
- [Playwright vs Selenium](https://www.checklyhq.com/learn/playwright/playwright-vs-selenium/): Explore the key differences between Playwright and Selenium in web testing. Discover the examples, pros and cons, and learn how to run the tests.
- [The OTel Collector](https://www.checklyhq.com/learn/opentelemetry/what-is-the-otel-collector/): The OpenTelemetry Collector is a stand-alone service designed to collect, process, and export telemetry data such as logs, metrics, and traces. It provides a vendor-neutral way to manage this data, offering flexibility in configuration and deployment.
- [Centralized Logging](https://www.checklyhq.com/learn/kubernetes/centralized-logging/): Monitoring logs effectively in a Kubernetes environment requires tools that centralize and streamline log management.
- [Traces](https://www.checklyhq.com/learn/opentelemetry/traces/): OpenTelemetry traces capture how individual operations within your system interact over time. A trace follows a request as it flows through a system, recording the relationships between different operations. Traces are particularly useful in distributed systems, where multiple services or components interact. However, they are equally valuable for monolithic applications, providing insights even when everything runs in a single process.
- [Setting up Playwright](https://www.checklyhq.com/learn/playwright/how-to-set-up-locally/)
- [Monitoring as Code - A Practical Guide from Checkly](https://www.checklyhq.com/learn/monitoring/monitoring-as-code/): Learn how to implement monitoring as code with Checkly's guide. Bring transparency, scalability, and efficiency to your cloud infrastructure management.
- [Web Application Monitoring](https://www.checklyhq.com/learn/monitoring/web-application-monitoring/): Explore web application monitoring to boost performance and reliability with real user insights, performance tracking, and top tools.
- [API Monitoring](https://www.checklyhq.com/learn/monitoring/api-monitoring/): The goal of API monitoring is to determine whether the APIs are functioning as they should and whether they are available and functioning at an optimal level for the other applications and services that rely on them.
- [Codegen](https://www.checklyhq.com/learn/playwright/codegen/)
- [Metrics](https://www.checklyhq.com/learn/opentelemetry/metrics/): OpenTelemetry Metrics play a critical role in monitoring applications by offering a way to capture and analyze key metrics in a standardized, scalable manner. Whether you're managing a complex microservices architecture or a simpler system, OpenTelemetry helps track essential statistics that reveal the health and performance of your services.
- [Logging](https://www.checklyhq.com/learn/opentelemetry/logs/): This article will go over the basics, and answer common questions for those getting started with logging in OpenTelemetry.
- [Playbooks & Automation](https://www.checklyhq.com/learn/incidents/automation-incident-response/): Discover how to layer semi‑automated workflows, automated scripts, and safety checks into your playbooks for faster recovery.
- [Real User Monitoring](https://www.checklyhq.com/learn/monitoring/real-user-monitoring/): Discover the benefits, challenges, and top tools for frontend monitoring. Learn how to track performance, detect issues, and optimize user experience.
- [Structured logging](https://www.checklyhq.com/learn/kubernetes/structured-logging/): Don't put unstructured blobs of data into your Kubernetes logs!
- [Navigation](https://www.checklyhq.com/learn/playwright/navigation/): Learn how to navigate web pages and implement effective waiting mechanisms. A guide ideal for developers looking to refine their automation scripts.
- [Synthetic Monitoring](https://www.checklyhq.com/learn/monitoring/synthetic-monitoring/): Explore the what and why of synthetic monitoring.
- [Transaction Monitoring](https://www.checklyhq.com/learn/monitoring/transaction-monitoring/): Explore transaction monitoring for application developers and SREs.
- [klog](https://www.checklyhq.com/learn/kubernetes/klog/): Meet klog, the Kubernetes-specific logging library designed to provide structured and reliable logging across Kubernetes components. In this post, we’ll dive into klog’s purpose, key features, and how it’s transforming logging in Kubernetes.
- [UI selectors](https://www.checklyhq.com/learn/playwright/selectors/): Learn to write solid scripts using Playwright. Discover how to choose stable selectors and start enhancing your skills today.
- [Events](https://www.checklyhq.com/learn/kubernetes/events/): In Kubernetes, **Events** are a native resource, providing insight into actions and state changes of objects in the cluster. Events are platform-generated messages accessible through the Kubernetes API, often used by operators and users to understand what has happened to various Kubernetes objects.
- [Context Propagation](https://www.checklyhq.com/learn/opentelemetry/context-propagation/): One of the most basic features of almost any OpenTelemetry tool, is support for context propagation, a fundamental component that sends information from one service to another and allows traces to cover multiple services.
- [Frontend Monitoring](https://www.checklyhq.com/learn/monitoring/frontend-monitoring/): Discover the benefits, challenges, and top tools for frontend monitoring. Learn how to track performance, detect issues, and optimize user experience.
- [Operators](https://www.checklyhq.com/learn/kubernetes/operators-metrics/): Operators in Kubernetes enable custom automation by encapsulating specific operational knowledge within Kubernetes itself. They function as custom controllers that manage complex applications and provide features like automated deployment, scaling, and management.
- [Trace API](https://www.checklyhq.com/learn/opentelemetry/trace-api/): The OpenTelemetry Trace API provides developers with the tools needed to create, manage, and analyze traces, a critical component of observability.
- [Waits and timeouts](https://www.checklyhq.com/learn/playwright/waits-and-timeouts/)
- [Clicking and typing](https://www.checklyhq.com/learn/playwright/clicking-typing-hovering/)
- [Node Problem Detector](https://www.checklyhq.com/learn/kubernetes/node-problem-detector/): The Node Problem Detector (NPD) is a Kubernetes tool for monitoring the health of nodes. Designed to identify and report a range of node issues, NPD aims to maintain cluster stability by detecting faulty nodes and marking them as unschedulable
- [Filtering](https://www.checklyhq.com/learn/opentelemetry/otel-filtering/): The OpenTelemetry Collector is a stand-alone service designed to collect, process, and export telemetry data such as logs, metrics, and traces. You can filter this data with the collector.
- [What is TCP?](https://www.checklyhq.com/learn/monitoring/what-is-tcp/): Explore web application monitoring to boost performance and reliability with real user insights, performance tracking, and top tools.
- [Assertions](https://www.checklyhq.com/learn/playwright/assertions/): Learn more about Playwright Assertions. Explore different types, common errors, best practices, and how to get started.
- [TCP and SSL](https://www.checklyhq.com/learn/monitoring/tcp-and-ssl/): As an application developer, you need to know how TCP and SSL/TLS work together to establish secure connections, authenticate parties, and ensure data integrity. This section will explain the relationship between TCP and SSL/TLS, focusing on authentication and how it impacts your application.
- [Interacting with iframes](https://www.checklyhq.com/learn/playwright/iframe-interaction/)
- [Authentication](https://www.checklyhq.com/learn/playwright/authentication/): Learn how to handle authentication in Playwright, including SSO, 2FA, Passkeys and more. Reuse authentication state across tests with storageState.
- [Intercepting requests](https://www.checklyhq.com/learn/playwright/intercept-requests/)
- [Parallel testing](https://www.checklyhq.com/learn/playwright/testing-in-parallel/)
- [Taking screenshots](https://www.checklyhq.com/learn/playwright/taking-screenshots/)
- [MTTD Best Practices](https://www.checklyhq.com/learn/incidents/reduce-mttd/): Avoid user‑reported outages with synthetic checks, anomaly detection, smart alerting, and rich failure traces for rapid detection.
- [Detecting broken links](https://www.checklyhq.com/learn/playwright/how-to-detect-broken-links/)
- [OpAMP](https://www.checklyhq.com/learn/opentelemetry/otel-agent-management-protocol/): The OpenTelemetry Open Agent Management Protocol (OpAMP) is an emerging standard aimed at managing telemetry agents, such as the OpenTelemetry Collector, at scale.
- [SLA vs SLO vs SLI](https://www.checklyhq.com/learn/incidents/slo-sla-sli/): Avoid user‑reported outages with synthetic checks, anomaly detection, smart alerting, and rich failure traces for rapid detection.
- [Mocking API Responses](https://www.checklyhq.com/learn/playwright/mock-api/)
- [Emulating mobile devices](https://www.checklyhq.com/learn/playwright/emulating-mobile-devices/)
- [Generating PDFs](https://www.checklyhq.com/learn/playwright/generating-pdfs/)
- [Multiple tabs](https://www.checklyhq.com/learn/playwright/multitab-flows/)
- [DORA Metrics for Performance Evaluation](https://www.checklyhq.com/learn/incidents/dora-metrics/): Learn to track and interpret DORA’s four metrics—deployments, lead time, failure rate, and restore time—to improve your software delivery.
- [Intro to HTTPS](https://www.checklyhq.com/learn/monitoring/https-for-app-developers/): Let’s break down what HTTPS is, why it matters, and how to use it in your apps.

## API Reference

- [Checkly API Documentation](https://developers.checklyhq.com): Complete REST API reference for managing checks, alerts, and dashboards programmatically
