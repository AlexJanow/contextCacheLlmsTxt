# Combined LLM Context from https://docs.firmly.ai

> This file aggregates the Markdown content linked from https://docs.firmly.ai/llms.txt for easier consumption by LLMs.

---


# Add Item to Cart

Adds a product to the cart. In order to retrieve a product identifier refer to the [Catalog APIs](/firmly-api/firmly-catalog-api/). If the requested quantity is not available in the merchant, InventoryError is returned. See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## HTTP Request

`POST /api/v1/domains/{{merchant-domain}}/cart/line-items/{{sku}}/quantity/{{quantity}}`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. mystore.com).
sku | - | Product SKU to be added to the cart. e.g. MAG000037.
quantity | - | Desired quantity. e.g. 1.

## Payload Parameters
Parameter | Default | Description
--------- | ------- | -----------
variant_handles | - | List of the variant handles needed for some few merchants to identify the item with the sku and variant_handles.
## Response Format

`Content-Type: application/json`

Returns a firmly [`Cart`](/firmly-api/schema/schema/#cart).

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
ProductNotFound | 404 | Product not found.
NoLineItemError | 412 | Cart does not have any line item. Add an item at least and try again.
NotEnoughStockError | 409 | The amount of the required item it not available in stock.
BadRequest | 400 | Request Syntax is not correct.
CannotCreateCart | 409 | Could not create cart.
PartnerNotFound | 404 | Credit card was not found using these parameters.
InvalidInputBody | 422 | The body is not processable.   

See [Errors](/firmly-api/miscellaneous/errors/) for more information.
## Sample Request

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/line-items/{{sku}}/quantity/{{quantity}}' \
  --header 'x-firmly-authorization: <>'
```

## Sample Response

```json
{
  "platform_id": "merchant_platform",
  "shop_id": "merchant.com",
  "cart_id": "a2925972-ce11-445f-847a-9c327be1cfdf",
  "line_items": [
      {
          "sku": "MAG000037",
          "base_sku": "MAG000037",
          "quantity": 1,
          "price": {
              "currency": "USD",
              "value": 29.95,
              "number": 2995,
              "symbol": "$"
          },
          "line_price": {
              "currency": "USD",
              "value": 29.95,
              "number": 2995,
              "symbol": "$"
          },
          "platform_line_item_id": 0,
          "description": "Bryna (3-Pack)",
          "variant_description": "Bryna (3-Pack)",
          "line_item_id": "f4be4cca-2ee1-4870-96d1-73ec3c785b82"
      }
  ],
  "total": {
      "currency": "USD",
      "value": 32.97,
      "number": 3297,
      "symbol": "$"
  },
  "sub_total": {
      "currency": "USD",
      "value": 29.95,
      "number": 2995,
      "symbol": "$"
  },
  "shipping_total": {
      "currency": "USD",
      "value": 0,
      "number": 0,
      "symbol": "$"
  },
  "tax": {
      "currency": "USD",
      "value": 3.02,
      "number": 302,
      "symbol": "$"
  },
  "cart_discount": {
      "currency": "USD",
      "value": 0,
      "number": 0,
      "symbol": "$"
  },
  "cart_status": "active"
}
```




 


---


# Clear Cart
Removes all items from an active cart.

## HTTP Request
`DELETE /api/v1/domains/{{merchant-domain}}/cart/line-items`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. mystore.com).

## Response Format
Content-type: application/json 

Returns an empty firmly cart.

## Expected Errors
Normalized Identifier | Error Code | Description
---------- | ---------- | -------
 MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid. 
 InvalidToken | 400 | JWT token is invalid. 
 InvalidJWTToken | 401 | The JWT token is invalid. 
 CartNotFound | 404 | Cart was not found.
 PartnerNotFound | 404 | Credit card was not found using these parameters.
ProductNotFound | 404 | Product was not found.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request
```bash
curl \
  --location \
  --request DELETE 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/line-items/' \
  --header 'x-firmly-authorization: <>'
  ```


## Sample Response

```json
{
    "display_name": "Testify",
    "cart_status": "active",
    "platform_id": "shopify",
    "shop_id": "testify.co",
    "cart_id": "1e43868c-d4a5-418c-bd6b-5fff043550d2",
    "urls": {},
    "sub_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        }
    ]
}
```
 


---


# Get Cart
Gets the current state of the cart with line items and shipping information, if available.

## HTTP Request
`GET /api/v1/domains/{{merchant-domain}}/cart/`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. mystore.com).

## Response Format
Content-type: application/json

Returns a firmly [`Cart`](/firmly-api/schema/schema/#cart).

## Expected Errors

Normalized Identifier | Error Code | Description
--------- | ------- | -----------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | JWT token is invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
CartNotFound | 404 | Cart was not found.
PartnerNotFound | 404 | Credit card was not found using these parameters.
UnprocessableEntity | 422 | The given payload has unprocessable, invalid or non-existent data. Please check the data and try again.



See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

```bash
curl \
  --location \
  --request GET 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/' \
  --header 'x-firmly-authorization: <>'
  ```
## Sample Response if Shipping Information was not set
```json
{
    "display_name": "Testify",
    "cart_status": "active",
    "platform_id": "shopify",
    "shop_id": "testify.co",
    "cart_id": "1e43868c-d4a5-418c-bd6b-5fff043550d2",
    "urls": {},
    "line_items": [
        {
            "line_item_id": "1ee530e1-063d-4e07-afb2-e7e65245977e",
            "sku": "5f595edde2dfd473988e546b",
            "base_sku": "229VIKS",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 19,
                "number": 1900,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 19,
                "number": 1900,
                "symbol": "$"
            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_large.webp?v=1655838389",
                "large": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_large.webp?v=1655838389",
                "grande": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_grande.webp?v=1655838389",
                "medium": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_medium.webp?v=1655838389",
                "compact": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_compact.webp?v=1655838389",
                "small": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_small.webp?v=1655838389"
            },
            "platform_line_item_id": "65d4d69b5e033200013d0133",
            "description": "Vischsio Saled Plate"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 19,
        "number": 1900,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "total": {
        "currency": "USD",
        "value": 19,
        "number": 1900,
        "symbol": "$"
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        }
    ]
}
```
## Sample Response if Shipping Information was set
```json
{
    "display_name": "Testify",
    "cart_status": "active",
    "platform_id": "shopify",
    "shop_id": "testify.co",
    "cart_id": "1e43868c-d4a5-418c-bd6b-5fff043550d2",
    "urls": {},
    "line_items": [
        {
            "line_item_id": "1ee530e1-063d-4e07-afb2-e7e65245977e",
            "sku": "5f595edde2dfd473988e546b",
            "base_sku": "N64S",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 19,
                "number": 1900,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 19,
                "number": 1900,
                "symbol": "$"
            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_large.webp?v=1655838389",
                "large": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_large.webp?v=1655838389",
                "grande": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_grande.webp?v=1655838389",
                "medium": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_medium.webp?v=1655838389",
                "compact": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_compact.webp?v=1655838389",
                "small": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_small.webp?v=1655838389"
            },
            "platform_line_item_id": "65d4d69b5e033200013d0133",
            "description": "N64 shirt"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 19,
        "number": 1900,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 15.12,
        "number": 1512,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "total": {
        "currency": "USD",
        "value": 34.12,
        "number": 3412,
        "symbol": "$"
    },
    "shipping_info": {
        "first_name": "Teste4r",
        "last_name": "Tester",
        "phone": "2345551234",
        "address1": "NY State Thruway",
        "city": "New York",
        "state_or_province": "New York",
        "country": "US",
        "postal_code": "98056",
        "email": "tester@tester.com"
    },
    "shipping_method_options": [
        {
            "sku": "6439bf6d3641005159287d94:2",
            "description": "UPS Ground (1 to 5 days)",
            "price": {
                "currency": "USD",
                "value": 15.12,
                "number": 1512,
                "symbol": "$"
            }
        },
        {
            "sku": "6439bf6d3641005159287d94:7",
            "description": "UPS 2nd Day Air®",
            "price": {
                "currency": "USD",
                "value": 42.31,
                "number": 4231,
                "symbol": "$"
            }
        }
    ],
    "shipping_method": {
        "sku": "6439bf6d3641005159287d94:2",
        "description": "UPS Ground (1 to 5 days)",
        "price": {
            "currency": "USD",
            "value": 15.12,
            "number": 1512,
            "symbol": "$"
        }
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        }
    ]
}
```
 


---

# Set Cart Attribution

Allows storing UTM parameters, referrer URLs, and referral codes to track the attributes of a cart.

## Notes
- All fields in the attribution object are optional.
- For Shopify stores, the attribution data is also synced with Shopify's analytics system.
- Once attribution data is synced with the platform (e.g., Shopify), an `immutable: true` field is added to indicate the attribution can no longer be modified.
- Attempts to modify attribution when `immutable: true` will be rejected.

## HTTP Request
`PUT <FIRMLY_URL>/api/v1/domains/<MERCHANT_DOMAIN>/cart/attribution`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website (e.g. mystore.com).

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
attribution | - | The attribution information.

## Response Format
`Content-type: application/json`

Returns a firmly [`Cart`](/firmly-api/schema/schema/#cart) with shipping method included.

## Expected Errors
Normalized Identifier | Error Code | Description
----- | --- | -------
 InvalidInputBody | 422 | The body is not processable.

 See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request
*The `payload` supports the following format/attributes. All fields are optional:*

```json

{
    "attribution": {
        "utm": "utm_source=google&utm_medium=product_sync&utm_campaign=sag_organic&utm_content=sag_organic&gclid=CjwKCAiAkc28BhB0EiwAM001TXO7nVWUoIf1bEaP8g698IAUWGCwk1Wa3n1cThCeMlMKHdd8XJpSkRoCjMMQAvD_BwE",
        "referrer_url": "https://www.google.com",
        "referral_code": "REF50"
    }
}
```

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/attribution' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data-raw '{
        "utm": "utm_source=google&utm_medium=product_sync&utm_campaign=sag_organic&utm_content=sag_organic&gclid=CjwKCAiAkc28BhB0EiwAM001TXO7nVWUoIf1bEaP8g698IAUWGCwk1Wa3n1cThCeMlMKHdd8XJpSkRoCjMMQAvD_BwE",
        "referrer_url": "https://www.google.com",
        "referral_code": "REF50"
    }'
```

## Sample Response

```json
{
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "1e560c27-501e-4f81-bd12-516c3cbe7fba",
    "line_items": [
        {
            "sku": "MAG000037",
            "base_sku": "MAG000037",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 29.95,
                "number": 2995,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 29.95,
                "number": 2995,
                "symbol": "$"
            },
            "platform_line_item_id": 0,
            "description": "Bryna (3-Pack)",
            "variant_description": "Bryna (3-Pack)",
            "line_item_id": "6c47658f-1b48-4a31-908b-a0f4e045b46a"
        }
    ],
    "shipping_info": {
      "first_name": "John",
      "last_name": "Smith",
      "email": "john@firmly.ai",
      "phone": "(206) 555-0000",
      "address1": "123 Nice St",
      "city": "Newcastle",
      "postal_code": "98056",
      "state_or_province": "Washington",
      "country": "United States"
    },
    "shipping_method": {
        "sku": "united_states_continental",
        "description": "3 to 7 days free delivery",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        }
    },
    "shipping_method_options": [
        {
            "sku": "united_states_continental",
            "description": "3 to 7 days free delivery",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "priority_shipping",
            "description": "Priority Shipping",
            "price": {
                "currency": "USD",
                "value": 6.95,
                "number": 695,
                "symbol": "$"
            }
        },
        {
            "sku": "expedited_shipping",
            "description": "Express Shipping",
            "price": {
                "currency": "USD",
                "value": 14.95,
                "number": 1495,
                "symbol": "$"
            }
        }
    ],
    "total": {
        "currency": "USD",
        "value": 32.97,
        "number": 3297,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 29.95,
        "number": 2995,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 3.02,
        "number": 302,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "cart_status": "active",
    "attribution" {
        "utm": "utm_source=google&utm_medium=product_sync&utm_campaign=sag_organic&utm_content=sag_organic&gclid=CjwKCAiAkc28BhB0EiwAM001TXO7nVWUoIf1bEaP8g698IAUWGCwk1Wa3n1cThCeMlMKHdd8XJpSkRoCjMMQAvD_BwE",
        "referrer_url": "https://www.google.com",
        "referral_code": "REF50"
    }
}
```







 


---


# Update Item in Cart

Updates a product already added to the cart. In order to retrieve a product identifier, refer to the [Catalog APIs](/firmly-api/firmly-catalog-api/). If the requested quantity is not available in the merchant, InventoryError is returned.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## HTTP Request
In order to remove items from the cart, the client should pass the quantity as zero. If the item is not present on that cart, the ProductNotFound error will be returned.

`PUT /api/v1/domains/{{merchant-domain}}/cart/line-items/{{sku}}`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. mystore.com).
sku | - | Product SKU to be added to the cart. e.g. MAG000037.

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
quantity | - | Desired quantity. e.g. 1

## Response Format

`Content-Type: application/json`

Returns a firmly [`Cart`](/firmly-api/schema/schema/#cart).

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
ProductNotFound | 404 | Product not found.
NotEnoughStockError | 409 | The amount of the required item it not available in stock.
PartnerNotFound | 404 | Credit card was not found using these parameters.
InvalidInputBody | 422 | The body is not processable. 

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/line-items/{{sku}}/' \
  --header 'x-firmly-authorization: <>'
  --data-raw '{
    "quantity": "<quantity>"
  }'
```

## Sample Response

```json
{
	"cart_status": "active",
	"platform_id": "merchant_platform",
	"shop_id": "merchant.com",
	"cart_id": "f4fae9c5-b082-4c28-b2da-76b7194e3c0a",
	"urls": {},
	"line_items": [{
		"line_item_id": "ff1750f1-0d87-46fb-a775-d84f7d7fb208",
		"sku": "42961853841656",
		"base_sku": "7725400785144",
		"quantity": 2,
		"msrp": {
			"currency": "USD",
			"value": 1,
			"number": 100,
			"symbol": "$"
		},
		"price": {
			"currency": "USD",
			"value": 1,
			"number": 100,
			"symbol": "$"
		},
		"line_price": {
			"currency": "USD",
			"value": 2,
			"number": 200,
			"symbol": "$"
		},
		"requires_shipping": true,
		"image": {
			"url": "http://cdn.merchant.com/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_small.webp?v=1655838389"
		},
		"platform_line_item_id": "a07a4af7b39c17367eadabb5fd897dc3",
		"description": "Clip-in hair extensions #1 jet black.",
		"variant_description": "16\" / Classic"
	}],
	"sub_total": {
		"currency": "USD",
		"value": 2,
		"number": 200,
		"symbol": "$"
	},
	"cart_discount": {
		"currency": "USD",
		"value": 0,
		"number": 0,
		"symbol": "$"
	},
	"shipping_total": {
		"currency": "USD",
		"value": 0,
		"number": 0,
		"symbol": "$"
	},
	"tax": {
		"currency": "USD",
		"value": 0.2,
		"number": 20,
		"symbol": "$"
	},
	"total": {
		"currency": "USD",
		"value": 2.2
	}
}
```
 


---


# Add Addon V2

Apply addon services to your cart with flexible scoping options. Supports cart-level, item-level, and group-level addon services with granular selection control.

## Endpoint

```
POST|PUT /api/v2/domains/{domain}/cart/addons
```

## Request Schema

```javascript
{
  "selections": [
    {
      "addon_id": "string",                    // Required: Addon identifier
      "selected_line_item_ids": ["string"],   // Optional: Items to apply addon to
      "selected_child_ids": ["string"]        // Optional: Child addon selections
    }
  ]
}
```

## Response

Returns the updated `ShoppingCartV2` with addon selections applied and pricing recalculated.

## Usage Examples

### Cart-Level Addon (Shipping Protection)

Apply shipping protection to the entire order:

**Request:**
```javascript
POST /api/v2/domains/example.com/cart/addons

{
  "selections": [
    {
      "addon_id": "shipping_protection"
    }
  ]
}
```

**Response:**
```javascript
{
  "cart_id": "cart-12345",
  "line_items": [
    {
      "line_item_id": "item-1",
      "variant_id": "sofa-blue-large",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 899.99,
        "number": 89999,
        "symbol": "$"
      }
    }
  ],
  "addons": {
    "offers": [
      {
        "addon_id": "shipping_protection",
        "display": {
          "name": "Shipping Protection",
          "description": "Protect your entire order against shipping damage"
        },
        "scope": "CART",
        "coverage_mode": "PREDEFINED_GROUP",
        "price": {
          "currency": "USD",
          "value": 4.99,
          "number": 499,
          "symbol": "$"
        }
      }
    ],
    "selections": [
      {
        "addon_id": "shipping_protection",
        "price": {
          "currency": "USD",
          "value": 4.99,
          "number": 499,
          "symbol": "$"
        }
      }
    ]
  },
  "addon_total": {
    "currency": "USD",
    "value": 4.99,
    "number": 499,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 904.98,
    "number": 90498,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Item-Level Addon (Extended Warranty)

Apply extended warranty to specific items with per-item pricing:

**Request:**
```javascript
POST /api/v2/domains/example.com/cart/addons

{
  "selections": [
    {
      "addon_id": "extended_warranty",
      "selected_line_item_ids": ["item-1", "item-2"]
    }
  ]
}
```

**Response:**
```javascript
{
  "cart_id": "cart-12345",
  "line_items": [
    {
      "line_item_id": "item-1",
      "variant_id": "sofa-blue-large",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 899.99,
        "number": 89999,
        "symbol": "$"
      }
    },
    {
      "line_item_id": "item-2",
      "variant_id": "coffee-table-oak",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 299.99,
        "number": 29999,
        "symbol": "$"
      }
    }
  ],
  "addons": {
    "offers": [
      {
        "addon_id": "extended_warranty",
        "display": {
          "name": "Extended Warranty - 3 Year",
          "description": "Comprehensive coverage beyond manufacturer warranty"
        },
        "scope": "ITEM",
        "coverage_mode": "PER_ITEM",
        "eligible_line_item_ids": ["item-1", "item-2"],
        "price": {
          "currency": "USD",
          "value": 59.99,
          "number": 5999,
          "symbol": "$"
        },
        "line_item_pricing": {
          "item-1": {
            "price": {
              "currency": "USD",
              "value": 89.99,
              "number": 8999,
              "symbol": "$"
            }
          },
          "item-2": {
            "price": {
              "currency": "USD",
              "value": 29.99,
              "number": 2999,
              "symbol": "$"
            }
          }
        }
      }
    ],
    "selections": [
      {
        "addon_id": "extended_warranty",
        "selected_line_item_ids": ["item-1", "item-2"],
        "price": {
          "currency": "USD",
          "value": 119.98,
          "number": 11998,
          "symbol": "$"
        }
      }
    ]
  },
  "addon_total": {
    "currency": "USD",
    "value": 119.98,
    "number": 11998,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 1319.96,
    "number": 131996,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Hierarchical Addon (Installation with Options)

Apply installation service with child option selections:

**Request:**
```javascript
POST /api/v2/domains/example.com/cart/addons

{
  "selections": [
    {
      "addon_id": "furniture_installation",
      "selected_line_item_ids": ["item-1"],
      "selected_child_ids": ["white_glove_service", "assembly_included"]
    }
  ]
}
```

**Response:**
```javascript
{
  "cart_id": "cart-12345",
  "line_items": [
    {
      "line_item_id": "item-1",
      "variant_id": "dining-set-walnut",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 1299.99,
        "number": 129999,
        "symbol": "$"
      }
    }
  ],
  "addons": {
    "offers": [
      {
        "addon_id": "furniture_installation",
        "display": {
          "name": "Professional Installation",
          "description": "Expert furniture setup and placement"
        },
        "scope": "ITEM",
        "coverage_mode": "PER_ITEM",
        "eligible_line_item_ids": ["item-1"],
        "price": {
          "currency": "USD",
          "value": 149.99,
          "number": 14999,
          "symbol": "$"
        },
        "child_offers": [
          {
            "addon_id": "white_glove_service",
            "display": {
              "name": "White Glove Service",
              "description": "Premium handling and setup"
            },
            "price": {
              "currency": "USD",
              "value": 75.00,
              "number": 7500,
              "symbol": "$"
            }
          },
          {
            "addon_id": "assembly_included",
            "display": {
              "name": "Assembly Included",
              "description": "Complete furniture assembly"
            },
            "price": {
              "currency": "USD",
              "value": 50.00,
              "number": 5000,
              "symbol": "$"
            }
          }
        ]
      }
    ],
    "selections": [
      {
        "addon_id": "furniture_installation",
        "selected_line_item_ids": ["item-1"],
        "selected_child_ids": ["white_glove_service", "assembly_included"],
        "price": {
          "currency": "USD",
          "value": 274.99,
          "number": 27499,
          "symbol": "$"
        }
      }
    ]
  },
  "addon_total": {
    "currency": "USD",
    "value": 274.99,
    "number": 27499,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 1574.98,
    "number": 157498,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

## Error Handling

| Error Code | Description | Resolution |
|------------|-------------|------------|
| `ErrorCartNotFound` | Cart does not exist | Verify cart ID and domain |
| `ErrorInvalidInputBody` | Invalid request format | Check request schema |
| `ErrorUnprocessableEntity` | Addon constraints violated | Review addon eligibility rules |
| `ErrorStoreUnavailable` | Store service unavailable | Retry request |

## Related Endpoints

- [Remove Addon V2](/firmly-api/firmly-cart-api-v2/addon-management/remove-addon/) - Remove addon selections
- [Get Cart V2](/firmly-api/firmly-cart-api-v2/cart-management/get-cart/) - View current addon state
- [Cart Schema](/firmly-api/firmly-cart-api-v2/schema/) - Complete addon schema reference
 


---


# Remove Addon V2

Remove addon services from your cart by addon identifier. This endpoint removes the specified addon from all associated line items and recalculates cart totals.

## Endpoint

```
POST|PUT /api/v2/domains/{domain}/cart/addons/_remove
```

## Request Schema

```javascript
{
  "addon_id": "string"    // Required: Addon identifier to remove
}
```

## Response

Returns the updated `ShoppingCartV2` with the specified addon removed and pricing recalculated.

## Usage Examples

### Remove Shipping Protection

Remove shipping protection from the entire order:

**Request:**
```javascript
POST /api/v2/domains/example.com/cart/addons/_remove

{
  "addon_id": "shipping_protection"
}
```

**Response:**
```javascript
{
  "cart_id": "cart_01H2XVBR8C8JS5MQSFPJ8HF9SA",
  "line_items": [
    {
      "sku": "SOFA-001",
      "variant_id": "var_01H2XVBR8C8JS5MQSFPJ8HF9SB",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 1299.99,
        "number": 129999,
        "symbol": "$"
      }
    }
  ],
  "addons": {
    "offers": [
      {
        "addon_id": "shipping_protection",
        "name": "Shipping Protection",
        "description": "Protect your order against damage or loss during shipping",
        "scope": "CART",
        "price": {
          "currency": "USD",
          "value": 12.99,
          "number": 1299,
          "symbol": "$"
        }
      }
    ],
    "selections": []  // Empty after removal
  },
  "sub_total": {
    "currency": "USD",
    "value": 1299.99,
    "number": 129999,
    "symbol": "$"
  },
  "addon_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 1299.99,
    "number": 129999,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Remove Item-Level Addon

Remove extended warranty from a specific item:

**Request:**
```javascript
POST /api/v2/domains/example.com/cart/addons/_remove

{
  "addon_id": "extended_warranty_sofa"
}
```

**Response:**
```javascript
{
  "cart_id": "cart_01H2XVBR8C8JS5MQSFPJ8HF9SA",
  "line_items": [
    {
      "sku": "SOFA-001",
      "variant_id": "var_01H2XVBR8C8JS5MQSFPJ8HF9SB",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 1299.99,
        "number": 129999,
        "symbol": "$"
      }
    }
  ],
  "addons": {
    "offers": [
      {
        "addon_id": "extended_warranty_sofa",
        "name": "3-Year Extended Warranty",
        "description": "Comprehensive coverage for furniture protection",
        "scope": "ITEM",
        "price": {
          "currency": "USD",
          "value": 199.99,
          "number": 19999,
          "symbol": "$"
        }
      }
    ],
    "selections": []  // Warranty selection removed
  },
  "sub_total": {
    "currency": "USD",
    "value": 1299.99,
    "number": 129999,
    "symbol": "$"
  },
  "addon_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 1299.99,
    "number": 129999,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Remove Group-Level Addon

Remove installation service from furniture set:

**Request:**
```javascript
POST /api/v2/domains/example.com/cart/addons/_remove

{
  "addon_id": "furniture_installation"
}
```

**Response:**
```javascript
{
  "cart_id": "cart_01H2XVBR8C8JS5MQSFPJ8HF9SA",
  "line_items": [
    {
      "sku": "SOFA-001",
      "variant_id": "var_01H2XVBR8C8JS5MQSFPJ8HF9SB",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 1299.99,
        "number": 129999,
        "symbol": "$"
      }
    },
    {
      "sku": "CHAIR-001",
      "variant_id": "var_01H2XVBR8C8JS5MQSFPJ8HF9SC",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 399.99,
        "number": 39999,
        "symbol": "$"
      }
    }
  ],
  "addons": {
    "offers": [
      {
        "addon_id": "furniture_installation",
        "name": "Professional Installation",
        "description": "Expert furniture assembly and placement service",
        "scope": "GROUP",
        "price": {
          "currency": "USD",
          "value": 149.99,
          "number": 14999,
          "symbol": "$"
        }
      }
    ],
    "selections": []  // Installation service removed
  },
  "sub_total": {
    "currency": "USD",
    "value": 2099.97,
    "number": 209997,
    "symbol": "$"
  },
  "addon_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 2099.97,
    "number": 209997,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

## Error Handling

| Error Code | Description | Resolution |
|------------|-------------|------------|
| `ErrorCartNotFound` | Cart does not exist | Verify cart ID and domain |
| `ErrorInvalidInputBody` | Invalid request format | Check request schema |
| `ErrorUnprocessableEntity` | Addon not found in cart | Verify addon_id exists in current selections |
| `ErrorStoreUnavailable` | Store service unavailable | Retry request |

## Related Endpoints

- [Add Addon V2](/firmly-api/firmly-cart-api-v2/addon-management/add-addon/) - Add addon selections
- [Get Cart V2](/firmly-api/firmly-cart-api-v2/cart-management/get-cart/) - View current addon state
- [Cart Schema](/firmly-api/firmly-cart-api-v2/schema/) - Complete addon schema reference
 


---

# Addon Management


  <h1 id="addon-management-apis">Addon Management APIs</h1><p>The following APIs are used for managing addon services:</p>
<ul>
<li><a href=/firmly-api/firmly-cart-api-v2/addon-management/add-addon/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Add Addon</span></a></li>
<li><a href=/firmly-api/firmly-cart-api-v2/addon-management/remove-addon/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Remove Addon</span></a></li>
</ul>


- [Add Addon V2](/firmly-api/firmly-cart-api-v2/addon-management/add-addon/index.md)
- [Remove Addon V2](/firmly-api/firmly-cart-api-v2/addon-management/remove-addon/index.md)


---

# Advanced Features


  <h1 id="advanced-features-apis">Advanced Features APIs</h1><p>The following APIs are used for advanced cart functionality:</p>
<ul>
<li><a href=/firmly-api/firmly-cart-api-v2/advanced-features/split-shipment/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Split Shipment</span></a></li>
<li><a href=/firmly-api/firmly-cart-api-v2/advanced-features/merge-shipments/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Merge Shipments</span></a></li>
</ul>




---


# Add Line Item
Adds a product variant to the cart with specified quantity. In V2, items are automatically grouped into shipments based on fulfillment requirements.

## HTTP Request
`POST /api/v2/domains/{{merchant-domain}}/cart/line-items`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. example.com).

## Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
flush_cart | false | Optional. When `true`, clears cart before adding item.

## Request Body
Content-type: application/json

```javascript
{
  "variant_id": "string",           // Required: Product variant identifier
  "quantity": number,               // Required: Quantity to add (minimum 1)
  "variant_handles": ["string"]     // Optional: Variant handles for configuration
}
```

## Response Format
Content-type: application/json

Returns a firmly [`ShoppingCartV2`](/firmly-api/firmly-cart-api-v2/schema/#shoppingcartv2) with the added item.

### V2 Behavior Changes:
- **Shipment Assignment**: New items are automatically assigned to appropriate shipments
- **Request Format**: Uses request body instead of URL parameters (V1 style)
- **Enhanced Response**: Returns full cart with multi-shipment information

## Expected Errors

Normalized Identifier | Error Code | Description
--------- | ------- | -----------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | JWT token is invalid.
ErrorBadRequest | 400 | Request data is invalid or malformed.
ErrorInvalidInputBody | 400 | Request body validation failed.
InvalidJWTToken | 401 | The JWT token is invalid.
ErrorProductNotFound | 404 | Product variant was not found.
ErrorProductNotSupported | 409 | Product is not supported for this operation.
ErrorNoLineItem | 422 | No line item could be created from the request.
ErrorNotEnoughStock | 422 | Insufficient stock for requested quantity.
ErrorCannotCreateCart | 422 | Cart could not be created or updated.
UnprocessableEntity | 422 | The given payload has unprocessable data.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/line-items' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "variant_id": "blue-sofa-large",
    "quantity": 1
  }'
```

### With Variant Handles
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/line-items' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "variant_id": "configurable-furniture-001",
    "quantity": 1,
    "variant_handles": ["color:blue", "size:large", "material:leather"]
  }'
```

### Clear Cart First
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/line-items?flush_cart=true' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "variant_id": "first-item-001",
    "quantity": 2
  }'
```

## Sample Response

```json
{
  "line_items": [
    {
      "line_item_id": "new-item-12345",
      "platform_line_item_id": "0",
      "sku": "BLUE-SOFA-LG",
      "variant_description": "Color: blue, Size: large",
      "description": "Blue 3-Seat Sofa",
      "base_sku": "SOFA-BASE",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 1299.99,
        "number": 129999,
        "symbol": "$"
      },
      "line_price": {
        "currency": "USD",
        "value": 1299.99,
        "number": 129999,
        "symbol": "$"
      },
      "msrp": {
        "currency": "USD",
        "value": 1499.99,
        "number": 149999,
        "symbol": "$"
      },
      "image": {
        "url": "https://cdn.example.com/product/blue-sofa-large.jpg",
        "alt": "Blue 3-Seat Sofa",
        "type": "default"
      },
      "requires_shipping": true
    }
  ],
  "shipments": [
    {
      "shipment_id": "auto-generated-shipment-1",
      "line_item_ids": ["new-item-12345"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "fulfillment_type_options": [
        {
          "id": "SHIP_TO_ADDRESS",
          "name": "Ship to Address", 
          "description": "Standard shipping to your address"
        },
        {
          "id": "SCHEDULED_DELIVERY",
          "name": "Scheduled Delivery",
          "description": "Delivery scheduled for a specific date"
        }
      ],
      "shipping_method_options": [
        {
          "id": "STANDARD_SHIPPING",
          "description": "Standard Shipping",
          "price": {
            "currency": "USD",
            "value": 50,
            "number": 5000,
            "symbol": "$"
          },
          "estimated_delivery": "5-7 business days"
        },
        {
          "id": "PREMIUM_SHIPPING",
          "description": "Premium Delivery",
          "price": {
            "currency": "USD",
            "value": 100,
            "number": 10000,
            "symbol": "$"
          },
          "estimated_delivery": "2-3 business days"
        }
      ],
      "shipping_method": {
        "id": "STANDARD_VENDOR_SHIPPING",
        "description": "Standard Shipping (O)",
        "price": {"value": 0, "currency": "USD", "number": 0, "symbol": "$"},
        "estimated_delivery": "Varies by vendor"
      },
      "notes": ""
    }
  ],
  "sub_total": {
    "currency": "USD",
    "value": 1299.99,
    "number": 129999,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 1299.99,
    "number": 129999,
    "symbol": "$"
  },
  "addons": {
    "offers": [
      {
        "addon_id": "furniture_protection",
        "name": "Furniture Protection Plan",
        "description": "3-year protection against stains and damage",
        "price": {
          "currency": "USD",
          "value": 199.99,
          "number": 19999,
          "symbol": "$"
        },
        "type": "ITEM",
        "applicable_items": ["new-item-12345"],
        "required": false,
        "multiple": false
      }
    ],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0",
  "shipping_info": null,
  "payment_method_options": [
    {
      "type": "CreditCard",
      "wallet": "user"
    }
  ]
}
```

## Shipment Assignment

When adding items to the cart, V2 automatically:

1. **Groups compatible items**: Items with similar fulfillment requirements are grouped together
2. **Creates new shipments**: Items with different requirements get separate shipments
3. **Inherits options**: New shipments inherit available fulfillment and shipping options

### Example: Furniture + Accessories

Adding a large sofa (requires scheduled delivery) and small accessories (standard shipping) creates two shipments:

```json
{
  "shipments": [
    {
      "shipment_id": "furniture-shipment",
      "line_item_ids": ["sofa-item"],
      "fulfillment_type": {"id": "SCHEDULED_DELIVERY"}
    },
    {
      "shipment_id": "accessories-shipment", 
      "line_item_ids": ["pillow-item", "throw-item"],
      "fulfillment_type": {"id": "SHIP_TO_ADDRESS"}
    }
  ]
}
```

## Migration from V1

### Request Format Change

**V1 Format:**
```
POST /api/v1/domains/example.com/cart/line-items/{productId}/quantity/{quantity}
```

**V2 Format:**
```javascript
POST /api/v2/domains/example.com/cart/line-items
{
  "variant_id": "productId",
  "quantity": quantity
}
```

### Response Enhancements

- **Shipments array**: Shows how items are grouped for fulfillment
- **Enhanced addons**: Item-level addon suggestions based on added products
- **Schema version**: Always includes `"schema_version": "2.0"`
- **Fulfillment options**: Shows available delivery methods per shipment

For complete migration details, see the [V2 Migration Guide](/firmly-api/firmly-cart-api-v2/overview/). 
 


---


# Clear Cart
Removes all line items from the cart, returning an empty cart with V2 schema. This operation clears all shipments and resets addon selections.

## HTTP Request
`DELETE /api/v2/domains/{{merchant-domain}}/cart/line-items`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. example.com).

## Response Format
Content-type: application/json

Returns a firmly [`ShoppingCartV2`](/firmly-api/firmly-cart-api-v2/schema/#shoppingcartv2) with empty line items and shipments.

### V2 Behavior:
- **Complete Reset**: Removes all line items, shipments, and addon selections
- **Preserved Data**: Maintains shipping info, payment methods, and cart-level settings
- **Schema Consistency**: Returns V2 format with empty arrays and zero totals
- **Session Continuity**: Cart ID and session remain active for future operations

## Expected Errors

Normalized Identifier | Error Code | Description
--------- | ------- | -----------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | JWT token is invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
ErrorCartNotFound | 404 | Cart was not found.
ErrorProductNotFound | 404 | Error occurred while clearing specific items.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

```bash
curl \
  --location \
  --request DELETE 'https://api.firmly.work/api/v2/domains/example.com/cart/line-items' \
  --header 'x-firmly-authorization: <>'
```

## Sample Response

```json
{
  "line_items": [],
  "shipments": [],
  "sub_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "cart_discount": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "shipping_info": {
    "first_name": "John",
    "last_name": "Doe",
    "email": "john.doe@example.com",
    "phone": "555-123-4567",
    "address1": "123 Main Street",
    "address2": "Apt 4B",
    "postal_code": "12345",
    "city": "Anytown",
    "state_or_province": "CA",
    "state_name": "California",
    "country": "US"
  },
  "shipping_method": null,
  "shipping_method_options": [
    {
      "id": "STANDARD_SHIPPING",
      "description": "Standard Shipping",
      "price": {
        "currency": "USD",
        "value": 7.50,
        "number": 750,
        "symbol": "$"
      },
      "estimated_delivery": "5-7 business days"
    },
    {
      "id": "EXPRESS_SHIPPING",
      "description": "Express Shipping",
      "price": {
        "currency": "USD",
        "value": 14.99,
        "number": 1499,
        "symbol": "$"
      },
      "estimated_delivery": "2-3 business days"
    }
  ],
  "payment_method_options": [
    {
      "type": "CreditCard",
      "wallet": "user"
    },
    {
      "type": "PayPal",
      "wallet": "paypal"
    }
  ],
  "coupons": [],
  "schema_version": "2.0"
}
```

## Clear Cart Behavior

### What Gets Cleared:
- **Line Items**: All products removed from cart
- **Shipments**: All shipment groups deleted
- **Addons**: All addon selections removed (offers may remain available)
- **Totals**: All monetary totals reset to zero
- **Promo Codes**: Applied coupons are cleared

### What Gets Preserved:
- **Cart ID**: Session continues with same cart identifier
- **Shipping Info**: Customer address information retained
- **Payment Methods**: Available payment options maintained
- **Shipping Options**: Available shipping methods preserved
- **Session State**: Authentication and device binding remain active

## Implementation Details

The V2 clear cart operation uses one of two approaches:

### Approach 1: Native Clear Cart (V2 Adapters)
```javascript
// Direct adapter implementation
await context.client.clearCart(context);
```

### Approach 2: Iterative Removal (V1 Adapters)
```javascript
// Fallback for adapters without clearCart method
for (const item of cart.line_items) {
    await context.client.updateLineItem(context, item.sku, 0, item.variant_handles);
}
```

Both approaches ensure consistent V2 response format regardless of adapter version.

## Use Cases

### 1. Start Fresh
Customer wants to completely restart their shopping session:
```bash
DELETE /api/v2/domains/example.com/cart/line-items
# Returns empty cart, ready for new items
```

### 2. Bulk Item Management
Before adding a new product set, clear existing items:
```bash
# Clear cart
DELETE /api/v2/domains/example.com/cart/line-items

# Add new items
POST /api/v2/domains/example.com/cart/line-items
```

### 3. Session Reset
After checkout completion or session timeout:
```bash
DELETE /api/v2/domains/example.com/cart/line-items
# Maintains session but clears all cart data
```

## Migration from V1

### URL Consistency
Both V1 and V2 use the same endpoint structure:
```
V1: DELETE /api/v1/domains/example.com/cart/line-items
V2: DELETE /api/v2/domains/example.com/cart/line-items
```

### Response Enhancements

**V1 Response:**
```json
{
  "line_items": [],
  "sub_total": {"value": 0},
  "tax": {"value": 0},
  "total": {"value": 0}
}
```

**V2 Response:**
```json
{
  "line_items": [],
  "shipments": [],
  "sub_total": {"value": 0},
  "tax_total": {"value": 0},
  "addon_total": {"value": 0},
  "total": {"value": 0},
  "addons": {"offers": [], "selections": []},
  "schema_version": "2.0"
}
```

### Key Differences:
- **Empty Shipments Array**: V2 includes `"shipments": []`
- **Addon System**: V2 includes empty addon structure
- **Tax Field**: `tax` becomes `tax_total` in V2
- **Schema Version**: V2 includes `"schema_version": "2.0"`

For complete migration details, see the [V2 Migration Guide](/firmly-api/firmly-cart-api-v2/overview/). 
 


---


# Get Cart V2

Retrieve the current state of a shopping cart with all line items, shipments, pricing, and addon information.

## Endpoint

```
GET /api/v2/domains/{domain}/cart/
```

## Response

Returns a firmly [`ShoppingCartV2`](/firmly-api/firmly-cart-api-v2/schema/#shoppingcartv2) object containing the complete cart state.

## Sample Request & Response

**Request:**
```bash
curl \
  --location \
  --request GET 'https://api.firmly.work/api/v2/domains/example.com/cart/' \
  --header 'x-firmly-authorization: <>'
```

**Response:**
```json
{
  "cart_id": "cart_01H2XVBR8C8JS5MQSFPJ8HF9SA",
  "line_items": [
    {
      "line_item_id": "item_01H2XVBR8C8JS5MQSFPJ8HF9SB",
      "sku": "SOFA-001",
      "variant_id": "var_01H2XVBR8C8JS5MQSFPJ8HF9SC",
      "description": "Premium Sectional Sofa - Navy Blue",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 1299.99,
        "number": 129999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "ship_01H2XVBR8C8JS5MQSFPJ8HF9SD",
      "line_item_ids": ["item_01H2XVBR8C8JS5MQSFPJ8HF9SB"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to customer address"
      },
      "shipping_method": {
        "id": "STANDARD_GROUND",
        "description": "Standard Ground Shipping",
        "price": {
          "currency": "USD",
          "value": 49.99,
          "number": 4999,
          "symbol": "$"
        },
        "estimated_delivery": "5-7 business days"
      }
    }
  ],
  "addons": {
    "offers": [
      {
        "addon_id": "shipping_protection",
        "display": {
          "name": "Shipping Protection",
          "description": "Protect your order against shipping damage"
        },
        "scope": "CART",
        "price": {
          "currency": "USD",
          "value": 12.99,
          "number": 1299,
          "symbol": "$"
        }
      }
    ],
    "selections": []
  },
  "sub_total": {
    "currency": "USD",
    "value": 1299.99,
    "number": 129999,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 49.99,
    "number": 4999,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 104.00,
    "number": 10400,
    "symbol": "$"
  },
  "addon_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 1453.98,
    "number": 145398,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

## Expected Errors

| Error Code | Description | Resolution |
|------------|-------------|------------|
| `ErrorCartNotFound` | Cart does not exist | Verify cart ID and domain |
| `ErrorStoreUnavailable` | Store service unavailable | Retry request |

## Related Endpoints

- [Add Line Item V2](/firmly-api/firmly-cart-api-v2/cart-management/add-line-item/) - Add items to cart
- [Update Line Item V2](/firmly-api/firmly-cart-api-v2/cart-management/update-line-item/) - Modify cart items
- [Clear Cart V2](/firmly-api/firmly-cart-api-v2/cart-management/clear-cart/) - Empty the cart
 


---


# Update Line Item V2

Update the quantity of an existing line item in the shopping cart. This endpoint modifies the quantity or removes the item if quantity is set to 0.

## Endpoint

```
POST|PUT /api/v2/domains/{domain}/cart/line-items/{line_item_id}
```

## Request Schema

```javascript
{
  "quantity": 2                               // Required: New quantity (0 to remove item)
}
```

## Response

Returns the updated [`ShoppingCartV2`](/firmly-api/firmly-cart-api-v2/schema/#shoppingcartv2) with modified line item quantities and recalculated pricing.

## Sample Request & Response

**Request:**
```javascript
PUT /api/v2/domains/example.com/cart/line-items/item_01H2XVBR8C8JS5MQSFPJ8HF9SB

{
  "quantity": 2
}
```

**Response:**
```javascript
{
  "cart_id": "cart_01H2XVBR8C8JS5MQSFPJ8HF9SA",
  "line_items": [
    {
      "line_item_id": "item_01H2XVBR8C8JS5MQSFPJ8HF9SB",
      "sku": "SOFA-001",
      "variant_id": "var_01H2XVBR8C8JS5MQSFPJ8HF9SB",
      "description": "Premium Sectional Sofa - Navy Blue",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 1299.99,
        "number": 129999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "ship_01H2XVBR8C8JS5MQSFPJ8HF9SC",
      "line_item_ids": ["item_01H2XVBR8C8JS5MQSFPJ8HF9SB"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to customer address"
      }
    }
  ],
  "addons": {
    "offers": [],
    "selections": []
  },
  "sub_total": {
    "currency": "USD",
    "value": 2599.98,
    "number": 259998,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "addon_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 2599.98,
    "number": 259998,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

## Expected Errors

| Error Code | Description | Resolution |
|------------|-------------|------------|
| `ErrorInvalidInputBody` | Invalid request format | Check request schema |
| `ErrorLineItemNotFound` | Line item does not exist | Verify line_item_id |
| `ErrorInvalidQuantity` | Quantity must be non-negative | Use quantity >= 0 |
| `ErrorStoreUnavailable` | Store service unavailable | Retry request |

## Related Endpoints

- [Get Cart V2](/firmly-api/firmly-cart-api-v2/cart-management/get-cart/) - View current cart state
- [Add Line Item V2](/firmly-api/firmly-cart-api-v2/cart-management/add-line-item/) - Add new items to cart
- [Clear Cart V2](/firmly-api/firmly-cart-api-v2/cart-management/clear-cart/) - Empty the cart
 


---

# Cart Management


  <h1 id="cart-management-apis">Cart Management APIs</h1><p>The following APIs are used for basic cart operations:</p>
<ul>
<li><a href=/firmly-api/firmly-cart-api-v2/cart-management/get-cart/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get Cart</span></a></li>
<li><a href=/firmly-api/firmly-cart-api-v2/cart-management/add-line-item/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Add Line Item</span></a></li>
<li><a href=/firmly-api/firmly-cart-api-v2/cart-management/update-line-item/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Update Line Item</span></a></li>
<li><a href=/firmly-api/firmly-cart-api-v2/cart-management/clear-cart/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Clear Cart</span></a></li>
</ul>


- [Get Cart V2](/firmly-api/firmly-cart-api-v2/cart-management/get-cart/index.md)
- [Update Line Item V2](/firmly-api/firmly-cart-api-v2/cart-management/update-line-item/index.md)
- [Add Line Item](/firmly-api/firmly-cart-api-v2/cart-management/add-line-item/index.md)
- [Clear Cart](/firmly-api/firmly-cart-api-v2/cart-management/clear-cart/index.md)


---


# Set Billing Info V2

Sets the billing address for the cart. This endpoint is used when the billing address differs from the shipping address, or when setting billing information for digital/pickup orders.

## Endpoint

```
POST|PUT /api/v2/domains/{domain}/cart/billing-info
```

## Request Schema

```javascript
{
  "first_name": "string",                     // Required: Billing contact's first name
  "last_name": "string",                      // Required: Billing contact's last name
  "address1": "string",                       // Required: Primary billing address line
  "address2": "string",                       // Optional: Secondary address line (apt, suite, etc.)
  "city": "string",                           // Required: Billing city name
  "state_or_province": "string",              // Required: Billing state/province code or name
  "postal_code": "string",                    // Required: Billing ZIP/postal code
  "country": "string",                        // Required: Billing country code (ISO 3166-1 alpha-2)
  "phone": "string",                          // Required: Billing contact phone number
  "email": "string"                           // Required: Billing contact email address
}
```

## Response Format

Returns a firmly [`ShoppingCartV2`](/firmly-api/firmly-cart-api-v2/schema/#shoppingcartv2) with updated billing information.

## Expected Errors

Normalized Identifier | Error Code | Description
--------- | ------- | -----------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | JWT token is invalid.
ErrorInvalidInputBody | 400 | Request body validation failed.
InvalidJWTToken | 401 | The JWT token is invalid.
ErrorCountryNotSupported | 400 | Billing country not supported by merchant.
ErrorInvalidState | 400 | Billing state/province not valid for the specified country.
ErrorCartNotFound | 404 | Cart session not found.
UnprocessableEntity | 422 | The given payload has unprocessable data.

## Sample Requests & Responses

### Different Billing Address

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/billing-info' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "first_name": "John",
    "last_name": "Smith",
    "address1": "456 Business Plaza",
    "address2": "Suite 200",
    "city": "Corporate City",
    "state_or_province": "NY",
    "postal_code": "10001",
    "country": "US",
    "phone": "212-555-0199",
    "email": "john.smith@company.com"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-12345",
      "sku": "WIDGET-001",
      "description": "Premium Widget",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 49.99,
        "number": 4999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "shipment-12345",
      "line_item_ids": ["item-12345"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "shipping_method": {
        "id": "STANDARD_GROUND",
        "description": "Standard Ground",
        "price": {
          "currency": "USD",
          "value": 9.99,
          "number": 999,
          "symbol": "$"
        },
        "estimated_delivery": "5-7 business days"
      }
    }
  ],
  "shipping_info": {
    "first_name": "John",
    "last_name": "Smith",
    "address1": "123 Main Street",
    "address2": "Apt 4B",
    "city": "Anytown",
    "state_or_province": "CA",
    "postal_code": "12345",
    "country": "US",
    "phone": "555-123-4567",
    "email": "john.smith@example.com"
  },
  "billing_info": {
    "first_name": "John",
    "last_name": "Smith",
    "address1": "456 Business Plaza",
    "address2": "Suite 200",
    "city": "Corporate City",
    "state_or_province": "NY",
    "postal_code": "10001",
    "country": "US",
    "phone": "212-555-0199",
    "email": "john.smith@company.com"
  },
  "sub_total": {
    "currency": "USD",
    "value": 99.98,
    "number": 9998,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 9.99,
    "number": 999,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 8.80,
    "number": 880,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 118.77,
    "number": 11877,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### International Billing Address

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/billing-info' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "first_name": "Emma",
    "last_name": "Thompson",
    "address1": "10 Downing Street",
    "city": "London",
    "state_or_province": "England",
    "postal_code": "SW1A 2AA",
    "country": "GB",
    "phone": "+44 20 7946 0958",
    "email": "emma.thompson@example.co.uk"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-67890",
      "sku": "DIGITAL-COURSE-001",
      "description": "Online Programming Course",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 199.99,
        "number": 19999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "digital-shipment-001",
      "line_item_ids": ["item-67890"],
      "fulfillment_type": {
        "id": "DIGITAL_DELIVERY",
        "name": "Digital Delivery",
        "description": "Instant digital access"
      },
      "shipping_method": {
        "id": "INSTANT_DOWNLOAD",
        "description": "Instant Download",
        "price": {
          "currency": "USD",
          "value": 0.00,
          "number": 0,
          "symbol": "$"
        },
        "estimated_delivery": "Immediate"
      }
    }
  ],
  "billing_info": {
    "first_name": "Emma",
    "last_name": "Thompson",
    "address1": "10 Downing Street",
    "city": "London",
    "state_or_province": "England",
    "postal_code": "SW1A 2AA",
    "country": "GB",
    "phone": "+44 20 7946 0958",
    "email": "emma.thompson@example.co.uk"
  },
  "sub_total": {
    "currency": "USD",
    "value": 199.99,
    "number": 19999,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 199.99,
    "number": 19999,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Pickup Order Billing

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/billing-info' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "first_name": "Sarah",
    "last_name": "Johnson",
    "address1": "789 Oak Avenue",
    "city": "Springfield",
    "state_or_province": "IL",
    "postal_code": "62701",
    "country": "US",
    "phone": "217-555-0123",
    "email": "sarah.johnson@example.com"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-11111",
      "sku": "ELECTRONICS-001",
      "description": "Wireless Headphones",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 149.99,
        "number": 14999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "pickup-shipment-001",
      "line_item_ids": ["item-11111"],
      "fulfillment_type": {
        "id": "PICKUP_IN_STORE",
        "name": "Store Pickup",
        "description": "Pick up your items at a nearby store"
      },
      "selected_location": {
        "location_id": "store-springfield-001",
        "name": "Springfield Store",
        "address": {
          "address1": "100 Mall Drive",
          "city": "Springfield",
          "state_or_province": "IL",
          "postal_code": "62704",
          "country": "US"
        },
        "phone": "217-555-0100"
      },
      "shipping_method": {
        "id": "IN_STORE_PICKUP",
        "description": "In-Store Pickup",
        "price": {
          "currency": "USD",
          "value": 0.00,
          "number": 0,
          "symbol": "$"
        },
        "estimated_delivery": "Available immediately"
      }
    }
  ],
  "billing_info": {
    "first_name": "Sarah",
    "last_name": "Johnson",
    "address1": "789 Oak Avenue",
    "city": "Springfield",
    "state_or_province": "IL",
    "postal_code": "62701",
    "country": "US",
    "phone": "217-555-0123",
    "email": "sarah.johnson@example.com"
  },
  "sub_total": {
    "currency": "USD",
    "value": 149.99,
    "number": 14999,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 12.00,
    "number": 1200,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 161.99,
    "number": 16199,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```
 


---


# Set Shipping Info V2

Set customer shipping information for cart delivery. This endpoint validates the address, calculates shipping costs, and updates cart totals.

## Endpoint

```
POST|PUT /api/v2/domains/{domain}/cart/shipping-info
```

## Request Schema

```javascript
{
  "first_name": "string",                     // Required: Customer's first name
  "last_name": "string",                      // Required: Customer's last name
  "address1": "string",                       // Required: Primary address line
  "address2": "string",                       // Optional: Secondary address line (apt, suite, etc.)
  "city": "string",                           // Required: City name
  "state_or_province": "string",              // Required: State/province code or name
  "postal_code": "string",                    // Required: ZIP/postal code
  "country": "string",                        // Required: Country code (ISO 3166-1 alpha-2)
  "phone": "string",                          // Required: Contact phone number
  "email": "string"                           // Required: Contact email address
}
```

## Response Format

Returns a firmly [`ShoppingCartV2`](/firmly-api/firmly-cart-api-v2/schema/#shoppingcartv2) with updated shipping information and recalculated totals.

## Expected Errors

Normalized Identifier | Error Code | Description
--------- | ------- | -----------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | JWT token is invalid.
ErrorInvalidInputBody | 400 | Request body validation failed.
InvalidJWTToken | 401 | The JWT token is invalid.
ErrorNoLineItem | 400 | Cart is empty - no line items to ship.
ErrorShippingNotNeeded | 400 | Cart contains only digital/non-shippable items.
ErrorCountryNotSupported | 400 | Country not supported by merchant.
ErrorInvalidState | 400 | State/province not valid for the specified country.
ErrorInvalidShippingInfo | 400 | Shipping information format is invalid.
ErrorInvalidEmail | 400 | Email address format is invalid.
ErrorStoreUnavailable | 503 | Store service temporarily unavailable.
UnprocessableEntity | 422 | The given payload has unprocessable data.

## Sample Requests & Responses

### Standard Shipping Address

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipping-info' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "first_name": "John",
    "last_name": "Smith",
    "address1": "123 Main Street",
    "address2": "Apt 4B",
    "city": "Anytown",
    "state_or_province": "CA",
    "postal_code": "12345",
    "country": "US",
    "phone": "555-123-4567",
    "email": "john.smith@example.com"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-12345",
      "sku": "WIDGET-001",
      "description": "Premium Widget",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 49.99,
        "number": 4999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "shipment-12345",
      "line_item_ids": ["item-12345"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "shipping_method": {
        "id": "STANDARD_GROUND",
        "description": "Standard Ground",
        "price": {
          "currency": "USD",
          "value": 9.99,
          "number": 999,
          "symbol": "$"
        },
        "estimated_delivery": "5-7 business days"
      }
    }
  ],
  "shipping_info": {
    "first_name": "John",
    "last_name": "Smith",
    "address1": "123 Main Street",
    "address2": "Apt 4B",
    "city": "Anytown",
    "state_or_province": "CA",
    "postal_code": "12345",
    "country": "US",
    "phone": "555-123-4567",
    "email": "john.smith@example.com"
  },
  "sub_total": {
    "currency": "USD",
    "value": 99.98,
    "number": 9998,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 9.99,
    "number": 999,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 8.80,
    "number": 880,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 118.77,
    "number": 11877,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### International Shipping Address

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipping-info' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "first_name": "Marie",
    "last_name": "Dubois",
    "address1": "45 Rue de la Paix",
    "city": "Paris",
    "state_or_province": "Île-de-France",
    "postal_code": "75001",
    "country": "FR",
    "phone": "+33 1 42 86 87 88",
    "email": "marie.dubois@example.fr"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-67890",
      "sku": "ACCESSORY-002",
      "description": "Designer Handbag",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 299.99,
        "number": 29999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "intl-shipment-001",
      "line_item_ids": ["item-67890"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "International shipping"
      },
      "shipping_method": {
        "id": "INTERNATIONAL_STANDARD",
        "description": "International Standard",
        "price": {
          "currency": "USD",
          "value": 25.00,
          "number": 2500,
          "symbol": "$"
        },
        "estimated_delivery": "7-14 business days"
      }
    }
  ],
  "shipping_info": {
    "first_name": "Marie",
    "last_name": "Dubois",
    "address1": "45 Rue de la Paix",
    "city": "Paris",
    "state_or_province": "Île-de-France",
    "postal_code": "75001",
    "country": "FR",
    "phone": "+33 1 42 86 87 88",
    "email": "marie.dubois@example.fr"
  },
  "sub_total": {
    "currency": "USD",
    "value": 299.99,
    "number": 29999,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 25.00,
    "number": 2500,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 324.99,
    "number": 32499,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
``` 
 


---

# Checkout


  <h1 id="checkout-apis">Checkout APIs</h1><p>The following APIs are used for checkout operations:</p>
<ul>
<li><a href=/firmly-api/firmly-cart-api-v2/checkout/set-shipping-info/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Set Shipping Info</span></a></li>
<li><a href=/firmly-api/firmly-cart-api-v2/checkout/set-billing-info/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Set Billing Info</span></a></li>
</ul>


- [Set Shipping Info V2](/firmly-api/firmly-cart-api-v2/checkout/set-shipping-info/index.md)
- [Set Billing Info V2](/firmly-api/firmly-cart-api-v2/checkout/set-billing-info/index.md)


---


# Cart API v2 Overview

The Cart API v2 introduces **multi-shipment support**, enabling more flexible fulfillment options and enhanced shopping experiences. This major revision extends the existing v1 API while maintaining backward compatibility.

## Key Differences from v1

### URL Structure
- **v1**: `/api/v1/domains/{domain}/cart`
- **v2**: `/api/v2/domains/{domain}/cart`

### Multi-Shipment Support

**v1** supports only a single shipment per cart:
```javascript
{
  "cart_id": "123",
  "line_items": [...],
  "shipping_method": {...},  // Single method for entire cart
  "shipping_total": {...}
}
```

**v2** supports multiple shipments with different fulfillment types:
```javascript
{
  "cart_id": "123",
  "line_items": [...],
  "shipments": [               // NEW: Array of shipments
    {
      "shipment_id": "ship_1",
      "fulfillment_type": {"id": "SHIP_TO_ADDRESS"},
      "line_item_ids": ["item_1", "item_2"],
      "shipping_method": {...}
    },
    {
      "shipment_id": "ship_2", 
      "fulfillment_type": {"id": "PICKUP_IN_STORE"},
      "line_item_ids": ["item_3"],
      "selected_location": {...}
    }
  ],
  "schema_version": "2.0"       // NEW: Version identifier
}
```

### Fulfillment Types

v2 introduces three fulfillment types:

| Type | Description | Use Cases |
|------|-------------|-----------|
| `SHIP_TO_ADDRESS` | Standard shipping to customer address | Most products, default behavior |
| `SCHEDULED_DELIVERY` | Date/time-specific delivery | Furniture, appliances, large items |
| `PICKUP_IN_STORE` | Customer pickup at store location | Buy online, pick up in store |

### Enhanced Addon System

v2 provides a three-tier addon system:

- **Cart-level**: Apply to entire order (e.g., shipping protection)
- **Shipment-level**: Apply to specific shipment (e.g., white glove delivery)  
- **Item-level**: Apply to specific items (e.g., extended warranty)

```javascript
{
  "addons": {                    // NEW: Addon container
    "offers": [...],             // Available addons
    "selections": [...]          // Applied addons
  },
  "addon_total": {...}           // NEW: Total addon costs
}
```

### Schema Changes

| Field | v1 | v2 | Notes |
|-------|----|----|-------|
| `tax` | ✅ | ❌ | Replaced by `tax_total` |
| `tax_total` | ❌ | ✅ | New field name |
| `shipments` | ❌ | ✅ | Core multi-shipment array |
| `addons` | ❌ | ✅ | Three-tier addon system |
| `addon_total` | ❌ | ✅ | Total addon costs |
| `schema_version` | ❌ | ✅ | Always `"2.0"` |

## Migration Guide

### Step 1: Update Base URLs

Replace all v1 endpoints with v2:

```diff
- GET /api/v1/domains/example.com/cart
+ GET /api/v2/domains/example.com/cart
```

### Step 2: Handle New Response Fields

Update your code to handle v2 schema changes:

```javascript
// v1 code
const tax = cart.tax;
const hasShipping = cart.shipping_method !== null;

// v2 code  
const tax = cart.tax_total;           // Field renamed
const shipments = cart.shipments;     // New shipments array
const hasShipping = shipments.some(s => s.shipping_method !== null);
```

### Step 3: Implement Multi-Shipment Logic

Display shipment information to customers:

```javascript
// Display each shipment separately
cart.shipments.forEach(shipment => {
  console.log(`Shipment ${shipment.shipment_id}:`);
  console.log(`  Fulfillment: ${shipment.fulfillment_type.name}`);
  console.log(`  Items: ${shipment.line_item_ids.length}`);
  
  if (shipment.selected_date) {
    console.log(`  Delivery Date: ${shipment.selected_date}`);
  }
  
  if (shipment.selected_location) {
    console.log(`  Pickup Location: ${shipment.selected_location.name}`);
  }
});
```

### Step 4: Use New v2-Exclusive Features

Take advantage of enhanced functionality:

```javascript
// Set fulfillment type for a shipment
await fetch('/api/v2/domains/example.com/cart/shipments/fulfillment-type', {
  method: 'POST',
  body: JSON.stringify({
    shipment_id: 'ship_1',
    fulfillment_type: 'SCHEDULED_DELIVERY'
  })
});

// Get available delivery dates
const availability = await fetch('/api/v2/domains/example.com/cart/shipments/get-availability', {
  method: 'POST', 
  body: JSON.stringify({
    shipment_id: 'ship_1'
  })
});
```

### Step 5: Handle Addons

Implement the three-tier addon system:

```javascript
// Add cart-level addon (applies to entire order)
await fetch('/api/v2/domains/example.com/cart/addons', {
  method: 'POST',
  body: JSON.stringify({
    selections: [{
      addon_id: 'shipping_protection'
      // No line_item_ids = cart-level
    }]
  })
});

// Add item-level addon
await fetch('/api/v2/domains/example.com/cart/addons', {
  method: 'POST',
  body: JSON.stringify({
    selections: [{
      addon_id: 'warranty_2yr',
      selected_line_item_ids: ['item_1'] // Specific to item
    }]
  })
});
```

## Backward Compatibility

The v2 API maintains compatibility with existing v1 integrations:

- **Existing v1 routes**: Continue to work unchanged
- **v2 routes**: Automatically handle merchants still using v1 backend systems
- **Response format**: v2 responses include all v1 fields plus new v2 fields
- **Single shipment**: v2 creates a default shipment for v1-style carts

## Migration Checklist

- [ ] Update all API endpoints from `/api/v1/` to `/api/v2/`
- [ ] Update response parsing to use `tax_total` instead of `tax`
- [ ] Handle `shipments` array in cart responses
- [ ] Implement shipment-specific UI components
- [ ] Add support for fulfillment type selection
- [ ] Implement addon selection interface
- [ ] Test multi-shipment checkout flows
- [ ] Update error handling for new v2 error types

## Next Steps

- Review the [Schema Reference](/firmly-api/firmly-cart-api-v2/schema/) for complete v2 data structures
- Explore [Cart Management](/firmly-api/firmly-cart-api-v2/get-cart/) endpoints
- Learn about [Shipment Management](/firmly-api/firmly-cart-api-v2/set-fulfillment-type/) features
- Implement [Addon Management](/firmly-api/firmly-cart-api-v2/add-addon/) for enhanced experiences 
 


---


# Add Promo Codes V2

Applies promotional codes to the cart for discounts. This endpoint accepts multiple promo codes and validates them against the merchant's active promotions.

## Endpoint

```
POST|PUT /api/v2/domains/{domain}/cart/promo-codes
```

## Request Schema

```javascript
{
  "promo_codes": [                            // Required: Array of promotional codes
    "string"                                  // 1-10 promo codes allowed
  ]
}
```

## Response Format

Returns a firmly [`ShoppingCartV2`](/firmly-api/firmly-cart-api-v2/schema/#shoppingcartv2) with applied promotional discounts and recalculated totals.

## Expected Errors

Normalized Identifier | Error Code | Description
--------- | ------- | -----------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | JWT token is invalid.
ErrorInvalidInputBody | 400 | Request body validation failed.
InvalidJWTToken | 401 | The JWT token is invalid.
ErrorInvalidPromoCode | 400 | One or more promo codes are invalid or expired.
ErrorPromoNotAvailable | 400 | Promo code is not available for current cart contents.
UnprocessableEntity | 422 | The given payload has unprocessable data.

## Sample Requests & Responses

### Single Promo Code

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/promo-codes' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "promo_codes": ["SAVE20"]
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-12345",
      "sku": "WIDGET-001",
      "description": "Premium Widget",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 49.99,
        "number": 4999,
        "symbol": "$"
      },
      "discounts": [
        {
          "code": "SAVE20",
          "description": "20% Off Widgets",
          "amount": {
            "currency": "USD",
            "value": 19.99,
            "number": 1999,
            "symbol": "$"
          }
        }
      ]
    }
  ],
  "shipments": [
    {
      "shipment_id": "shipment-12345",
      "line_item_ids": ["item-12345"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "shipping_method": {
        "id": "STANDARD_GROUND",
        "description": "Standard Ground",
        "price": {
          "currency": "USD",
          "value": 9.99,
          "number": 999,
          "symbol": "$"
        },
        "estimated_delivery": "5-7 business days"
      }
    }
  ],
  "promo_codes": ["SAVE20"],
  "sub_total": {
    "currency": "USD",
    "value": 99.98,
    "number": 9998,
    "symbol": "$"
  },
  "discount_total": {
    "currency": "USD",
    "value": 19.99,
    "number": 1999,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 9.99,
    "number": 999,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 6.40,
    "number": 640,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 96.38,
    "number": 9638,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Multiple Promo Codes

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/promo-codes' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "promo_codes": ["FREESHIP", "WELCOME10"]
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-67890",
      "sku": "ACCESSORY-002",
      "description": "Designer Handbag",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 299.99,
        "number": 29999,
        "symbol": "$"
      },
      "discounts": [
        {
          "code": "WELCOME10",
          "description": "Welcome 10% Off",
          "amount": {
            "currency": "USD",
            "value": 30.00,
            "number": 3000,
            "symbol": "$"
          }
        }
      ]
    }
  ],
  "shipments": [
    {
      "shipment_id": "intl-shipment-001",
      "line_item_ids": ["item-67890"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "International shipping"
      },
      "shipping_method": {
        "id": "INTERNATIONAL_STANDARD",
        "description": "International Standard",
        "price": {
          "currency": "USD",
          "value": 25.00,
          "number": 2500,
          "symbol": "$"
        },
        "estimated_delivery": "7-14 business days"
      },
      "discounts": [
        {
          "code": "FREESHIP",
          "description": "Free Shipping",
          "amount": {
            "currency": "USD",
            "value": 25.00,
            "number": 2500,
            "symbol": "$"
          }
        }
      ]
    }
  ],
  "promo_codes": ["FREESHIP", "WELCOME10"],
  "sub_total": {
    "currency": "USD",
    "value": 299.99,
    "number": 29999,
    "symbol": "$"
  },
  "discount_total": {
    "currency": "USD",
    "value": 55.00,
    "number": 5500,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 244.99,
    "number": 24499,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Stackable Promo Codes

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/promo-codes' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "promo_codes": ["STUDENT15", "FIRSTORDER", "LOYALTY5"]
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-11111",
      "sku": "BOOK-001",
      "description": "Programming Guide",
      "quantity": 3,
      "price": {
        "currency": "USD",
        "value": 39.99,
        "number": 3999,
        "symbol": "$"
      },
      "discounts": [
        {
          "code": "STUDENT15",
          "description": "Student Discount 15%",
          "amount": {
            "currency": "USD",
            "value": 18.00,
            "number": 1800,
            "symbol": "$"
          }
        },
        {
          "code": "FIRSTORDER",
          "description": "First Order $10 Off",
          "amount": {
            "currency": "USD",
            "value": 10.00,
            "number": 1000,
            "symbol": "$"
          }
        },
        {
          "code": "LOYALTY5",
          "description": "Loyalty Member $5 Off",
          "amount": {
            "currency": "USD",
            "value": 5.00,
            "number": 500,
            "symbol": "$"
          }
        }
      ]
    }
  ],
  "shipments": [
    {
      "shipment_id": "book-shipment-001",
      "line_item_ids": ["item-11111"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "shipping_method": {
        "id": "MEDIA_MAIL",
        "description": "Media Mail",
        "price": {
          "currency": "USD",
          "value": 3.99,
          "number": 399,
          "symbol": "$"
        },
        "estimated_delivery": "2-8 business days"
      }
    }
  ],
  "promo_codes": ["STUDENT15", "FIRSTORDER", "LOYALTY5"],
  "sub_total": {
    "currency": "USD",
    "value": 119.97,
    "number": 11997,
    "symbol": "$"
  },
  "discount_total": {
    "currency": "USD",
    "value": 33.00,
    "number": 3300,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 3.99,
    "number": 399,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 6.96,
    "number": 696,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 97.92,
    "number": 9792,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```
 


---


# Clear Promo Codes V2

Removes all applied promotional codes from the cart and recalculates totals without promotional discounts.

## Endpoint

```
DELETE /api/v2/domains/{domain}/cart/promo-codes
```

## Response Format

Returns a firmly [`ShoppingCartV2`](/firmly-api/firmly-cart-api-v2/schema/#shoppingcartv2) with promotional codes removed and totals recalculated.

## Expected Errors

Normalized Identifier | Error Code | Description
--------- | ------- | -----------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | JWT token is invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
ErrorCartNotFound | 404 | Cart session not found.
UnprocessableEntity | 422 | The given payload has unprocessable data.

## Sample Requests & Responses

### Clear All Promo Codes

**Request:**
```bash
curl \
  --location \
  --request DELETE 'https://api.firmly.work/api/v2/domains/example.com/cart/promo-codes' \
  --header 'x-firmly-authorization: <>'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-12345",
      "sku": "WIDGET-001",
      "description": "Premium Widget",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 49.99,
        "number": 4999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "shipment-12345",
      "line_item_ids": ["item-12345"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "shipping_method": {
        "id": "STANDARD_GROUND",
        "description": "Standard Ground",
        "price": {
          "currency": "USD",
          "value": 9.99,
          "number": 999,
          "symbol": "$"
        },
        "estimated_delivery": "5-7 business days"
      }
    }
  ],
  "promo_codes": [],
  "sub_total": {
    "currency": "USD",
    "value": 99.98,
    "number": 9998,
    "symbol": "$"
  },
  "discount_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 9.99,
    "number": 999,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 8.80,
    "number": 880,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 118.77,
    "number": 11877,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Clear Codes with Multiple Items

**Request:**
```bash
curl \
  --location \
  --request DELETE 'https://api.firmly.work/api/v2/domains/example.com/cart/promo-codes' \
  --header 'x-firmly-authorization: <>'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-67890",
      "sku": "ACCESSORY-002",
      "description": "Designer Handbag",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 299.99,
        "number": 29999,
        "symbol": "$"
      }
    },
    {
      "line_item_id": "item-11111",
      "sku": "BOOK-001",
      "description": "Programming Guide",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 39.99,
        "number": 3999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "mixed-shipment-001",
      "line_item_ids": ["item-67890", "item-11111"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "shipping_method": {
        "id": "STANDARD_GROUND",
        "description": "Standard Ground",
        "price": {
          "currency": "USD",
          "value": 12.99,
          "number": 1299,
          "symbol": "$"
        },
        "estimated_delivery": "5-7 business days"
      }
    }
  ],
  "promo_codes": [],
  "sub_total": {
    "currency": "USD",
    "value": 379.97,
    "number": 37997,
    "symbol": "$"
  },
  "discount_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 12.99,
    "number": 1299,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 31.44,
    "number": 3144,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 424.40,
    "number": 42440,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Clear Codes with Free Shipping

**Request:**
```bash
curl \
  --location \
  --request DELETE 'https://api.firmly.work/api/v2/domains/example.com/cart/promo-codes' \
  --header 'x-firmly-authorization: <>'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-22222",
      "sku": "ELECTRONICS-001",
      "description": "Wireless Headphones",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 149.99,
        "number": 14999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "electronics-shipment-001",
      "line_item_ids": ["item-22222"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "shipping_method": {
        "id": "EXPEDITED_2DAY",
        "description": "2-Day Express",
        "price": {
          "currency": "USD",
          "value": 19.99,
          "number": 1999,
          "symbol": "$"
        },
        "estimated_delivery": "2 business days"
      }
    }
  ],
  "promo_codes": [],
  "sub_total": {
    "currency": "USD",
    "value": 149.99,
    "number": 14999,
    "symbol": "$"
  },
  "discount_total": {
    "currency": "USD",
    "value": 0.00,
    "number": 0,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 19.99,
    "number": 1999,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 13.60,
    "number": 1360,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 183.58,
    "number": 18358,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```
 


---

# Promotions


  <h1 id="promotions-apis">Promotions APIs</h1><p>The following APIs are used for managing promotional codes:</p>
<ul>
<li><a href=/firmly-api/firmly-cart-api-v2/promotions/add-promo-codes/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Add Promo Codes</span></a></li>
<li><a href=/firmly-api/firmly-cart-api-v2/promotions/clear-promo-codes/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Clear Promo Codes</span></a></li>
</ul>


- [Add Promo Codes V2](/firmly-api/firmly-cart-api-v2/promotions/add-promo-codes/index.md)
- [Clear Promo Codes V2](/firmly-api/firmly-cart-api-v2/promotions/clear-promo-codes/index.md)


---


# Schema Reference

This document provides complete schema definitions for the Cart API v2. All v2 responses include `"schema_version": "2.0"` to identify the format.

## ShoppingCartV2

The main cart object that extends v1 with multi-shipment support.

```javascript
{
  // === Inherited from v1 ===
  "cart_id": "string",              // UUID
  "platform_id": "string",         // Platform identifier
  "shop_id": "string",              // Shop identifier
  "line_items": [LineItem],         // Array of cart items
  "sub_total": Amount,              // Subtotal before discounts
  "cart_discount": Amount,          // Cart-level discounts
  "shipping_total": Amount,         // Total shipping costs
  "total": Amount,                  // Final total
  "shipping_info": ShippingInfo,    // Customer shipping address
  "coupons": ["string"],            // Applied promo codes
  
  // === New in v2 ===
  "shipments": [ShipmentSchema],           // Multi-shipment array
  "addons": AddonsContainerSchema,         // Cart-level addon system
  "addon_total": Amount,                   // Total addon costs
  "tax_total": Amount,                     // Replaces v1 "tax" field
  "schema_version": "2.0",                 // Version identifier
  
  // === Updated in v2 ===
  "shipping_method_options": ShippingMethodCollectionV2,
  "shipping_method": ShippingMethodV2
}
```

## ShipmentSchema

Represents a group of items with the same fulfillment method.

```javascript
{
  "shipment_id": "string",                    // UUID
  "fulfillment_type": FulfillmentTypeSchema,  // How items will be fulfilled
  "fulfillment_type_options": [FulfillmentTypeSchema], // Available options
  "line_item_ids": ["string"],               // Items in this shipment
  "shipping_method_options": [ShippingMethodV2], // Available shipping methods
  "shipping_method": ShippingMethodV2,        // Selected shipping method
  
  // Fulfillment-specific fields
  "selected_location": PickupLocationSchema,  // For PICKUP_IN_STORE
  "selected_date": "YYYY-MM-DD",             // For scheduled delivery/pickup
  "selected_time_slot": TimeSlotSchema,      // For scheduled delivery/pickup
  "pickup_option": PickupOptionSchema,       // For PICKUP_IN_STORE
  "notes": "string"                          // Delivery instructions
}
```

## FulfillmentTypeSchema

Defines how items will be delivered to the customer.

```javascript
{
  "id": "SHIP_TO_ADDRESS" | "SCHEDULED_DELIVERY" | "PICKUP_IN_STORE",
  "name": "string",         // Human-readable name
  "description": "string"   // Detailed description
}
```

### Fulfillment Types

| ID | Name | Description | Use Cases |
|----|------|-------------|-----------|
| `SHIP_TO_ADDRESS` | Ship to Address | Standard shipping to customer address | Most products, default behavior |
| `SCHEDULED_DELIVERY` | Scheduled Delivery | Date/time-specific delivery | Furniture, appliances, large items |
| `PICKUP_IN_STORE` | Pickup in Store | Customer pickup at store location | Buy online, pick up in store |

## ShippingMethodV2

Enhanced shipping method with v2 features.

```javascript
{
  "id": "string",                    // Unique method identifier
  "description": "string",           // Human-readable description
  "price": Amount,                   // Shipping cost
  "estimated_delivery": "string"     // Delivery time estimate
}
```

**Example:**
```javascript
{
  "id": "STANDARD_VENDOR_SHIPPING",
  "description": "Standard Shipping (O)",
  "price": {
    "value": 0,
    "currency": "USD",
    "number": 0,
    "symbol": "$"
  },
  "estimated_delivery": "Varies by vendor"
}
```

## TimeSlotSchema

For scheduled delivery date/time selection.

```javascript
{
  "slot_id": "string",              // Unique slot identifier
  "start_time": TimeSchema,         // Slot start time
  "end_time": TimeSchema,           // Slot end time
  "description": "string",          // Human-readable description
  "available": boolean,             // Whether slot is available
  "price": Amount                   // Additional cost for this slot
}
```

### TimeSchema

```javascript
{
  "utc": "2025-05-15T14:00:00Z",           // UTC timestamp
  "local": "2025-05-15T09:00:00",          // Local time
  "local_timezone": "America/Los_Angeles"   // Timezone identifier
}
```

**Example:**
```javascript
{
  "slot_id": "morning_9_12",
  "start_time": {
    "utc": "2025-05-15T16:00:00Z",
    "local": "2025-05-15T09:00:00",
    "local_timezone": "America/Los_Angeles"
  },
  "end_time": {
    "utc": "2025-05-15T19:00:00Z", 
    "local": "2025-05-15T12:00:00",
    "local_timezone": "America/Los_Angeles"
  },
  "description": "Morning (9am - 12pm)",
  "available": true,
  "price": {
    "value": 0,
    "currency": "USD"
  }
}
```

## PickupLocationSchema

For in-store pickup locations.

```javascript
{
  "location_id": "string",       // Unique location identifier
  "name": "string",              // Store name
  "address": AddressSchema,      // Store address
  "phone": "string",             // Store phone number
  "hours": StoreHoursSchema,     // Operating hours
  "available": boolean           // Whether pickup is available
}
```

## AddonsContainerSchema

Container for the three-tier addon system.

```javascript
{
  "offers": [AddonOffer],      // Available addon services
  "selections": [AddonSelection] // Currently applied addons
}
```

## AddonOffer

Defines an available addon service that shoppers can select.

```javascript
{
  "addon_id": "string",                    // Unique addon identifier in this cart
  
  "display": {
    "name": "string",                      // Required: Human-readable name
    "description": "string",               // Optional: Short description
    "long_description": "string",          // Optional: Detailed description
    "image_url": "string",                 // Optional: Addon image
    "links": ["string"]                    // Optional: Related links
  },
  
  "scope": "ITEM" | "GROUP" | "CART",      // Where the service applies
  "coverage_mode": "PER_ITEM" | "PREDEFINED_GROUP" | "FREE_GROUPING",
  
  "eligible_line_item_ids": ["string"],    // Required when scope ≠ CART
  
  "price": Amount,                         // Base addon cost
  
  // Enhanced pricing for per-item services
  "line_item_pricing": {                   // Optional: Different pricing per item
    "item_1": { "price": Amount },
    "item_2": { "price": Amount }
  },
  
  "constraints": {                         // Optional: Business rules
    "exclusive_group_id": "string",        // Mutual exclusivity group
    "requires_addon_ids": ["string"]       // Required prerequisite addons
  },
  
  "child_offers": [AddonOffer]             // Optional: Hierarchical sub-options
}
```

## AddonSelection

Represents shopper's current selection for an addon offer.

```javascript
{
  "addon_id": "string",                    // References AddonOffer.addon_id
  
  "selected_line_item_ids": ["string"],   // Items this addon applies to (when applicable)
  "selected_child_ids": ["string"],       // Selected child offers (for hierarchical)
  
  // Server-calculated pricing (read-only in responses)
  "price": Amount,                         // Total calculated cost
  "line_item_pricing": {                   // Per-item pricing breakdown
    "item_1": { "price": Amount },
    "item_2": { "price": Amount }
  },
  
  "metadata": {}                           // Addon-specific attributes
}
```

## Addon Scope & Coverage Patterns

### Cart-Level Services
**Pattern**: `scope: "CART"` + `coverage_mode: "PREDEFINED_GROUP"`  
**Use Cases**: Shipping protection, cart-wide insurance, expedited processing  
**Selection**: Single on/off toggle for entire order

```javascript
{
  "addon_id": "shipping_protection",
  "display": { "name": "Shipping Protection" },
  "scope": "CART",
  "coverage_mode": "PREDEFINED_GROUP",
  "price": { "value": 2.99, "currency": "USD" }
  // No eligible_line_item_ids needed
}
```

### Item-Level Services  
**Pattern**: `scope: "ITEM"` + `coverage_mode: "PER_ITEM"`  
**Use Cases**: Extended warranties, per-item haul-away, individual insurance  
**Selection**: Granular per-item checkboxes with individual pricing

```javascript
{
  "addon_id": "extended_warranty",
  "display": { "name": "Extended Warranty - 3 Year" },
  "scope": "ITEM", 
  "coverage_mode": "PER_ITEM",
  "eligible_line_item_ids": ["item_1", "item_2"],
  "price": { "value": 59.99, "currency": "USD" },
  "line_item_pricing": {
    "item_1": { "price": { "value": 45.00, "currency": "USD" } },
    "item_2": { "price": { "value": 75.00, "currency": "USD" } }
  }
}
```

### Group-Level Services - Predefined Groups
**Pattern**: `scope: "GROUP"` + `coverage_mode: "PREDEFINED_GROUP"`  
**Use Cases**: Appliance pair installation, furniture set protection  
**Selection**: All-or-nothing for predefined item groups

```javascript
{
  "addon_id": "appliance_pair_install",
  "display": { "name": "Professional Installation - Washer & Dryer Pair" },
  "scope": "GROUP",
  "coverage_mode": "PREDEFINED_GROUP", 
  "eligible_line_item_ids": ["washer_item", "dryer_item"],
  "price": { "value": 149.99, "currency": "USD" }
}
```

### Group-Level Services - Free Grouping
**Pattern**: `scope: "GROUP"` + `coverage_mode: "FREE_GROUPING"`  
**Use Cases**: Custom furniture protection, flexible service bundles  
**Selection**: Shopper chooses which eligible items to include

```javascript
{
  "addon_id": "furniture_protection_custom",
  "display": { "name": "Furniture Protection Plan - Custom Selection" },
  "scope": "GROUP",
  "coverage_mode": "FREE_GROUPING",
  "eligible_line_item_ids": ["sofa_item", "loveseat_item", "table_item"],
  "price": { "value": 89.99, "currency": "USD" }
}
```

### Hierarchical Services (Child Offers)
**Pattern**: Parent offer with `child_offers` array containing sub-options  
**Use Cases**: Tiered protection plans, service level selection  
**Selection**: Parent addon + one child option (radio button behavior)

```javascript
{
  "addon_id": "furniture_protection_plan",
  "display": { "name": "Furniture Protection Plan" },
  "scope": "GROUP",
  "coverage_mode": "FREE_GROUPING",
  "eligible_line_item_ids": ["sofa_item", "loveseat_item"],
  "price": { "value": 119.99, "currency": "USD" },
  "child_offers": [
    {
      "addon_id": "upholstery_only",
      "display": { "name": "Upholstery Coverage Only" },
      "scope": "INHERIT",
      "price": { "value": 79.99, "currency": "USD" },
      "constraints": { "exclusive_group_id": "coverage_level" }
    },
    {
      "addon_id": "full_coverage", 
      "display": { "name": "Full Coverage (Best Value)" },
      "scope": "INHERIT",
      "price": { "value": 119.99, "currency": "USD" },
      "constraints": { "exclusive_group_id": "coverage_level" }
    }
  ]
}
```

## Addon Constraints

### Mutual Exclusivity
Addons with the same `exclusive_group_id` cannot be selected simultaneously:

```javascript
{
  "constraints": {
    "exclusive_group_id": "warranty_level"  // Only one warranty level allowed
  }
}
```

### Dependencies
Addons can require other addons as prerequisites:

```javascript
{
  "addon_id": "premium_installation",
  "constraints": {
    "requires_addon_ids": ["white_glove_delivery"] // Must have delivery service first
  }
}
```

## Complete Addon Example

### Cart with Multiple Addon Types

```javascript
{
  "addons": {
    "offers": [
      {
        "addon_id": "shipping_protection",
        "display": { 
          "name": "Shipping Protection",
          "description": "Protect your entire order against shipping damage"
        },
        "scope": "CART",
        "coverage_mode": "PREDEFINED_GROUP", 
        "price": { "currency": "USD", "value": 2.99, "number": 299, "symbol": "$" }
      },
      {
        "addon_id": "warranty_per_item",
        "display": {
          "name": "Extended Warranty - 3 Year",
          "description": "Individual warranty coverage per item"
        },
        "scope": "ITEM",
        "coverage_mode": "PER_ITEM",
        "eligible_line_item_ids": ["item_1", "item_2"],
        "price": { "currency": "USD", "value": 59.99, "number": 5999, "symbol": "$"},
        "line_item_pricing": {
          "item_1": { "price": { "currency": "USD", "value": 45.00, "number": 4500, "symbol": "$" } },
          "item_2": { "price": { "currency": "USD", "value": 75.00, "number": 7500, "symbol": "$" } }
        }
      }
    ],
    "selections": [
      {
        "addon_id": "shipping_protection"
      },
      {
        "addon_id": "warranty_per_item",
        "selected_line_item_ids": ["item_1"],
        "price": { "currency": "USD", "value": 45.00, "number": 4500, "symbol": "$" },
        "line_item_pricing": {
          "item_1": { "price": { "currency": "USD", "value": 45.00, "number": 4500, "symbol": "$" } }  
        }
      }
    ]
  }
}
```

## Amount

Standard currency representation used throughout v2.

```javascript
{
  "value": number,      // Decimal value (e.g., 99.99)
  "currency": "string", // Currency code (e.g., "USD")
  "number": number,     // Value in smallest unit (e.g., cents: 9999)
  "symbol": "string"    // Currency symbol (e.g., "$")
}
```

## ShipmentAvailabilitySchema

Response format for availability requests (varies by fulfillment type).

### For SCHEDULED_DELIVERY:
```javascript
{
  "available_dates": ["YYYY-MM-DD"],     // Available delivery dates
  "time_slots": {                        // Time slots by date
    "2025-05-15": [TimeSlotSchema],
    "2025-05-16": [TimeSlotSchema]
  }
}
```

### For PICKUP_IN_STORE:
```javascript
{
  "pickup_locations": [PickupLocationSchema], // Available pickup locations
  "available_dates": ["YYYY-MM-DD"]          // Available pickup dates
}
```

### For SHIP_TO_ADDRESS:
```javascript
{
  "shipping_methods": [ShippingMethodV2]  // Available shipping methods
}
```

## LineItem

Cart line item (inherited from v1, unchanged).

```javascript
{
  "line_item_id": "string",      // Unique item identifier
  "variant_id": "string",        // Product variant identifier
  "quantity": number,            // Item quantity
  "price": Amount,               // Unit price
  "total": Amount,               // Line total
  "product": ProductSchema,      // Product information
  "variant": VariantSchema       // Variant information
}
```

## ShippingInfo

Customer shipping address (inherited from v1).

```javascript
{
  "first_name": "string",
  "last_name": "string", 
  "company": "string",
  "address1": "string",
  "address2": "string",
  "city": "string",
  "province": "string",
  "country": "string",
  "zip": "string",
  "phone": "string"
}
```

## Error Schemas

### V2-Specific Errors

#### ErrorInvalidFulfillmentType
```javascript
{
  "error": "ErrorInvalidFulfillmentType",
  "message": "Invalid fulfillment type provided",
  "details": {
    "provided": "INVALID_TYPE",
    "allowed": ["SHIP_TO_ADDRESS", "SCHEDULED_DELIVERY", "PICKUP_IN_STORE"]
  }
}
```

#### ErrorShipmentNotFound
```javascript
{
  "error": "ErrorShipmentNotFound", 
  "message": "Shipment not found",
  "details": {
    "shipment_id": "missing-shipment-id"
  }
}
```

#### ErrorLocationNotFound
```javascript
{
  "error": "ErrorLocationNotFound",
  "message": "Pickup location not found",
  "details": {
    "location_id": "missing-location-id"
  }
}
```

## Complete Example

### Multi-Shipment Cart with Scheduled Delivery and Addons

```javascript
{
  "cart_id": "550e8400-e29b-41d4-a716-446655440000",
  "platform_id": "example.com",
  "shop_id": "main",
  "line_items": [
    {
      "line_item_id": "item-1",
      "variant_id": "sofa-blue-large",
      "quantity": 1,
      "price": {"value": 1299.99, "currency": "USD"},
      "total": {"value": 1299.99, "currency": "USD"}
    },
    {
      "line_item_id": "item-2", 
      "variant_id": "washer-front-load",
      "quantity": 1,
      "price": {"value": 899.99, "currency": "USD"},
      "total": {"value": 899.99, "currency": "USD"}
    }
  ],
  "shipments": [
    {
      "shipment_id": "be87505b-5434-4451-aa56-17d09efd3806",
      "fulfillment_type": {
        "id": "SCHEDULED_DELIVERY",
        "name": "Scheduled Delivery",
        "description": "Delivery scheduled for a specific date"
      },
      "line_item_ids": ["item-1"],
      "selected_date": "2025-06-01",
      "selected_time_slot": {
        "slot_id": "morning_9_12",
        "description": "Morning (9am - 12pm)",
        "start_time": {
          "utc": "2025-06-01T16:00:00Z",
          "local": "2025-06-01T09:00:00",
          "local_timezone": "America/Los_Angeles"
        },
        "end_time": {
          "utc": "2025-06-01T19:00:00Z",
          "local": "2025-06-01T12:00:00", 
          "local_timezone": "America/Los_Angeles"
        },
        "price": {"value": 0, "currency": "USD"}
      },
      "shipping_method": {
        "id": "PREMIUM_SCHEDULED",
        "description": "Premium Delivery",
        "price": {"value": 50, "currency": "USD"},
        "estimated_delivery": "Premium scheduled delivery"
      }
    },
    {
      "shipment_id": "standard-ship-1",
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "line_item_ids": ["item-2"],
      "shipping_method": {
        "id": "STANDARD_SHIPPING",
        "description": "Standard Shipping",
        "price": {"value": 25, "currency": "USD"},
        "estimated_delivery": "3-5 business days"
      }
    }
  ],
  "addons": {
    "offers": [
      {
        "addon_id": "shipping_protection",
        "display": {
          "name": "Shipping Protection",
          "description": "Protect your entire order against shipping damage",
          "long_description": "Comprehensive protection for your entire order during shipping and delivery"
        },
        "scope": "CART",
        "coverage_mode": "PREDEFINED_GROUP",
        "price": {"currency": "USD", "value": 4.99, "number": 499, "symbol": "$"}
      },
      {
        "addon_id": "extended_warranty",
        "display": {
          "name": "Extended Warranty - 3 Year",
          "description": "Comprehensive coverage beyond manufacturer warranty"
        },
        "scope": "ITEM",
        "coverage_mode": "PER_ITEM",
        "eligible_line_item_ids": ["item-1", "item-2"],
        "price": {"currency": "USD", "value": 59.99, "number": 5999, "symbol": "$"},
        "line_item_pricing": {
          "item-1": {"price": {"currency": "USD", "value": 89.99, "number": 8999, "symbol": "$"}},
          "item-2": {"price": {"currency": "USD", "value": 129.99, "number": 12999, "symbol": "$"}}
        }
      },
      {
        "addon_id": "white_glove_delivery",
        "display": {
          "name": "White Glove Delivery Service", 
          "description": "Premium delivery with setup and packaging removal"
        },
        "scope": "GROUP",
        "coverage_mode": "FREE_GROUPING",
        "eligible_line_item_ids": ["item-1"],
        "price": {"currency": "USD", "value": 199.99, "number": 19999, "symbol": "$"}
      }
    ],
    "selections": [
      {
        "addon_id": "shipping_protection"
      },
      {
        "addon_id": "extended_warranty",
        "selected_line_item_ids": ["item-2"],
        "price": {"currency": "USD", "value": 129.99, "number": 12999, "symbol": "$"},
        "line_item_pricing": {
          "item-2": {"price": {"currency": "USD", "value": 129.99, "number": 12999, "symbol": "$"}}
        }
      },
      {
        "addon_id": "white_glove_delivery",
        "selected_line_item_ids": ["item-1"]
      }
    ]
  },
  "sub_total": {"value": 2199.98, "currency": "USD"},
  "shipping_total": {"value": 75, "currency": "USD"},
  "addon_total": {"value": 334.97, "currency": "USD"},
  "tax_total": {"value": 208.80, "currency": "USD"},
  "total": {"value": 2818.75, "currency": "USD"},
  "schema_version": "2.0"
}
```

---

For complete API endpoint documentation, see the individual route references. 
 


---


# Get Availability
Retrieves available delivery dates, time slots, and pickup locations for a specific shipment. This V2-exclusive endpoint returns different response formats based on the shipment's fulfillment type.

## HTTP Request
`POST /api/v2/domains/{{merchant-domain}}/cart/shipments/get-availability`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. example.com).

## Request Body
Content-type: application/json

```javascript
{
  "shipment_id": "string"                     // Required: Target shipment identifier
}
```

## Response Format
Content-type: application/json

Returns one of three availability schema types based on the shipment's fulfillment type:

### Response Schema Types

| Fulfillment Type | Response Schema | Description |
|------------------|-----------------|-------------|
| `SHIP_TO_ADDRESS` | `DeliveryAvailabilitySchema` | Available delivery dates and time slots |
| `SCHEDULED_DELIVERY` | `ScheduledDeliveryAvailabilitySchema` | Delivery windows and premium options |
| `PICKUP_IN_STORE` | `PickupAvailabilitySchema` | Store locations and pickup times |

## Expected Errors

Normalized Identifier | Error Code | Description
--------- | ------- | -----------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | JWT token is invalid.
ErrorInvalidInputBody | 400 | Request body validation failed.
InvalidJWTToken | 401 | The JWT token is invalid.
ErrorShipmentNotFound | 404 | Shipment with specified ID was not found.
ErrorAvailabilityUnavailable | 503 | Availability service temporarily unavailable.
UnprocessableEntity | 422 | The given payload has unprocessable data.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Requests & Responses

### Standard Shipping Availability

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipments/get-availability' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "shipment_id": "shipment-12345"
  }'
```

**Response (DeliveryAvailabilitySchema):**
```json
{
  "shipment_id": "shipment-12345",
  "fulfillment_type": {
    "id": "SHIP_TO_ADDRESS",
    "name": "Ship to Address",
    "description": "Standard shipping to your address"
  },
  "available_dates": [
    {
      "date": "2024-03-12",
      "description": "Standard delivery",
      "time_slots": [
        {
          "slot_id": "morning",
          "start_time": "09:00",
          "end_time": "12:00",
          "description": "Morning delivery",
          "available": true
        },
        {
          "slot_id": "afternoon",
          "start_time": "13:00",
          "end_time": "17:00",
          "description": "Afternoon delivery",
          "available": true
        }
      ]
    },
    {
      "date": "2024-03-13",
      "description": "Standard delivery",
      "time_slots": [
        {
          "slot_id": "morning",
          "start_time": "09:00",
          "end_time": "12:00",
          "description": "Morning delivery",
          "available": false
        },
        {
          "slot_id": "afternoon",
          "start_time": "13:00",
          "end_time": "17:00",
          "description": "Afternoon delivery",
          "available": true
        }
      ]
    }
  ]
}
```

### Scheduled Delivery Availability

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipments/get-availability' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "shipment_id": "furniture-shipment-001"
  }'
```

**Response (ScheduledDeliveryAvailabilitySchema):**
```json
{
  "fulfillment_type": {
    "id": "SCHEDULED_DELIVERY",
    "name": "Scheduled Delivery",
    "description": "Choose a delivery date and time"
  },
  "available_dates": [
    {
      "date": "2024-03-15",
      "description": "Premium delivery available",
      "time_slots": [
        {
          "slot_id": "morning-premium",
          "start_time": "08:00",
          "end_time": "12:00",
          "description": "Morning premium delivery",
          "available": true
        },
        {
          "slot_id": "afternoon-premium",
          "start_time": "13:00",
          "end_time": "17:00",
          "description": "Afternoon premium delivery",
          "available": true
        }
      ]
    },
    {
      "date": "2024-03-16",
      "description": "Standard scheduled delivery",
      "time_slots": [
        {
          "slot_id": "morning-standard",
          "start_time": "09:00",
          "end_time": "13:00",
          "description": "Morning standard delivery",
          "available": true
        },
        {
          "slot_id": "afternoon-standard",
          "start_time": "14:00",
          "end_time": "18:00",
          "description": "Afternoon standard delivery",
          "available": false
        }
      ]
    }
  ],
  "delivery_windows": [
    {
      "window_id": "premium-week",
      "name": "Premium Delivery Window",
      "description": "White glove delivery with setup",
      "price": {
        "currency": "USD",
        "value": 199.99,
        "number": 19999,
        "symbol": "$"
      },
      "date_range": {
        "start_date": "2024-03-15",
        "end_date": "2024-03-22"
      }
    },
    {
      "window_id": "standard-week",
      "name": "Standard Delivery Window",
      "description": "Standard scheduled delivery",
      "price": {
        "currency": "USD",
        "value": 75.00,
        "number": 7500,
        "symbol": "$"
      },
      "date_range": {
        "start_date": "2024-03-16",
        "end_date": "2024-03-23"
      }
    }
  ]
}
```

### Store Pickup Availability

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipments/get-availability' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "shipment_id": "pickup-shipment-001"
  }'
```

**Response (PickupAvailabilitySchema):**
```json
{
  "shipment_id": "pickup-shipment-001",
  "fulfillment_type": {
    "id": "PICKUP_IN_STORE",
    "name": "Store Pickup",
    "description": "Pick up your items at a nearby store"
  },
  "pickup_locations": [
    {
      "location_id": "store-downtown-001",
      "name": "Downtown Store",
      "address": {
        "address1": "123 Main Street",
        "city": "Anytown",
        "state_or_province": "CA",
        "postal_code": "12345",
        "country": "US"
      },
      "phone": "555-123-4567",
      "operating_hours": [
        {
          "day": "monday",
          "hours": "9:00 AM - 9:00 PM"
        },
        {
          "day": "tuesday",
          "hours": "9:00 AM - 9:00 PM"
        },
        {
          "day": "wednesday",
          "hours": "9:00 AM - 9:00 PM"
        },
        {
          "day": "thursday",
          "hours": "9:00 AM - 9:00 PM"
        },
        {
          "day": "friday",
          "hours": "9:00 AM - 10:00 PM"
        },
        {
          "day": "saturday",
          "hours": "9:00 AM - 10:00 PM"
        },
        {
          "day": "sunday",
          "hours": "10:00 AM - 8:00 PM"
        }
      ],
      "distance": {
        "value": 2.5,
        "unit": "miles"
      },
      "pickup_options": [
        {
          "date": "2024-03-12",
          "time_slots": [
            {
              "slot_id": "morning",
              "start_time": "09:00",
              "end_time": "12:00",
              "description": "Morning pickup",
              "available": true
            },
            {
              "slot_id": "afternoon",
              "start_time": "13:00",
              "end_time": "17:00",
              "description": "Afternoon pickup",
              "available": true
            },
            {
              "slot_id": "evening",
              "start_time": "18:00",
              "end_time": "21:00",
              "description": "Evening pickup",
              "available": true
            }
          ]
        },
        {
          "date": "2024-03-13",
          "time_slots": [
            {
              "slot_id": "morning",
              "start_time": "09:00",
              "end_time": "12:00",
              "description": "Morning pickup",
              "available": false
            },
            {
              "slot_id": "afternoon",
              "start_time": "13:00",
              "end_time": "17:00",
              "description": "Afternoon pickup",
              "available": true
            }
          ]
        }
      ]
    },
    {
      "location_id": "store-mall-002",
      "name": "Mall Location",
      "address": {
        "address1": "456 Shopping Center Dr",
        "city": "Anytown",
        "state_or_province": "CA",
        "postal_code": "12346",
        "country": "US"
      },
      "phone": "555-987-6543",
      "operating_hours": [
        {
          "day": "monday",
          "hours": "10:00 AM - 9:00 PM"
        },
        {
          "day": "tuesday",
          "hours": "10:00 AM - 9:00 PM"
        },
        {
          "day": "wednesday",
          "hours": "10:00 AM - 9:00 PM"
        },
        {
          "day": "thursday",
          "hours": "10:00 AM - 9:00 PM"
        },
        {
          "day": "friday",
          "hours": "10:00 AM - 10:00 PM"
        },
        {
          "day": "saturday",
          "hours": "10:00 AM - 10:00 PM"
        },
        {
          "day": "sunday",
          "hours": "11:00 AM - 7:00 PM"
        }
      ],
      "distance": {
        "value": 5.2,
        "unit": "miles"
      },
      "pickup_options": [
        {
          "date": "2024-03-12",
          "time_slots": [
            {
              "slot_id": "afternoon",
              "start_time": "14:00",
              "end_time": "18:00",
              "description": "Afternoon pickup",
              "available": true
            },
            {
              "slot_id": "evening",
              "start_time": "19:00",
              "end_time": "21:00",
              "description": "Evening pickup",
              "available": true
            }
          ]
        }
      ]
    }
  ],
  "pickup_options": [
    {
      "option_id": "curbside",
      "name": "Curbside Pickup",
      "description": "We'll bring your order to your car",
      "additional_instructions": "Call when you arrive and we'll bring your items out"
    },
    {
      "option_id": "in-store",
      "name": "In-Store Pickup",
      "description": "Pick up inside the store",
      "additional_instructions": "Visit the customer service counter with your order confirmation"
    }
  ]
}
```

## Availability Data Structure

### Time Slots
All time slots include:
- `slot_id`: Unique identifier for the time slot
- `start_time` & `end_time`: Time range in 24-hour format
- `description`: Human-readable description
- `available`: Boolean indicating slot availability

### Location Data
Pickup locations include:
- `location_id`: Unique store identifier
- `name`: Store display name
- `address`: Complete address information
- `phone`: Store contact number
- `operating_hours`: Store hours by day of week
- `distance`: Distance from customer (if available)

### Delivery Windows
Scheduled delivery windows include:
- `window_id`: Unique window identifier
- `name` & `description`: Window details
- `price`: Additional cost for the window
- `date_range`: Available date range for the window

## Usage Patterns

### Standard Shipping Flow
1. Call this endpoint to get available delivery dates
2. Customer selects preferred date and time slot
3. Use selected values in subsequent checkout steps

### Scheduled Delivery Flow
1. Get availability to see delivery windows and dates
2. Customer chooses delivery window and specific date
3. Set shipping method with selected date
4. Optionally select specific time slot

### Pickup Flow
1. Get availability to see nearby store locations
2. Customer selects preferred store and pickup time
3. Use [Set Fulfillment Type](/firmly-api/firmly-cart-api-v2/set-fulfillment-type/) with `location_id`
4. Proceed with pickup method selection

## Next Steps

After getting availability:

1. **For Standard Shipping**: Use date/time data for customer selection UI
2. **For Scheduled Delivery**: Present delivery windows and let customer choose
3. **For Pickup**: Show store locations and let customer select preferred location
 


---


# Set Fulfillment Type
Changes the fulfillment method for a specific shipment. This V2-exclusive endpoint enables switching between standard shipping, scheduled delivery, and in-store pickup options.

## HTTP Request
`POST /api/v2/domains/{{merchant-domain}}/cart/shipments/fulfillment-type`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. example.com).

## Request Body
Content-type: application/json

```javascript
{
  "shipment_id": "string",                    // Required: Target shipment identifier
  "fulfillment_type": "enum",                 // Required: New fulfillment method
  "location_id": "string"                     // Optional: Required for PICKUP_IN_STORE
}
```

### Fulfillment Type Values

The `fulfillment_type` field accepts these enum values from `ShipmentFulfillmentType`:

| Value | Description | Location Required |
|-------|-------------|-------------------|
| `SHIP_TO_ADDRESS` | Standard shipping to customer address | No |
| `SCHEDULED_DELIVERY` | Date/time-specific delivery | No |
| `PICKUP_IN_STORE` | Customer pickup at store location | Yes |

## Response Format
Content-type: application/json

Returns a firmly [`ShoppingCartV2`](/firmly-api/firmly-cart-api-v2/schema/#shoppingcartv2) with updated shipment fulfillment type.

### Behavior Changes:
- **Clears Previous Selections**: Date/time/location selections are reset
- **Updates Options**: Available shipping methods refresh based on new type
- **Pricing Recalculation**: Shipping costs update for new fulfillment method
- **Validation**: Ensures fulfillment type is available for shipment items

## Expected Errors

Normalized Identifier | Error Code | Description
--------- | ------- | -----------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | JWT token is invalid.
ErrorInvalidInputBody | 400 | Request body validation failed.
InvalidJWTToken | 401 | The JWT token is invalid.
ErrorShipmentNotFound | 404 | Shipment with specified ID was not found.
ErrorInvalidFulfillmentType | 400 | Invalid fulfillment type provided.
ErrorLocationNotFound | 404 | Location ID not found (for pickup).
UnprocessableEntity | 422 | The given payload has unprocessable data.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Requests & Responses

### Switch to Standard Shipping

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipments/fulfillment-type' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "shipment_id": "shipment-12345",
    "fulfillment_type": "SHIP_TO_ADDRESS"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-12345",
      "sku": "WIDGET-001",
      "description": "Premium Widget",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 49.99,
        "number": 4999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "shipment-12345",
      "line_item_ids": ["item-12345"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "fulfillment_type_options": [
        {
          "id": "SHIP_TO_ADDRESS",
          "name": "Ship to Address",
          "description": "Standard shipping to your address"
        },
        {
          "id": "SCHEDULED_DELIVERY",
          "name": "Scheduled Delivery",
          "description": "Choose a delivery date and time"
        }
      ],
      "shipping_method_options": [
        {
          "id": "STANDARD_GROUND",
          "description": "Standard Ground",
          "price": {
            "currency": "USD",
            "value": 9.99,
            "number": 999,
            "symbol": "$"
          },
          "estimated_delivery": "5-7 business days"
        },
        {
          "id": "EXPEDITED_2DAY",
          "description": "2-Day Express",
          "price": {
            "currency": "USD",
            "value": 19.99,
            "number": 1999,
            "symbol": "$"
          },
          "estimated_delivery": "2 business days"
        }
      ],
      "shipping_method": null,
      "notes": ""
    }
  ],
  "sub_total": {
    "currency": "USD",
    "value": 99.98,
    "number": 9998,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 99.98,
    "number": 9998,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Switch to Scheduled Delivery

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipments/fulfillment-type' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "shipment_id": "furniture-shipment-001",
    "fulfillment_type": "SCHEDULED_DELIVERY"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "furniture-item-1",
      "sku": "SOFA-BLUE-LG",
      "description": "Blue 3-Seat Sofa",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 1299.99,
        "number": 129999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "furniture-shipment-001",
      "line_item_ids": ["furniture-item-1"],
      "fulfillment_type": {
        "id": "SCHEDULED_DELIVERY",
        "name": "Scheduled Delivery",
        "description": "Choose a delivery date and time"
      },
      "fulfillment_type_options": [
        {
          "id": "SHIP_TO_ADDRESS",
          "name": "Ship to Address",
          "description": "Standard shipping to your address"
        },
        {
          "id": "SCHEDULED_DELIVERY",
          "name": "Scheduled Delivery",
          "description": "Choose a delivery date and time"
        }
      ],
      "shipping_method_options": [
        {
          "id": "PREMIUM_SCHEDULED",
          "description": "Premium Delivery",
          "price": {
            "currency": "USD",
            "value": 150,
            "number": 15000,
            "symbol": "$"
          },
          "estimated_delivery": "Premium scheduled delivery"
        },
        {
          "id": "STANDARD_SCHEDULED",
          "description": "Standard Scheduled Delivery",
          "price": {
            "currency": "USD",
            "value": 75,
            "number": 7500,
            "symbol": "$"
          },
          "estimated_delivery": "Standard scheduled delivery"
        }
      ],
      "shipping_method": null,
      "selected_date": null,
      "selected_time_slot": null,
      "notes": ""
    }
  ],
  "sub_total": {
    "currency": "USD",
    "value": 1299.99,
    "number": 129999,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 104.00,
    "number": 10400,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 1403.99,
    "number": 140399,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Switch to Store Pickup

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipments/fulfillment-type' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "shipment_id": "pickup-shipment-001",
    "fulfillment_type": "PICKUP_IN_STORE",
    "location_id": "store-downtown-001"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "small-item-1",
      "sku": "ACCESSORY-001",
      "description": "Decorative Pillow",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 29.99,
        "number": 2999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "pickup-shipment-001",
      "line_item_ids": ["small-item-1"],
      "fulfillment_type": {
        "id": "PICKUP_IN_STORE",
        "name": "Store Pickup",
        "description": "Pick up your items at a nearby store"
      },
      "fulfillment_type_options": [
        {
          "id": "SHIP_TO_ADDRESS",
          "name": "Ship to Address",
          "description": "Standard shipping to your address"
        },
        {
          "id": "PICKUP_IN_STORE",
          "name": "Store Pickup",
          "description": "Pick up your items at a nearby store"
        }
      ],
      "selected_location": {
        "location_id": "store-downtown-001",
        "name": "Downtown Store",
        "address": {
          "address1": "123 Main Street",
          "city": "Anytown",
          "state_or_province": "CA",
          "postal_code": "12345",
          "country": "US"
        },
        "phone": "555-123-4567",
        "operating_hours": [
          {
            "day": "monday",
            "hours": "9:00 AM - 9:00 PM"
          },
          {
            "day": "tuesday", 
            "hours": "9:00 AM - 9:00 PM"
          },
          {
            "day": "wednesday",
            "hours": "9:00 AM - 9:00 PM"
          },
          {
            "day": "thursday",
            "hours": "9:00 AM - 9:00 PM"
          },
          {
            "day": "friday",
            "hours": "9:00 AM - 10:00 PM"
          },
          {
            "day": "saturday",
            "hours": "9:00 AM - 10:00 PM"
          },
          {
            "day": "sunday",
            "hours": "10:00 AM - 8:00 PM"
          }
        ]
      },
      "shipping_method": null,
      "notes": ""
    }
  ],
  "sub_total": {
    "currency": "USD",
    "value": 59.98,
    "number": 5998,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 4.80,
    "number": 480,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 64.78,
    "number": 6478,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

## State Changes

When fulfillment type changes, the following shipment fields are reset:

### From Any Type → SHIP_TO_ADDRESS
- `selected_location` → `null`
- `selected_date` → `null`
- `selected_time_slot` → `null`
- `shipping_method_options` → Standard shipping methods

### From Any Type → SCHEDULED_DELIVERY
- `selected_location` → `null`
- `selected_date` → `null`
- `selected_time_slot` → `null`
- `shipping_method_options` → Scheduled delivery methods

### From Any Type → PICKUP_IN_STORE
- `selected_date` → `null`
- `selected_time_slot` → `null`
- `selected_location` → Set if `location_id` provided
- `shipping_method_options` → Pickup-specific options

## Next Steps

After setting fulfillment type, you typically need to:

1. **For SHIP_TO_ADDRESS**: [Set shipping method](/firmly-api/firmly-cart-api-v2/set-shipping-method/)
2. **For SCHEDULED_DELIVERY**: [Get availability](/firmly-api/firmly-cart-api-v2/get-availability/) then set date/time
3. **For PICKUP_IN_STORE**: [Get availability](/firmly-api/firmly-cart-api-v2/get-availability/) for pickup locations
 


---


# Set Shipping Method
Selects a shipping method for a specific shipment. This endpoint applies to all fulfillment types and triggers cost recalculation for the entire cart.

## HTTP Request
`POST /api/v2/domains/{{merchant-domain}}/cart/shipment/methods`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. example.com).

## Request Body
Content-type: application/json

```javascript
{
  "shipment_id": "string",                    // Required: Target shipment identifier
  "shipping_method_id": "string",             // Required: Selected method from available options
  "notes": "string",                          // Optional: Special delivery instructions
  "selected_date": "string"                   // Optional: For scheduled delivery (YYYY-MM-DD format)
}
```

### Shipping Method Types

The `shipping_method_id` must match one of the IDs from the shipment's `shipping_method_options` array. Method types are dynamic and vary by:

- **Fulfillment Type**: Different options for standard shipping vs scheduled delivery vs pickup
- **Merchant Configuration**: Each merchant defines their available shipping methods
- **Item Requirements**: Some items may limit available shipping options
- **Geographic Location**: Methods vary by shipping destination

Common method patterns include:
- Standard shipping: `STANDARD_GROUND`, `EXPEDITED_2DAY`, `OVERNIGHT`
- Scheduled delivery: `PREMIUM_SCHEDULED`, `STANDARD_SCHEDULED`, `WHITE_GLOVE`
- Pickup methods: `CURBSIDE_PICKUP`, `IN_STORE_PICKUP`

## Response Format
Content-type: application/json

Returns a firmly [`ShoppingCartV2`](/firmly-api/firmly-cart-api-v2/schema/#shoppingcartv2) with updated shipping method and recalculated totals.

### Behavior Changes:
- **Method Selection**: Updates `shipping_method` field for target shipment
- **Cost Recalculation**: Updates `shipping_total` and `total` for entire cart
- **Date Validation**: For scheduled delivery, validates `selected_date` against availability
- **Notes Storage**: Stores delivery instructions for fulfillment

## Expected Errors

Normalized Identifier | Error Code | Description
--------- | ------- | -----------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | JWT token is invalid.
ErrorInvalidInputBody | 400 | Request body validation failed.
InvalidJWTToken | 401 | The JWT token is invalid.
ErrorShipmentNotFound | 404 | Shipment with specified ID was not found.
ErrorInvalidShippingMethod | 400 | Shipping method ID not found in available options.
ErrorInvalidDate | 400 | Selected date is invalid or unavailable.
UnprocessableEntity | 422 | The given payload has unprocessable data.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Requests & Responses

### Standard Shipping Method

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipment/methods' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "shipment_id": "shipment-12345",
    "shipping_method_id": "EXPEDITED_2DAY",
    "notes": "Please leave at front door if no answer"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "item-12345",
      "sku": "WIDGET-001",
      "description": "Premium Widget",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 49.99,
        "number": 4999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "shipment-12345",
      "line_item_ids": ["item-12345"],
      "fulfillment_type": {
        "id": "SHIP_TO_ADDRESS",
        "name": "Ship to Address",
        "description": "Standard shipping to your address"
      },
      "shipping_method_options": [
        {
          "id": "STANDARD_GROUND",
          "description": "Standard Ground",
          "price": {
            "currency": "USD",
            "value": 9.99,
            "number": 999,
            "symbol": "$"
          },
          "estimated_delivery": "5-7 business days"
        },
        {
          "id": "EXPEDITED_2DAY",
          "description": "2-Day Express",
          "price": {
            "currency": "USD",
            "value": 19.99,
            "number": 1999,
            "symbol": "$"
          },
          "estimated_delivery": "2 business days"
        }
      ],
      "shipping_method": {
        "id": "EXPEDITED_2DAY",
        "description": "2-Day Express",
        "price": {
          "currency": "USD",
          "value": 19.99,
          "number": 1999,
          "symbol": "$"
        },
        "estimated_delivery": "2 business days"
      },
      "notes": "Please leave at front door if no answer"
    }
  ],
  "sub_total": {
    "currency": "USD",
    "value": 99.98,
    "number": 9998,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 19.99,
    "number": 1999,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 9.60,
    "number": 960,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 129.57,
    "number": 12957,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Scheduled Delivery with Date

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipment/methods' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "shipment_id": "furniture-shipment-001",
    "shipping_method_id": "WHITE_GLOVE_DELIVERY",
    "selected_date": "2024-03-15",
    "notes": "Please call 30 minutes before delivery"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "furniture-item-1",
      "sku": "SOFA-BLUE-LG",
      "description": "Blue 3-Seat Sofa",
      "quantity": 1,
      "price": {
        "currency": "USD",
        "value": 1299.99,
        "number": 129999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "furniture-shipment-001",
      "line_item_ids": ["furniture-item-1"],
      "fulfillment_type": {
        "id": "SCHEDULED_DELIVERY",
        "name": "Scheduled Delivery",
        "description": "Choose a delivery date and time"
      },
      "shipping_method_options": [
        {
          "id": "STANDARD_SCHEDULED",
          "description": "Standard Scheduled Delivery",
          "price": {
            "currency": "USD",
            "value": 75,
            "number": 7500,
            "symbol": "$"
          },
          "estimated_delivery": "Standard scheduled delivery"
        },
        {
          "id": "WHITE_GLOVE_DELIVERY",
          "description": "White Glove Delivery & Setup",
          "price": {
            "currency": "USD",
            "value": 199.99,
            "number": 19999,
            "symbol": "$"
          },
          "estimated_delivery": "Premium delivery with setup"
        }
      ],
      "shipping_method": {
        "id": "WHITE_GLOVE_DELIVERY",
        "description": "White Glove Delivery & Setup",
        "price": {
          "currency": "USD",
          "value": 199.99,
          "number": 19999,
          "symbol": "$"
        },
        "estimated_delivery": "Premium delivery with setup"
      },
      "selected_date": "2024-03-15",
      "selected_time_slot": null,
      "notes": "Please call 30 minutes before delivery"
    }
  ],
  "sub_total": {
    "currency": "USD",
    "value": 1299.99,
    "number": 129999,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 199.99,
    "number": 19999,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 120.00,
    "number": 12000,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 1619.98,
    "number": 161998,
    "symbol": "$"
  },
  "addons": {
    "offers": [],
    "selections": []
  },
  "addon_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

### Pickup Method Selection

**Request:**
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v2/domains/example.com/cart/shipment/methods' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data '{
    "shipment_id": "pickup-shipment-001",
    "shipping_method_id": "CURBSIDE_PICKUP",
    "notes": "Blue Honda Civic, license plate ABC123"
  }'
```

**Response:**
```json
{
  "line_items": [
    {
      "line_item_id": "small-item-1",
      "sku": "ACCESSORY-001",
      "description": "Decorative Pillow",
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 29.99,
        "number": 2999,
        "symbol": "$"
      }
    }
  ],
  "shipments": [
    {
      "shipment_id": "pickup-shipment-001",
      "line_item_ids": ["small-item-1"],
      "fulfillment_type": {
        "id": "PICKUP_IN_STORE",
        "name": "Store Pickup",
        "description": "Pick up your items at a nearby store"
      },
      "selected_location": {
        "location_id": "store-downtown-001",
        "name": "Downtown Store",
        "address": {
          "address1": "123 Main Street",
          "city": "Anytown",
          "state_or_province": "CA",
          "postal_code": "12345",
          "country": "US"
        },
        "phone": "555-123-4567"
      },
      "shipping_method_options": [
        {
          "id": "IN_STORE_PICKUP",
          "description": "In-Store Pickup",
          "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
          },
          "estimated_delivery": "Available immediately"
        },
        {
          "id": "CURBSIDE_PICKUP",
          "description": "Curbside Pickup",
          "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
          },
          "estimated_delivery": "Available immediately"
        }
      ],
      "shipping_method": {
        "id": "CURBSIDE_PICKUP",
        "description": "Curbside Pickup",
        "price": {
          "currency": "USD",
          "value": 0,
          "number": 0,
          "symbol": "$"
        },
        "estimated_delivery": "Available immediately"
      },
      "notes": "Blue Honda Civic, license plate ABC123"
    }
  ],
  "sub_total": {
    "currency": "USD",
    "value": 59.98,
    "number": 5998,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "tax_total": {
    "currency": "USD",
    "value": 4.80,
    "number": 480,
    "symbol": "$"
  },
  "total": {
    "currency": "USD",
    "value": 64.78,
    "number": 6478,
    "symbol": "$"
  },
  "schema_version": "2.0"
}
```

## Method Selection Process

To select a shipping method:

1. **Get Available Options**: Use [Get Cart](/firmly-api/firmly-cart-api-v2/get-cart/) to see `shipping_method_options`
2. **Choose Method**: Select an `id` from the available options
3. **Set Method**: Call this endpoint with the selected `shipping_method_id`
4. **Verify Selection**: Check response for updated `shipping_method` and totals

## Next Steps

After setting a shipping method:

1. **For Standard Shipping**: Proceed to [Set Shipping Info](/firmly-api/firmly-cart-api-v2/set-shipping-info/)
2. **For Scheduled Delivery**: May need to [Get Availability](/firmly-api/firmly-cart-api-v2/get-availability/) for time slots
3. **For Pickup**: Proceed to checkout with selected location and method
 


---

# Shipment Configuration


  <h1 id="shipment-configuration-apis">Shipment Configuration APIs</h1><p>The following APIs are used for configuring shipment fulfillment and shipping:</p>
<ul>
<li><a href=/firmly-api/firmly-cart-api-v2/shipment-configuration/set-fulfillment-type/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Set Fulfillment Type</span></a></li>
<li><a href=/firmly-api/firmly-cart-api-v2/shipment-configuration/set-shipping-method/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Set Shipping Method</span></a></li>
<li><a href=/firmly-api/firmly-cart-api-v2/shipment-configuration/get-availability/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get Availability</span></a></li>
</ul>


- [Set Fulfillment Type](/firmly-api/firmly-cart-api-v2/shipment-configuration/set-fulfillment-type/index.md)
- [Set Shipping Method](/firmly-api/firmly-cart-api-v2/shipment-configuration/set-shipping-method/index.md)
- [Get Availability](/firmly-api/firmly-cart-api-v2/shipment-configuration/get-availability/index.md)


---

# firmly Cart API v2 Reference


  <h1 id="firmly-cart-api-v2">firmly Cart API v2</h1><p>The V2 Cart API introduces <strong>multi-shipment support</strong>, allowing items to be grouped into separate shipments with different fulfillment types (standard shipping, scheduled delivery, in-store pickup).</p>
<h2 id="key-v2-features">
    <span class="DocsMarkdown--header-anchor-positioner">
      <a class="DocsMarkdown--header-anchor Link Link-without-underline" href="#key-v2-features">&#8203;​</a>
    </span>
    <span>Key V2 Features</span>
  </h2><ul>
<li><strong>Multi-shipment carts</strong>: Items can be split across multiple shipments</li>
<li><strong>Flexible fulfillment</strong>: Standard shipping, scheduled delivery, and pickup options</li>
<li><strong>Enhanced addon system</strong>: Flexible addon services with cart, group, and item scopes</li>
<li><strong>Enhanced scheduling</strong>: Date and time slot selection for deliveries</li>
<li><strong>Backward compatibility</strong>: Supports existing V1 integrations</li>
</ul>
<h2 id="api-groups">
    <span class="DocsMarkdown--header-anchor-positioner">
      <a class="DocsMarkdown--header-anchor Link Link-without-underline" href="#api-groups">&#8203;​</a>
    </span>
    <span>API Groups</span>
  </h2><ul>
<li><a href=/firmly-api/firmly-cart-api-v2/cart-management/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Cart Management</span></a> - Basic cart operations (get, add, update, clear)</li>
<li><a href=/firmly-api/firmly-cart-api-v2/shipment-configuration/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Shipment Configuration</span></a> - Fulfillment and shipping setup</li>
<li><a href=/firmly-api/firmly-cart-api-v2/addon-management/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Addon Management</span></a> - Addon services and selections</li>
<li><a href=/firmly-api/firmly-cart-api-v2/checkout/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Checkout</span></a> - Customer address and billing information</li>
<li><a href=/firmly-api/firmly-cart-api-v2/promotions/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Promotions</span></a> - Promotional codes and discounts</li>
<li><a href=/firmly-api/firmly-cart-api-v2/advanced-features/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Advanced Features</span></a> - Shipment manipulation</li>
</ul>
<h2 id="additional-resources">
    <span class="DocsMarkdown--header-anchor-positioner">
      <a class="DocsMarkdown--header-anchor Link Link-without-underline" href="#additional-resources">&#8203;​</a>
    </span>
    <span>Additional Resources</span>
  </h2><ul>
<li><a href=/firmly-api/firmly-cart-api-v2/overview/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">V2 Overview &amp; Migration</span></a> - Migration guide from V1</li>
<li><a href=/firmly-api/firmly-cart-api-v2/schema/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Schema Reference</span></a> - Complete data structure reference</li>
</ul>
<hr>
<p><strong>Migration from V1</strong>: Looking to upgrade from Cart API v1? Check out our <a href=/firmly-api/firmly-cart-api-v2/overview/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">migration guide</span></a> for step-by-step instructions.</p>


- [Cart API v2 Overview & Migration](/firmly-api/firmly-cart-api-v2/overview/index.md)
- [Cart API v2 Schema Reference](/firmly-api/firmly-cart-api-v2/schema/index.md)
- [Cart Management](/firmly-api/firmly-cart-api-v2/cart-management/index.md)
- [Shipment Configuration](/firmly-api/firmly-cart-api-v2/shipment-configuration/index.md)
- [Addon Management](/firmly-api/firmly-cart-api-v2/addon-management/index.md)
- [Checkout](/firmly-api/firmly-cart-api-v2/checkout/index.md)
- [Promotions](/firmly-api/firmly-cart-api-v2/promotions/index.md)
- [Advanced Features](/firmly-api/firmly-cart-api-v2/advanced-features/index.md)


---

# firmly Cart API Reference


  <h1 id="firmly-cart-apis">firmly Cart APIs</h1><p>The following APIs are used to update the Cart:</p>
<ul>
<li><a href=/firmly-api/firmly-cart-api/get-cart/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get Cart</span></a></li>
<li><a href=/firmly-api/firmly-cart-api/add-item-to-cart/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Add Item to Cart</span></a></li>
<li><a href=/firmly-api/firmly-cart-api/update-item-in-cart/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Update Item in Cart</span></a></li>
<li><a href=/firmly-api/firmly-cart-api/clear-cart/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Clear Cart</span></a></li>
<li><a href=/firmly-api/firmly-cart-api/set-cart-attribution/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Set Cart Attribution</span></a></li>
</ul>


- [Add Item to Cart](/firmly-api/firmly-cart-api/add-item-to-cart/index.md)
- [Update Item in Cart](/firmly-api/firmly-cart-api/update-item-in-cart/index.md)
- [Get Cart](/firmly-api/firmly-cart-api/get-cart/index.md)
- [Clear Cart](/firmly-api/firmly-cart-api/clear-cart/index.md)
- [Set Cart Attribution](/firmly-api/firmly-cart-api/set-cart-attribution/index.md)


---

# Get a Product from Merchant
For a given domain and product handle, the following API will return the product information. Use this to produce a product card with price, variant, and inventory information.


## HTTP Request

`GET /api/v1/domains-products/{merchant-domain}/{product-handle}?postal_code={postal_code}`

- `merchant-domain` (string, required): The domain of the merchant website (e.g. `mystore.com`).
- `product-handle` (string, required): The product handle or identifier.
- `postal_code` (string, optional): The postal code to localize pricing, inventory, or availability.

## Authentication

This API requires either an [`Application Identifier Authorization`](/firmly-api/getting-started/authentication-overview/) or a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters
Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session (Device Authorization).

## Path Parameters

| Parameter        | Required | Description                                      |
|------------------|----------|--------------------------------------------------|
| merchant-domain  | Yes      | Domain of the merchant website (e.g. mystore.com) |
| product-handle   | Yes      | Product handle or identifier                      |

## Query Parameters

| Parameter    | Required | Description                                                                 |
|--------------|----------|-----------------------------------------------------------------------------|
| postal_code  | No       | Postal code to localize price, inventory, or availability (if supported).   |

## Response Format
`Content-type: application/json` 

Returns a firmly [`Product Details`](/firmly-api/schema/schema/#product-details).

## Expected Errors
Normalized Identifier | Error Code | Description 
--------- | ------- | -----------
ProductNotImplemented | 404 | Product not implemented.

## Sample Request
```bash
curl \
  --location \
  --request GET 'https://api.firmly.work/api/v1/domains-products/{{merchant-domain}}/{{product-handle}}'
  --header 'x-firmly-authorization:  eyXYbGciOiJSUzI1NiIsImtpZCI6ImY1NGMzYjc4ZDc0NjQ2MzQ4NWIzMjM2MjUzOWYyMWYwIn0.eyJkZXZpY2VpZCI6ImRlNWNmMGVjLTQ2OTMtNDQ4Zi05OTZkLTUwYWU2NGY0YjU2MSIsImFwcGlkIjoiYjUzZmQ1Y2YtMzQ1Zi00NzFmLWJjYTUtNmMzNzY1YzE5MTdlIiwic3ViIjoiRGV2ZWxvcGVyIiwiZW52IjoiZGV2IiwiaXNzIjoiaWRlbnRpdHkiLCJzYXZlVGhhbmtZb3VQYWdlQ29udGVudCI6dHJ1ZSwiaWF0IjoxNzM5OTkwNDg0LCJleHAiOjE3NDI1ODI0ODR9.Yb5H35yEV8cFteg26jVWWRuLWG4Pdzmi6YpDXiIeKWH4CGzegWJzEPfgxPKqll6SkkVkvyYm_vG2qjJHz6h0Xryt2YjNKVTtfLTvuYzTMuyBo2dD57RGCDY6GqovE6iAriD-1Lp4e-7QGiI-8K8FHOHZzMozoiYa6msSRwkWGS6NI8lX_SkZGjMh2_K4IS5VmHCQ88im7AZ0yIBF2hhyYr8q6Ck8dPYr2LkraVJuGF-JgjY1E66qshzdaRAr2cLt4aYZyhhYnUKCgELr0djOK2H7tRDjE3cQYDleok42P-2rVrEcM4PeFHelxMirsKN5Un865PkJ6pJQIk8O7_5mLA'
```

## Sample Response

```json
{
    "base_sku": "DRX123",
    "title": "BUTTON UP SLEEP SHIRT",
    "handle": "/Button-Up-Sleepshirt,1234",
    "description": "Casual sleepshirt in a classic striped design.",
    "product_type": "Fashion",
    "images": [
        {
            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
            "type": "default"
        },
        {
            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
            "alt": "front view",
            "type": "small"
        },
        {
            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
            "alt": "Alternate Product Image",
            "type": "large"
        },
        {
            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=zoomAllowUpscale",
            "alt": "Product Image",
            "type": "large"
        },
        {
            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=thumb",
            "alt": "Thumbnail Product Image",
            "type": "preview"
        }
    ],
    "properties": {},
    "variant_option_values": [
        {
            "display_name": "Colors",
            "property_accessor": "Colors",
            "position": 0,
            "option_values": [
                {
                    "display_name": "BLUE & WHITE(BLWH)",
                    "value": "BLWH",
                    "swatch": {
                        "url": "https://www.merchant.com/productimages/color_swatches/X41003-BLST.swa.sm.jpg"
                    },
                    "available": false,
                    "images": [
                        {
                            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                            "type": "default"
                        },
                        {
                            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
                            "alt": "front view",
                            "type": "small"
                        },
                        {
                            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                            "alt": "Alternate Product Image",
                            "type": "large"
                        }
                    ]
                }
            ]
        },
        {
            "display_name": "Sizes",
            "property_accessor": "Sizes",
            "position": 1,
            "option_values": [
                {
                    "display_name": "0/2",
                    "value": "0/2",
                    "available": false
                },
                {
                    "display_name": "4/6",
                    "value": "4/6",
                    "available": false
                },
                {
                    "display_name": "8/10",
                    "value": "8/10",
                    "available": false
                },
                {
                    "display_name": "12/14",
                    "value": "12/14",
                    "available": false
                }
            ]
        }
    ],
    "variants": [
        {
            "handle": "DRX123-0/2-BLWH",
            "sku": "DRX123-0/2-BLWH",
            "title": "BLUE & WHITE(BLWH) 0/2",
            "display_name": "BLUE & WHITE(BLWH) 0/2",
            "add_to_cart_payload" : {
                "variant_id": "DRX123-0/2-BLWH",
                "quantity" : 1
            }
            "price": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "msrp": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "images": [
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "type": "default"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
                    "alt": "front view",
                    "type": "small"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "alt": "Alternate Product Image",
                    "type": "large"
                }
            ],
            "available": true,
            "variant_option_list": [
                "BLWH",
                "0/2"
            ]
        },
        {
            "handle": "DRX123-4/6-BLWH",
            "sku": "DRX123-4/6-BLWH",
            "title": "BLUE & WHITE(BLWH) 4/6",
            "display_name": "BLUE & WHITE(BLWH) 4/6",
            "add_to_cart_payload" : {
                "variant_id": "DRX123-4/6-BLWH",
                "quantity" : 1
            }
            "price": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "msrp": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "images": [
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "type": "default"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
                    "alt": "front view",
                    "type": "small"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "alt": "Alternate Product Image",
                    "type": "large"
                }
            ],
            "available": true,
            "variant_option_list": [
                "BLWH",
                "4/6"
            ]
        },
        {
            "handle": "DRX123-8/10-BLWH",
            "sku": "DRX123-8/10-BLWH",
            "title": "BLUE & WHITE(BLWH) 8/10",
            "display_name": "BLUE & WHITE(BLWH) 8/10",
            "add_to_cart_payload": {
                "variant_id": "DRX123-8/10-BLWH",
                "quantity": 1
            },
            "price": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "msrp": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "images": [
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "type": "default"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
                    "alt": "front view",
                    "type": "small"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "alt": "Alternate Product Image",
                    "type": "large"
                }
            ],
            "available": true,
            "variant_option_list": [
                "BLWH",
                "8/10"
            ]
        },
        {
            "handle": "DRX123-12/14-BLWH",
            "sku": "DRX123-12/14-BLWH",
            "title": "BLUE & WHITE(BLWH) 12/14",
            "display_name": "BLUE & WHITE(BLWH) 12/14",
            "add_to_cart_payload": {
                "variant_id": "DRX123-12/14-BLWH",
                "quantity": 1
            },
            "price": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "msrp": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "images": [
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "type": "default"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
                    "alt": "front view",
                    "type": "small"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "alt": "Alternate Product Image",
                    "type": "large"
                }
            ],
            "available": true,
            "variant_option_list": [
                "BLWH",
                "12/14"
            ]
        }
    ],
    "reviews": {
        "total_reviews": 2,
        "average_rating": 5
    }
}
```




 


---

# Get All Products from Merchant

For a given domain, the following API will return all products with links to each product. You can retrieve more information by calling the returned links.


## HTTP Request

`GET /api/v1/domains-products/{{merchant-domain}}`

## Authentication

This API requires either an [`Application Identifier Authorization`](/firmly-api/getting-started/authentication-overview/) or a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters
Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session (Device Authorization).


## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the merchant website. (e.g. mystore.com).

## Response Format

`Content-Type: application/json`

Returns a firmly [`Product Collection`](/firmly-api/schema/schema/#product-collection).

## Expected Errors
Normalized Identifier | Error Code | Description 
--------- | ------- | -----------
AllProductsNotImplemented | 404 | All products not Implemented.

## Sample Request

```bash
curl \
  --location \
  --request GET 'https://api.firmly.work/api/v1/domains-products/{{merchant-domain}}'
  --header 'x-firmly-authorization:  eyXYbGciOiJSUzI1NiIsImtpZCI6ImY1NGMzYjc4ZDc0NjQ2MzQ4NWIzMjM2MjUzOWYyMWYwIn0.eyJkZXZpY2VpZCI6ImRlNWNmMGVjLTQ2OTMtNDQ4Zi05OTZkLTUwYWU2NGY0YjU2MSIsImFwcGlkIjoiYjUzZmQ1Y2YtMzQ1Zi00NzFmLWJjYTUtNmMzNzY1YzE5MTdlIiwic3ViIjoiRGV2ZWxvcGVyIiwiZW52IjoiZGV2IiwiaXNzIjoiaWRlbnRpdHkiLCJzYXZlVGhhbmtZb3VQYWdlQ29udGVudCI6dHJ1ZSwiaWF0IjoxNzM5OTkwNDg0LCJleHAiOjE3NDI1ODI0ODR9.Yb5H35yEV8cFteg26jVWWRuLWG4Pdzmi6YpDXiIeKWH4CGzegWJzEPfgxPKqll6SkkVkvyYm_vG2qjJHz6h0Xryt2YjNKVTtfLTvuYzTMuyBo2dD57RGCDY6GqovE6iAriD-1Lp4e-7QGiI-8K8FHOHZzMozoiYa6msSRwkWGS6NI8lX_SkZGjMh2_K4IS5VmHCQ88im7AZ0yIBF2hhyYr8q6Ck8dPYr2LkraVJuGF-JgjY1E66qshzdaRAr2cLt4aYZyhhYnUKCgELr0djOK2H7tRDjE3cQYDleok42P-2rVrEcM4PeFHelxMirsKN5Un865PkJ6pJQIk8O7_5mLA'
```

## Sample Response

```json
[
    {
      "loc": "https://api.firmly.work/api/v1/domains-products/merchant.com/abc1289",
      "image": {
        "url": "https://cdn.merchant.com/s/files/1/0493/9834/9974/products/abc1289.png"
      },
      "title": "Brand Firmly Power Bank (PowerCore 24K)",   
      "handle": "abc1289"
    },
    {
      "loc": "https://api.firmly.work/api/v1/domains-products/merchant.com/abc8866",
      "image": {
        "url": "https://cdn.merchant.com/s/files/1/0493/9834/9974/files/abc8866.png"
      },
      "title": "Brand Firmly Cable (3 ft / 6 ft)",
      "handle": "abc8866"
    }
]
```
 


---

# Get Product Info from URL
For a given product detail page (pdp) url, the following api will return the product information, which is same as Get a Product API.


## HTTP Request

`GET /api/v1/domains-pdp?url={{url}}[&postal_code={{postal_code}}]`

## Authentication

This API requires either an [`Application Identifier Authorization`](/firmly-api/getting-started/authentication-overview/) or a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters
Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session (Device Authorization).

## Query Parameters

Parameter    | Default | Required | Description
------------ | ------- | -------- | -----------
url          | -       | Yes      | Pass the full merchant PDP URL. (e.g. https://www.merchant.com/products/hooded-sweatshirt-women-white or https://www.merchant.com/products/hooded-sweatshirt-women-white?cc=value). The URL can be either plain or URL-encoded. If there are query params, encode the URL with percent encoding according to the HTTP standard.
postal_code  | -       | No       | Optionally pass a postal code to customize product information (e.g. for regional pricing, availability, or shipping).

## Response Format
`Content-type: application/json` 

Returns a firmly [`Product Details`](/firmly-api/schema/schema/#product-details).


## Expected Errors

## Sample Request

```bash
curl \
  --location \
  --request GET 'https://api.firmly.work/api/v1/domains-pdp?url={{url}}'
  --header 'x-firmly-authorization:  eyXYbGciOiJSUzI1NiIsImtpZCI6ImY1NGMzYjc4ZDc0NjQ2MzQ4NWIzMjM2MjUzOWYyMWYwIn0.eyJkZXZpY2VpZCI6ImRlNWNmMGVjLTQ2OTMtNDQ4Zi05OTZkLTUwYWU2NGY0YjU2MSIsImFwcGlkIjoiYjUzZmQ1Y2YtMzQ1Zi00NzFmLWJjYTUtNmMzNzY1YzE5MTdlIiwic3ViIjoiRGV2ZWxvcGVyIiwiZW52IjoiZGV2IiwiaXNzIjoiaWRlbnRpdHkiLCJzYXZlVGhhbmtZb3VQYWdlQ29udGVudCI6dHJ1ZSwiaWF0IjoxNzM5OTkwNDg0LCJleHAiOjE3NDI1ODI0ODR9.Yb5H35yEV8cFteg26jVWWRuLWG4Pdzmi6YpDXiIeKWH4CGzegWJzEPfgxPKqll6SkkVkvyYm_vG2qjJHz6h0Xryt2YjNKVTtfLTvuYzTMuyBo2dD57RGCDY6GqovE6iAriD-1Lp4e-7QGiI-8K8FHOHZzMozoiYa6msSRwkWGS6NI8lX_SkZGjMh2_K4IS5VmHCQ88im7AZ0yIBF2hhyYr8q6Ck8dPYr2LkraVJuGF-JgjY1E66qshzdaRAr2cLt4aYZyhhYnUKCgELr0djOK2H7tRDjE3cQYDleok42P-2rVrEcM4PeFHelxMirsKN5Un865PkJ6pJQIk8O7_5mLA'
```

## Sample Response

```json
{
    "base_sku": "DRX123",
    "title": "BUTTON UP SLEEP SHIRT",
    "handle": "/Button-Up-Sleepshirt,1234",
    "description": "Casual sleepshirt in a classic striped design.",
    "product_type": "Fashion",
    "images": [
        {
            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
            "type": "default"
        },
        {
            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
            "alt": "front view",
            "type": "small"
        },
        {
            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
            "alt": "Alternate Product Image",
            "type": "large"
        },
        {
            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=zoomAllowUpscale",
            "alt": "Product Image",
            "type": "large"
        },
        {
            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=thumb",
            "alt": "Thumbnail Product Image",
            "type": "preview"
        }
    ],
    "properties": {},
    "variant_option_values": [
        {
            "display_name": "Colors",
            "property_accessor": "Colors",
            "position": 0,
            "option_values": [
                {
                    "display_name": "BLUE & WHITE(BLWH)",
                    "value": "BLWH",
                    "swatch": {
                        "url": "https://www.merchant.com/productimages/color_swatches/X41003-BLST.swa.sm.jpg"
                    },
                    "available": false,
                    "images": [
                        {
                            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                            "type": "default"
                        },
                        {
                            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
                            "alt": "front view",
                            "type": "small"
                        },
                        {
                            "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                            "alt": "Alternate Product Image",
                            "type": "large"
                        }
                    ]
                }
            ]
        },
        {
            "display_name": "Sizes",
            "property_accessor": "Sizes",
            "position": 1,
            "option_values": [
                {
                    "display_name": "0/2",
                    "value": "0/2",
                    "available": false
                },
                {
                    "display_name": "4/6",
                    "value": "4/6",
                    "available": false
                },
                {
                    "display_name": "8/10",
                    "value": "8/10",
                    "available": false
                },
                {
                    "display_name": "12/14",
                    "value": "12/14",
                    "available": false
                }
            ]
        }
    ],
    "variants": [
        {
            "handle": "DRX123-0/2-BLWH",
            "sku": "DRX123-0/2-BLWH",
            "title": "BLUE & WHITE(BLWH) 0/2",
            "display_name": "BLUE & WHITE(BLWH) 0/2",
            "add_to_cart_payload": {
                "variant_id": "DRX123-0/2-BLWH",
                "quantity": 1
            },
            "price": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "msrp": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "images": [
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "type": "default"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
                    "alt": "front view",
                    "type": "small"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "alt": "Alternate Product Image",
                    "type": "large"
                }
            ],
            "available": true,
            "variant_option_list": [
                "BLWH",
                "0/2"
            ]
        },
        {
            "handle": "DRX123-4/6-BLWH",
            "sku": "DRX123-4/6-BLWH",
            "title": "BLUE & WHITE(BLWH) 4/6",
            "display_name": "BLUE & WHITE(BLWH) 4/6",
            "add_to_cart_payload": {
                "variant_id": "DRX123-4/6-BLWH",
                "quantity": 1
            },
            "price": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "msrp": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "images": [
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "type": "default"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
                    "alt": "front view",
                    "type": "small"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "alt": "Alternate Product Image",
                    "type": "large"
                }
            ],
            "available": true,
            "variant_option_list": [
                "BLWH",
                "4/6"
            ]
        },
        {
            "handle": "DRX123-8/10-BLWH",
            "sku": "DRX123-8/10-BLWH",
            "title": "BLUE & WHITE(BLWH) 8/10",
            "display_name": "BLUE & WHITE(BLWH) 8/10",
            "add_to_cart_payload": {
                "variant_id": "DRX123-8/10-BLWH",
                "quantity": 1
            },
            "price": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "msrp": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "images": [
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "type": "default"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
                    "alt": "front view",
                    "type": "small"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "alt": "Alternate Product Image",
                    "type": "large"
                }
            ],
            "available": true,
            "variant_option_list": [
                "BLWH",
                "8/10"
            ]
        },
        {
            "handle": "DRX123-12/14-BLWH",
            "sku": "DRX123-12/14-BLWH",
            "title": "BLUE & WHITE(BLWH) 12/14",
            "display_name": "BLUE & WHITE(BLWH) 12/14",
            "add_to_cart_payload": {
                "variant_id": "DRX123-12/14-BLWH",
                "quantity": 1
            },
            "price": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "msrp": {
                "currency": "USD",
                "value": 39,
                "number": 3900,
                "symbol": "$"
            },
            "images": [
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "type": "default"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=alternate",
                    "alt": "front view",
                    "type": "small"
                },
                {
                    "url": "https://photo.merchant.com/im/DRX123BLWH.1.jpg?preset=product",
                    "alt": "Alternate Product Image",
                    "type": "large"
                }
            ],
            "available": true,
            "variant_option_list": [
                "BLWH",
                "12/14"
            ]
        }
    ],
    "reviews": {
        "total_reviews": 2,
        "average_rating": 5
    }
}
 


---

# firmly Catalog API Reference


  <h1 id="firmly-catalog-apis">firmly Catalog APIs</h1><p>The following APIs are used to get product information:</p>
<ul>
<li><a href=/firmly-api/firmly-catalog-api/get-a-product/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get a Product from Merchant</span></a></li>
<li><a href=/firmly-api/firmly-catalog-api/get-all-products/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get All Products from Merchant</span></a></li>
<li><a href=/firmly-api/firmly-catalog-api/get-product-info-from-url/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get Product Info from URL</span></a></li>
</ul>


- [Get a Product from Merchant](/firmly-api/firmly-catalog-api/get-a-product/index.md)
- [Get All Products from Merchant](/firmly-api/firmly-catalog-api/get-all-products/index.md)
- [Get Product Info from URL](/firmly-api/firmly-catalog-api/get-product-info-from-url/index.md)


---


# Browser Session

The Browser Session API is an authentication endpoint that offers a convenient alternative to generating an RSA key pair. Unlike traditional authentication methods, browser-session requires only the inclusion of the `x-firmly-authentication` in the header. This streamlined approach simplifies the authentication process, allowing users to authenticate without the need for complex cryptographic operations.

<aside class="notice">
The Browser Session API can be used to renew an existing authentication token. The maximum lapse time to renew an expired token is 1 week.
</aside>


To renew an existing token, do either of the following:

* Send it as the access_token attribute of the payload.
* Send it as a cookie with name fsession_v2.


This API generates an authentication token to create carts and access the checkout APIs.

## HTTP Request

`POST /api/v1/browser-session`

## Authentication

This API requires [`Application Identifier Authorization`](/firmly-api/getting-started/authentication-overview/).


## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-app-id | - | The partner public key provided by firmly. 

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
access_token | - | Existing JWT signed by firmly to be renewed.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
InvalidAppId | 400 | App ID is invalid.
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
MissingAppId | 400 | x-firmly-app-id header is missing or invalid.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

*This `x-firmly-app-id` should be shared by firmly team. Json body is empty:*


```bash
curl 'https://api.firmly.work/api/v1/browser-session' \
  -X 'POST' \
  -H 'x-firmly-app-id: fb8cf4a8-f610-4608-823e-b22049dab6d0'
  ```

## Sample Response

```json
{
	"device_created": true,
	"access_token": "<>",
	"expires_in": 3600,
	"expires": 1688998572,
	"device_id": "82b10522-5483-4719-b599-6d78b12827f0"
}
```

*Example of payload to renew a token:*

```bash
curl 'https://api.firmly.work/api/v1/browser-session' \
  -X 'POST' \
  -H 'x-firmly-app-id: fb8cf4a8-f610-4608-823e-b22049dab6d0'
  -H 'Content-Type: application/json'
  -d '{ "access_token": "<>" }'
```
 


---

# Authentication


  <h1 id="authentication">Authentication</h1><p>This API is used to generate an authentication token to create carts and access the checkout APIs.</p>
<ul>
<li><a href=/firmly-api/firmly-checkout-api/authentication/browser-session/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Browser Session</span></a></li>
</ul>


- [Browser Session](/firmly-api/firmly-checkout-api/authentication/browser-session/index.md)


---


# Get Consents

Retrieves the current consent settings for a customer's cart session. This API returns all available consent options along with their current status, including whether they have been signed by the customer.

## HTTP Request

`GET /api/v1/domains/{domain}/cart/consents`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Path Parameters

Parameter | Type | Description
--------- | ---- | -----------
domain | string | The domain identifier for the merchant

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Response Fields

The API returns an array of consent objects with the following structure:

Field | Type | Description
----- | ---- | -----------
id | string | Unique identifier for the consent
ui_slot | string | UI placement hint (e.g., "UNDER_EMAIL_INPUT")
text | string | The consent text displayed to the customer
type | string | Type of consent (e.g., "marketing")
explicit | boolean | Whether explicit consent is required
rich_text | boolean | Whether the text contains rich formatting
required | boolean | Whether this consent is mandatory
revokable | boolean | Whether the consent can be revoked later
signed | boolean | Whether the customer has signed this consent

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
DomainNotFound | 404 | The specified domain was not found.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

```bash
curl \
  --location \
  --request GET 'https://api.firmly.work/api/v1/domains/mystore.com/cart/consents' \
  --header 'x-firmly-authorization: <your-auth-token>' \
  --header 'Content-Type: application/json'
```

## Sample Response

```json
[
  {
    "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
    "ui_slot": "UNDER_EMAIL_INPUT",
    "text": "I would like to receive marketing emails about special offers and new products.",
    "type": "marketing",
    "explicit": true,
    "rich_text": false,
    "required": false,
    "revokable": true,
    "signed": false
  },
  {
    "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
    "ui_slot": "ABOVE_PLACE_ORDER_BUTTON",
    "text": "I agree to the <a href='/terms'>Terms of Service</a> and <a href='/privacy'>Privacy Policy</a>.",
    "type": "terms",
    "explicit": true,
    "rich_text": true,
    "required": true,
    "revokable": false,
    "signed": true
  }
]
```

## Implementation Notes

- Consent signatures include timestamp, IP address, and user agent for audit purposes
 


---


# Set Consents

Updates consent preferences for a customer's cart session. This API allows customers to grant or revoke consent for various purposes like marketing communications. All consent changes are tracked with signatures for compliance purposes.

## HTTP Request

`POST /api/v1/domains/{domain}/cart/consents`

`PUT /api/v1/domains/{domain}/cart/consents`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Path Parameters

Parameter | Type | Description
--------- | ---- | -----------
domain | string | The domain identifier for the merchant

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Request Body

Field | Type | Required | Description
----- | ---- | -------- | -----------
consents | array | Yes | Array of consent objects to update

### Consent Object Structure

Field | Type | Required | Description
----- | ---- | -------- | -----------
id | string | Yes | The unique identifier of the consent to update
revoke | boolean | No | Set to `true` to revoke the consent, omit or set `false` to grant consent

## Response Fields

The API returns an updated array of consent objects with the same structure as the [Get Consents](/firmly-api/firmly-checkout-api/consent/get-consents/) response.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
DomainNotFound | 404 | The specified domain was not found.
ConsentNotFound | 400 | One or more consent IDs were not found.
ConsentNotRevokable | 400 | Attempted to revoke a non-revokable consent.
ValidationError | 400 | Request body validation failed.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request - Grant Consent

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/mystore.com/cart/consents' \
  --header 'x-firmly-authorization: <your-auth-token>' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "consents": [
      {
        "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
      }
    ]
  }'
```

## Sample Request - Revoke Consent

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/mystore.com/cart/consents' \
  --header 'x-firmly-authorization: <your-auth-token>' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "consents": [
      {
        "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
        "revoke": true
      }
    ]
  }'
```

## Sample Request - Multiple Consents

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/mystore.com/cart/consents' \
  --header 'x-firmly-authorization: <your-auth-token>' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "consents": [
      {
        "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479"
      },
      {
        "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
      }
    ]
  }'
```

## Sample Response

```json
[
  {
    "id": "f47ac10b-58cc-4372-a567-0e02b2c3d479",
    "ui_slot": "UNDER_EMAIL_INPUT",
    "text": "I would like to receive marketing emails about special offers and new products.",
    "type": "marketing",
    "explicit": true,
    "rich_text": false,
    "required": false,
    "revokable": true,
    "signed": true
  },
  {
    "id": "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
    "ui_slot": "ABOVE_PLACE_ORDER_BUTTON",
    "text": "I agree to the <a href='/terms'>Terms of Service</a> and <a href='/privacy'>Privacy Policy</a>.",
    "type": "terms",
    "explicit": true,
    "rich_text": true,
    "required": true,
    "revokable": false,
    "signed": true
  }
]
```

## Implementation Notes

- Consent signatures are automatically created when consent is granted, including:
  - Customer's IP address
  - User agent string
  - Timestamp of consent
- Only revokable consents can be revoked using the `revoke: true` flag
- Non-Revokable consents cannot be revoked and will return an error if attempted
- Both POST and PUT methods are supported for flexibility in client implementation
 


---

# Consent


  <h1 id="consent-management-apis">Consent Management APIs</h1><p>Firmly&rsquo;s consent management APIs provide comprehensive functionality for handling user consent data during the checkout process. These APIs allow you to retrieve current consent settings and update consent preferences while maintaining proper audit trails and compliance with privacy regulations.</p>
<h2 id="overview">
    <span class="DocsMarkdown--header-anchor-positioner">
      <a class="DocsMarkdown--header-anchor Link Link-without-underline" href="#overview">&#8203;​</a>
    </span>
    <span>Overview</span>
  </h2><p>The consent management system supports:</p>
<ul>
<li>Marketing consent preferences</li>
<li>Legal compliance tracking</li>
<li>Consent signature verification</li>
<li>Revokable consent management</li>
<li>Rich text consent display</li>
</ul>
<h2 id="available-apis">
    <span class="DocsMarkdown--header-anchor-positioner">
      <a class="DocsMarkdown--header-anchor Link Link-without-underline" href="#available-apis">&#8203;​</a>
    </span>
    <span>Available APIs</span>
  </h2><ul>
<li><a href=/firmly-api/firmly-checkout-api/consent/get-consents/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get Consents</span></a> - Retrieve current consent settings</li>
<li><a href=/firmly-api/firmly-checkout-api/consent/set-consents/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Set Consents</span></a> - Update consent preferences</li>
</ul>


- [Get Consents](/firmly-api/firmly-checkout-api/consent/get-consents/index.md)
- [Set Consents](/firmly-api/firmly-checkout-api/consent/set-consents/index.md)


---


# Apply Coupon(s)

In a given cart, either a single coupon or multiple coupons can be applied at the same time, up to a maximum of 10 coupons. The best combination coupons will be applied to the cart.

## HTTP Request

`POST api/v1/domains/{{merchant-domain}}/cart/promo-codes`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the merchant website. (e.g. mystore.com).

## Response Format

`Content-Type: application/json`

Returns a firmly [`Cart`](/firmly-api/schema/schema/#cart) including the applied coupons and discounts.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
InvalidPromoCode | 409 | Enter a valid discount code.
PromoNotAvailable | 409 | This merchant does not allow promotions for this cart.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

```bash
curl \
  --location \
  --request POST --url 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/promo-codes' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json'
  --data '{"promo_codes": ["MULTIUSE","SINGLEUSE","FREESHIP","ONESPRINGSALE"]}'
```

## Sample Response

```json
{
  "platform_id": "merchant_platform",
  "shop_id": "merchant.com",
  "cart_id": "d3e12e7b-805f-4cd8-91fe-79aba4692a62",
  "line_items": [
    {
      "sku": "29228169723956",
      "base_sku": "3796144554036",
      "variant_option_list": [],
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
      },
      "line_price": {
        "currency": "USD",
        "value": 2,
        "number": 200,
        "symbol": "$"
      },
      "line_discount": {
        "currency": "USD",
        "value": 0.4,
        "number": 40,
        "symbol": "$"
     },
      "requires_shipping": true,
      "image": {
        "url": "http://cdn.merchant.com/Hooded_Sweatshirt-Women-White-Front2_small.jpg?v=1594075523"
      },
      "platform_line_item_id": "277223f20d3641678f274bd81bcd222f",
      "description": "Hooded Sweatshirt Women White",
      "variant_description": "M / Blue & White",
      "line_item_id": "ff4bd6b1-c957-4a7a-a280-2c529c367581"
    }
  ],
  "total": {
    "currency": "USD",
    "value": 1.6,
    "number": 160,
    "symbol": "$"
 },
  "sub_total": {
    "currency": "USD",
    "value": 1.6,
    "number": 160,
    "symbol": "$"
 },
  "shipping_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "tax": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "cart_discount": {
    "currency": "USD",
    "value": 0.4,
    "number": 40,
    "symbol": "$"
 },
  "app_id": "3d181c3d-16b1-4544-9036-2bc550ae0fb3",
  "cart_status": "active",
  "coupons": [
    "SINGLEUSE"
  ]
}
```

 


---


# Clear Coupons
In a given cart, all the coupons will be removed.


## HTTP Request

`DELETE api/v1/domains/{{merchant-domain}}/cart/promo-codes`

## Authentication

This API requires an [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the merchant website. (e.g. mystore.com).

## Response Format

`Content-Type: application/json`

Returns a firmly [`Cart`](/firmly-api/schema/schema/#cart) with no coupons.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request


```bash
curl \
  --location \
  --request DELETE --url 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/promo-codes' \
  --header 'x-firmly-authorization: <>' \
```

## Sample Response

```json
{
  "platform_id": "merchant_platform",
  "shop_id": "merchant.com",
  "cart_id": "d3e12e7b-805f-4cd8-91fe-79aba4692a62",
  "line_items": [
    {
      "sku": "29228169723956",
      "base_sku": "3796144554036",
      "variant_option_list": [],
      "quantity": 2,
      "price": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
      },
      "line_price": {
        "currency": "USD",
        "value": 2,
        "number": 200,
        "symbol": "$"
      },
      "line_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
      },
      "requires_shipping": true,
      "image": {
        "url": "http://cdn.merchant.com/Hooded_Sweatshirt-Women-White-Front2_small.jpg?v=1594075523"
      },
      "platform_line_item_id": "277223f20d3641678f274bd81bcd222f",
      "description": "Hooded Sweatshirt Women White",
      "variant_description": "M / Blue & White",
      "line_item_id": "ff4bd6b1-c957-4a7a-a280-2c529c367581"
    }
  ],
  "total": {
    "currency": "USD",
    "value": 2,
    "number": 200,
    "symbol": "$"
  },
  "sub_total": {
    "currency": "USD",
    "value": 2,
    "number": 200,
    "symbol": "$"
  },
  "shipping_total": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "tax": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "cart_discount": {
    "currency": "USD",
    "value": 0,
    "number": 0,
    "symbol": "$"
  },
  "app_id": "3d181c3d-16b1-4544-9036-2bc550ae0fb3",
  "cart_status": "active",
  "coupons": []
}
```

 


---

# Coupon


  <h1 id="coupon-apis">Coupon APIs</h1><p>The following APIs are used to apply and cancel coupons.</p>
<ul>
<li><a href=/firmly-api/firmly-checkout-api/coupon/apply-coupons/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Apply Coupons</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/coupon/clear-coupons/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Clear Coupons</span></a></li>
</ul>


- [Apply Coupons](/firmly-api/firmly-checkout-api/coupon/apply-coupons/index.md)
- [Clear Coupons](/firmly-api/firmly-checkout-api/coupon/clear-coupons/index.md)


---


# Authorize Express Checkout

Authorizes the express checkout. Some gateways like Paypal require an authorization through an external pop-up. Using Paypal as a reference, it will return the paypal_token from Start Express Checkout. The user will authorize the session through PayPal and retrieve the payer_id. This payer_id will be used on this call to confirm the authorization.

## HTTP Request
`POST /api/v1/domains/{{merchant-domain}}/express/paypal/authorize`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website (e.g. mystore.com).

## Payload Parameters
Parameter | Default | Description 
---------- | ---------- | -------
payer_id | - | Customer’s id returned from the external authorization flow. It should be passed inside the attributes key.

## Response Format
Content-type: application/json 

Returns the current cart with the confirmation of the authorization.

## Expected Errors
Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid. 
InvalidToken | 400 | JWT token is invalid. 
InvalidJWTToken | 401 | The JWT token is invalid. 
CartNotFound | 404 | Cart was not found. 
BadRequest | 400 | (if PayPal) attributes.payer_id is missing in the requested payload.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.


## Sample Request using Paypal
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/express/paypal/authorize' \
  --header 'x-firmly-authorization: <>'
  --header 'Content-Type: application/json' \
  --data-raw '{
    "attributes": {
        "payer_id": "VSFDSFDSFA"
    }
}'
```

## Sample Response
```json
{
    "cart_status": "active",
    "line_items": [
        {
            "line_item_id": "00000000-0000-0000-0000-000000000000",
            "sku": "42961853841656",
            "base_sku": "7725400785144",
            "quantity": 1,
            "msrp": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_large.webp?v=1655838389",
                "large": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_large.webp?v=1655838389",
                "grande": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_grande.webp?v=1655838389",
                "medium": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_medium.webp?v=1655838389",
                "compact": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_compact.webp?v=1655838389",
                "small": "http://cdn.shopify.com/s/files/1/0650/9202/6616/products/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_small.webp?v=1655838389"
            },
            "platform_line_item_id": "c81c86d8cb8db3c6907e2f29b3dfada4",
            "description": "Clip-in hair extensions #1 jet black.",
            "variant_description": "16\" / Classic"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "shipping_method_options": [
        {
            "sku": "shopify-Economy-0.00",
            "description": "Economy",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "estimated_delivery": "5 to 8 business days"
        },
        {
            "sku": "shopify-Standard-4.90",
            "description": "Standard",
            "price": {
                "currency": "USD",
                "value": 4.9,
                "number": 490,
                "symbol": "$"
           },
            "estimated_delivery": "3 to 4 business days"
        }
    ],
    "shipping_method": {
        "sku": "shopify-Economy-0.00",
        "description": "Economy",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        },
        "estimated_delivery": "5 to 8 business days"
    },
    "shipping_info": {
        "first_name": "John",
        "last_name": "Doe",
        "phone": "(206) 555-1212",
        "address1": "7367 126th PL SE",
        "city": "Newcastle",
        "state_or_province": "WA",
        "state_name": "Washington",
        "country": "United States",
        "postal_code": "98056",
        "email": "firmly@firmly.com"
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        },
        {
            "type": "PayPal",
            "wallet": "paypal"
        },
        {
            "type": "ShopPay",
            "wallet": "shoppay"
        }
    ],
    "payment_method": {
        "attributes": {
            "email": "firmly@firmly.com",
            "type": "PayPal",
            "token": "EC-0WK28962LR2168825",
            "sandbox": false,
            "requires_review": false,
            "url": "https://www.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token=EC-0WK28962LR2168825",
            "redirect_url": "https://firmlyai.myshopify.com/1234/checkouts/ee5680f272353f193d3e0bc1389b562c/paypal/tokens?key=a2daa96407dd18126ce94b541bc46c01&token=EC-0WK28962LR2168825",
            "payer_id": "VSFDSFDSFA"
        },
        "payment_type": "PayPal"
    }
}
```
Check that now the payment_method had its property updated with paypal information. The payer_id property will be returned indicating that the order is ready to be completed.
 


---


# Complete Express Checkout

The express checkout completes after the authorize call is performed properly.

## HTTP Request
`POST /api/v1/domains/{{merchant-domain}}/express/paypal/complete-order`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website (e.g. mystore.com).

## Response Format
Content-type: application/json 

Returns the order details.

## Expected Errors
Normalized Identifier | Error Code | Description
---------- | ---------- | -------
 MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid. 
 InvalidJWTToken | 401 | The JWT token is invalid. 
 InvalidToken | 400 | JWT token is invalid. 
 MissingTaxSync | 412 | The taxes are not synced yet. Please refresh the cart and try again. 
 NoLineItemError | 412 | Cart does not have any line item. Add an item at least and try again. 
 CheckoutError | 412 | Payment info or billing address invalid. 
 MissingShippingMethod | 412 | Shipping method needs to be set. 
 MissingEmailAddressOnCheckout | 412 | Missing email address during checkout phase. 
 UserMustLogin | 409 | This merchant requires the user to be logged in at this step. 
 MissingEmail | 412 | Missing email address. 
 CreditCardInsufficientFunds | 422 | Insufficent funds. 
 CreditCardDeclined | 422 | Credit card declined. 
 CreditCardInvalidNumber | 422 | Credit card number is invalid.
 CreditCardInvalidExpiry | 422 | Credit card expiry date is invalid. 
 CreditCardInvalidSecurityCode | 422 | Credit card security code is invalid.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request using Paypal
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/express/paypal/complete-order' \
  --header 'x-firmly-authorization: <>'
'
```
## Sample Response

```json
{
    "cart_status": "submitted",
    "line_items": [
        {
            "line_item_id": "00000000-0000-0000-0000-000000000000",
            "sku": "29228172836916",
            "base_sku": "3796136493108",
            "quantity": 1,
            "msrp": {
                "currency": "USD",
                "value": 0.5,
                "number": 50,
                "symbol": "$"
           },
            "price": {
                "currency": "USD",
                "value": 0.5,
                "number": 50,
                "symbol": "$"
           },
            "line_price": {
                "currency": "USD",
                "value": 0.5,
                "number": 50,
                "symbol": "$"
           },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_large.jpg?v=1565573135",
                "large": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_large.jpg?v=1565573135",
                "grande": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_grande.jpg?v=1565573135",
                "medium": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_medium.jpg?v=1565573135",
                "compact": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_compact.jpg?v=1565573135",
                "small": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_small.jpg?v=1565573135"
            },
            "platform_line_item_id": "a5b73857381909b828f3f840fc2459c3",
            "description": "Baby Jersey Bodysuit White",
            "variant_description": "6 months"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 0.5,
        "number": 50,
        "symbol": "$"
   },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "total": {
        "currency": "USD",
        "value": 0.5,
        "number": 50,
        "symbol": "$"
   },
    "platform_order_number": "Order #2172",
    "shipping_info": {
        "first_name": "petta",
        "last_name": "two",
        "phone": "4255551234",
        "address1": "12210 SE 36th Street",
        "city": "Bellevue",
        "state_or_province": "WA",
        "state_name": "Washington",
        "country": "United States",
        "postal_code": "98006"
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        },
        {
            "type": "PayPal",
            "wallet": "paypal"
        },
        {
            "type": "ShopPay",
            "wallet": "shoppay"
        }
    ],
    "payment_method": {
        "attributes": {
            "type": "PayPal",
            "token": "EC-0WK28962LR2168825",
            "sandbox": false,
            "requires_review": false,
            "url": "https://www.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token=EC-0WK28962LR2168825",
            "redirect_url": "https://firmlyai.myshopify.com/1234/checkouts/ee5680f272353f193d3e0bc1389b562c/paypal/tokens?key=a2daa96407dd18126ce94b541bc46c01&token=EC-0WK28962LR2168825",
            "payer_id": "VSFDSFDSFS"
        },
        "payment_type": "PayPal"
    },
    "urls": {
        "thank_you_page": "https://firmlyai.myshopify.com/6558122036/checkouts/ee5680f272353f193d3e0bc1389b562c/thank_you?key=a2daa96407dd18126ce94b541bc46c01"
    },
    "billing_info": {
        "first_name": "petta",
        "last_name": "two",
        "phone": "4255551234",
        "address1": "12210 SE 36th Street",
        "city": "Bellevue",
        "state_or_province": "WA",
        "state_name": "Washington",
        "country": "United States",
        "postal_code": "98006"
    }
}
```
This API places the order on the respective merchant and completes the flow.
 


---


# Start Express Checkout

Some payment gateways require a special flow where the session is started, authorized, and then completed. If a supported gateway is returned inside payment_method_options, and if that supports express checkout, it is allowed to use this API. In the examples below, we'll use Paypal.

## HTTP Request
`POST /api/v1/domains/{{merchant-domain}}/express/paypal/start`

## Authentication
This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website (e.g. mystore.com).

## Response Format
Content-type: application/json 

Returns the current cart with PayPal information to start the express checkout.

## Expected Errors
Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid. 
InvalidToken | 400 | JWT token is invalid. 
InvalidJWTToken | 401 | The JWT token is invalid. 
CartNotFound | 404 | Cart was not found. 
NoLineItemError | 412 | Cart does not have any line item. Add an item at least and try again.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request using Paypal

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/express/paypal/start' \
  --header 'x-firmly-authorization: <>'
```
## Sample Response
```json
{
    "cart_status": "active",
    "line_items": [
        {
            "line_item_id": "00000000-0000-0000-0000-000000000000",
            "sku": "29228172836916",
            "base_sku": "3796136493108",
            "quantity": 1,
            "msrp": {
                "currency": "USD",
                "value": 0.5,
                "number": 50,
                "symbol": "$"
           },
            "price": {
                "currency": "USD",
                "value": 0.5,
                "number": 50,
                "symbol": "$"
           },
            "line_price": {
                "currency": "USD",
                "value": 0.5,
                "number": 50,
                "symbol": "$"
           },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_large.jpg?v=1565573135",
                "large": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_large.jpg?v=1565573135",
                "grande": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_grande.jpg?v=1565573135",
                "medium": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_medium.jpg?v=1565573135",
                "compact": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_compact.jpg?v=1565573135",
                "small": "http://cdn.shopify.com/s/files/1/0065/5812/2036/products/Baby_Jersey_Bodysuit-Front_small.jpg?v=1565573135"
            },
            "platform_line_item_id": "a5b73857381909b828f3f840fc2459c3",
            "description": "Baby Jersey Bodysuit White",
            "variant_description": "6 months"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 0.5,
        "number": 50,
        "symbol": "$"
   },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "total": {
        "currency": "USD",
        "value": 0.5,
        "number": 50,
        "symbol": "$"
   },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        },
        {
            "type": "PayPal",
            "wallet": "paypal"
        },
        {
            "type": "ShopPay",
            "wallet": "shoppay"
        }
    ],
    "payment_method": {
        "type": "PayPal",
        "attributes": {
            "paypal_token": "EC-0WK28962LR2168825",
            "url": "https://www.paypal.com/cgi-bin/webscr?cmd=_express-checkout&token=EC-0WK28962LR2168825",
            "sandbox": false,
            "requires_review": false,
            "redirect_url": "https://firmlyai.myshopify.com/1234/checkouts/ee5680f272353f193d3e0bc1389b562c/paypal/tokens?key=a2daa96407dd18126ce94b541bc46c01&token=EC-0WK28962LR2168825"
        }
    }
}
```
Check that the payment_method now has its property updated with PayPal information. The paypal_token property will be sent to PayPal to retrieve the authorization through paypal.js interface.
 


---

# Express Checkout


  <h1 id="express-checkout-apis">Express Checkout APIs</h1><p>The following APIs are used in the express checkout process.</p>
<ul>
<li><a href=/firmly-api/firmly-checkout-api/express-checkout/start-express-checkout/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Start Express Checkout</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/express-checkout/authorize-express-checkout/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Authorize Express Checkout</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/express-checkout/complete-express-checkout/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Complete Express Checkout</span></a></li>
</ul>


- [Start Express Checkout](/firmly-api/firmly-checkout-api/express-checkout/start-express-checkout/index.md)
- [Authorize Express Checkout](/firmly-api/firmly-checkout-api/express-checkout/authorize-express-checkout/index.md)
- [Complete Express Checkout](/firmly-api/firmly-checkout-api/express-checkout/complete-express-checkout/index.md)


---


# Complete Order with Card - v2

This API places the order on merchant and completes the flow. It receives credit card information (encrypted with the public key provided by [Get Public Key API](/firmly-api/firmly-checkout-api/payment/get-public-key/), the unencrypted billing info, and the payment handle.

> **Note**
> Alternatively (and firmly recommends), you can tokenize and place the order in a single step by using the [Complete Order with Card v3](/firmly-api/api/payment/complete-order-3/) API, which offers enhanced security through JWE encryption.
>  When this API is used, the order will be placed, sent to the customer's address by the merchant, and the payment will be processed. There is no way to undo this action using firmly APIs.

## HTTP Request

`POST /api/v2/payment/complete-order`


## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).


## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Token returned by [Browser Session](/firmly-api/firmly-checkout-api/authentication/browser-session/) that identifies client's device.

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
handle | - | The handle retrieved as part of the cart once the shipping info is added.
billing_info | - | Address for billing.
credit_card | - | The customer payment information where each key is encrypted with RSA-OAEP.

## Response Format

`Content-Type: application/json`

Returns a firmly [`Order`](#order-model).

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
MissingTaxSync | 412 | The taxes are not synced yet. Please refresh the cart and try again.
NoLineItemError | 412 | Cart does not have any line item. Add an item at least and try again.
CheckoutError | 412 | Payment info or billing address invalid.
MissingShippingMethod | 412 | Shipping method needs to be set.
MissingEmailAddressOnCheckout | 412 | Missing email address during checkout phase.
UserMustLogin | 409 | This merchant requires the user to be logged in at this step.
MissingEmail | 412 | Missing email address.
CreditCardInsufficientFunds | 422 | Insufficent funds.
CreditCardDeclined | 422 | Credit card declined
CreditCardInvalidNumber | 422 | Credit card number is invalid.
CreditCardInvalidExpiry | 422 | Credit card expiry date is invalid.
CreditCardInvalidSecurityCode | 422 | Credit card security code is invalid.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## To Build the Payload

1. Transform a plain-text credit card into a encrypted credit card, as shown in the following example.
```python
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
import requests
import json
import base64

card = {
    "name": "John Doe",
    "number": "4111111111111111",
    "month": "12",
    "year": "2025",
    "verification_value": "123"
}

def get_encryption_key():
    try:
        # Make request to remote API endpoint to get PEM format
        response = requests.get("https://cc.firmly.work/api/v1/payment/key?format=PEM")

        if response.status_code != 200:
            raise Exception(f"Failed to get encryption key: {response.status_code}")

        return (response.text, response.headers.get('X-Firmly-Kid'))

    except Exception as e:
        raise Exception(f"Error getting encryption key: {str(e)}")

def rsa_encrypt_decrypt(message):
    rsa_public_key = RSA.importKey(key_pem)
    rsa_public_key = PKCS1_OAEP.new(rsa_public_key)
    encrypted_text = rsa_public_key.encrypt(message)
    return encrypted_text

# Get PEM from API
(key_pem, kid) = get_encryption_key()

# Encrypt each card field individually
encrypted_card = {}
for field in ["name", "number", "month", "year", "verification_value"]:
    if field in card:
        try:
            # Convert field value to string and encode
            field_value = str(card[field]).encode()

            # Encrypt using RSA-OAEP with SHA256
            print('field_value', field_value)
            encrypted = rsa_encrypt_decrypt(field_value)

            # Base64 encode the encrypted value and format with kid
            b64_encrypted = base64.b64encode(encrypted).decode('utf-8')
            encrypted_card[field] = f"{kid}|{b64_encrypted}"
        except Exception as e:
            print(f"Error encrypting {field}: {str(e)}")
            encrypted_card[field] = None

print(json.dumps(encrypted_card))
```

2. Using public key encryption, encrypt each value from the `credit_card` object. (The public key to be used shall be retrieved from the [`Get Public Key API`](/firmly-api/firmly-checkout-api/payment/get-public-key/).)

```json
{
    "credit_card": {
        "name": "3b2a751c8d494ed6b66b50365ab271d9|O6DpYZDIi6CLR73oTYY3w170Ii4h24x/y6NRRwG++/dd7aPLzSuK9Wtg6DSMQVtFkNiNEFOI64QoAAzJ2t+zD1MbxbZw7C3y93fp9dvqXcBNcCI9T+3h7VbHF6pDLsJHClZVpnlFdOhiFy3gGVIEkpL67n0zuXrW1lC29t2yjCDctoOg2IOSyjuuAcoqJ25wtdlg5eTk0jc5z6eld5MOPRZuB3Ex9bDehEih0gQxHDgpUxaIoZ8VJuShI54JdTmQQU5uPaui3+tw6CdZHNCaMX6RktCsty4vY1aCzUvRWvtoli/JyMRwv9aFObq0XgxprQGZ1xcXBvz3OQGOiZi9zQ==",
        "number": "3b2a751c8d494ed6b66b50365ab271d9|YBWbpYLLYLp4PsGYAwxAZSAt3k2izfxp51bcbUepf6C588It8cuAqKJwlfDWs7mrw2iH2c8IphxxtmKSg5tMko0w7pxSit1qfczGQk28BYr5YPCiBhSxWVF34EO2alKYGiPUoU0wrz+WzAjAhOFmi762Xgqjy0jdDCz3E3QquM6jXYSSTHSrHS+FPuhI6lwg2X26z+Gv4P1XvJx32T8eHAQVUO5CQzzTF85iKzoouxexLE7AF4pBpHwLU9yVbgxnmn9ysLSvV5g1QL/7vQol2SZc1T5aurr53+tPJMfaSvf1+bKv7AeKPmyLzUCG6GSelK3B9lz7Z2Em0xFterjBEg==",
        "month": "3b2a751c8d494ed6b66b50365ab271d9|pVCpfptL/H8KhxQPrQ+4OJTS4yE5WioCQ+tClqXqROxRpzXoirqG6LLvc9tvbPMxcYmes0odogi5tsgxvDLhEzbNjBzFRl6KpYfCnGKtZkcHz7SexRcLOQjF6PW17WoxfPc4WCEb8i/e3fcdaMi0v/X73rgAVapa9uCTZrEX6Dlaf0lT/Th51/zXxy0NGOvzIrIQUAJxkwQone0Idg0w0O4nZfryCvtzunKl+tVH78TqPgMMB98dNVLSNmE+UHZRVinrUKlcEWRj9PFuYZj6Iy7K/lE7SxPiK70bO8RPRMDM3Guesi1KV90xpB2XsVHRrRl1SPE9gvf+JyChZlhBhw==",
        "year": "3b2a751c8d494ed6b66b50365ab271d9|UJ015dGO9cCxkzfYgXCwwgm/5IqwcfIDiTJ6H8JmMnQbNy5R7EHSEnxR1jKdwzKpVnSWokB76j5DRZVcGH17KSSf9f+u37C7/QF8gMULcERnjLkTKHb4bcjOJskpFJfn5GkOnCB7RPaD9S7krvupJ492CaWKlHek+3aUsaZ0nhYP3SzeueegVCUUJ4656a8FwaT5ca/dx0CyQrBT0mo5RblyrSRJvFO19d/LLSEJkBi1Fzbbre4ny71zVIrzzs4FtigqXaFokLmPn/pVFs1CagS+krw3+/0OEaOORfrvuiRs+dZr6u9y9JR5ck3gQ9gcquFe07DoTG4kBziVPYm08A==",
        "verification_value": "3b2a751c8d494ed6b66b50365ab271d9|s57rFDEJKvHoYaH1ItK8Csi29ngY3mzZofKRxL0TTUj0JCf0m3OXNPSxL2fD4KlW4d01c/4Qbg7vb9w6WlgVk1c0ahci1KCYJXINvBIUWdh3K2c5qD0u7ZKhRmwuQQLNyK+SdKPfND2Qa3FEIVJXFC1p/0FHj3ufg2rfQZ8doqeMSddd20Hg3MfqI3fHpSf8R4+ZkQL1eLfhrkV38tcKQCW1zB8PRVDwgkTQt4l5FR00yhClczsrEI2NhhBfgEqraTKuO7Lid4tTOK1DQiq1zETQs5C1zsF7gC812H5PXWdCgCt2hoVLESy0sJTcqtLILJjp3rjIjAorhbwfMPamAw=="
    },
    "billing_info": {
        "address1": "123 Nice St",
        "address2": "21st floor",
        "city": "Newcastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98006"
    }
}
```

3. Assemble the Complete Order with Card API payload (handle, credit_card, and billing_info).

> **Note**
> Use the following format to assemble the encrypted value:
> 
> [{kid}](/firmly-api/api/payment/get-public-key/#response-format) | {encrypted value encoded with base 64}
> 
> Note the use of the pipe character (|) between the values.
Adding handle.

```json
{
    "credit_card": {
        "name": "3b2a751c8d494ed6b66b50365ab271d9|O6DpYZDIi6CLR73oTYY3w170Ii4h24x/y6NRRwG++/dd7aPLzSuK9Wtg6DSMQVtFkNiNEFOI64QoAAzJ2t+zD1MbxbZw7C3y93fp9dvqXcBNcCI9T+3h7VbHF6pDLsJHClZVpnlFdOhiFy3gGVIEkpL67n0zuXrW1lC29t2yjCDctoOg2IOSyjuuAcoqJ25wtdlg5eTk0jc5z6eld5MOPRZuB3Ex9bDehEih0gQxHDgpUxaIoZ8VJuShI54JdTmQQU5uPaui3+tw6CdZHNCaMX6RktCsty4vY1aCzUvRWvtoli/JyMRwv9aFObq0XgxprQGZ1xcXBvz3OQGOiZi9zQ==",
        "number": "3b2a751c8d494ed6b66b50365ab271d9|YBWbpYLLYLp4PsGYAwxAZSAt3k2izfxp51bcbUepf6C588It8cuAqKJwlfDWs7mrw2iH2c8IphxxtmKSg5tMko0w7pxSit1qfczGQk28BYr5YPCiBhSxWVF34EO2alKYGiPUoU0wrz+WzAjAhOFmi762Xgqjy0jdDCz3E3QquM6jXYSSTHSrHS+FPuhI6lwg2X26z+Gv4P1XvJx32T8eHAQVUO5CQzzTF85iKzoouxexLE7AF4pBpHwLU9yVbgxnmn9ysLSvV5g1QL/7vQol2SZc1T5aurr53+tPJMfaSvf1+bKv7AeKPmyLzUCG6GSelK3B9lz7Z2Em0xFterjBEg==",
        "month": "3b2a751c8d494ed6b66b50365ab271d9|pVCpfptL/H8KhxQPrQ+4OJTS4yE5WioCQ+tClqXqROxRpzXoirqG6LLvc9tvbPMxcYmes0odogi5tsgxvDLhEzbNjBzFRl6KpYfCnGKtZkcHz7SexRcLOQjF6PW17WoxfPc4WCEb8i/e3fcdaMi0v/X73rgAVapa9uCTZrEX6Dlaf0lT/Th51/zXxy0NGOvzIrIQUAJxkwQone0Idg0w0O4nZfryCvtzunKl+tVH78TqPgMMB98dNVLSNmE+UHZRVinrUKlcEWRj9PFuYZj6Iy7K/lE7SxPiK70bO8RPRMDM3Guesi1KV90xpB2XsVHRrRl1SPE9gvf+JyChZlhBhw==",
        "year": "3b2a751c8d494ed6b66b50365ab271d9|UJ015dGO9cCxkzfYgXCwwgm/5IqwcfIDiTJ6H8JmMnQbNy5R7EHSEnxR1jKdwzKpVnSWokB76j5DRZVcGH17KSSf9f+u37C7/QF8gMULcERnjLkTKHb4bcjOJskpFJfn5GkOnCB7RPaD9S7krvupJ492CaWKlHek+3aUsaZ0nhYP3SzeueegVCUUJ4656a8FwaT5ca/dx0CyQrBT0mo5RblyrSRJvFO19d/LLSEJkBi1Fzbbre4ny71zVIrzzs4FtigqXaFokLmPn/pVFs1CagS+krw3+/0OEaOORfrvuiRs+dZr6u9y9JR5ck3gQ9gcquFe07DoTG4kBziVPYm08A==",
        "verification_value": "3b2a751c8d494ed6b66b50365ab271d9|s57rFDEJKvHoYaH1ItK8Csi29ngY3mzZofKRxL0TTUj0JCf0m3OXNPSxL2fD4KlW4d01c/4Qbg7vb9w6WlgVk1c0ahci1KCYJXINvBIUWdh3K2c5qD0u7ZKhRmwuQQLNyK+SdKPfND2Qa3FEIVJXFC1p/0FHj3ufg2rfQZ8doqeMSddd20Hg3MfqI3fHpSf8R4+ZkQL1eLfhrkV38tcKQCW1zB8PRVDwgkTQt4l5FR00yhClczsrEI2NhhBfgEqraTKuO7Lid4tTOK1DQiq1zETQs5C1zsF7gC812H5PXWdCgCt2hoVLESy0sJTcqtLILJjp3rjIjAorhbwfMPamAw=="
    },
    "billing_info": {
        "address1": "123 Nice St",
        "address2": "21st floor",
        "city": "Newcastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98006"
    },
    "handle": "e90fea27-1dab-46be-a1fc-ab35153b478a|4hrNGoxaqrOhZibmfkmX0OOAcPNqQjqZysIc/tIwyk7OlMS8t8qTzv2yPnR2tT5diw=="
}
```


## Sample Request

curl example:

```bash
curl \
  --location \
  --request POST 'https://cc.firmly.work/api/v2/payment/complete-order' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "credit_card": {
        "name": "3b2a751c8d494ed6b66b50365ab271d9|O6DpYZDIi6CLR73oTYY3w170Ii4h24x/y6NRRwG++/dd7aPLzSuK9Wtg6DSMQVtFkNiNEFOI64QoAAzJ2t+zD1MbxbZw7C3y93fp9dvqXcBNcCI9T+3h7VbHF6pDLsJHClZVpnlFdOhiFy3gGVIEkpL67n0zuXrW1lC29t2yjCDctoOg2IOSyjuuAcoqJ25wtdlg5eTk0jc5z6eld5MOPRZuB3Ex9bDehEih0gQxHDgpUxaIoZ8VJuShI54JdTmQQU5uPaui3+tw6CdZHNCaMX6RktCsty4vY1aCzUvRWvtoli/JyMRwv9aFObq0XgxprQGZ1xcXBvz3OQGOiZi9zQ==",
        "number": "3b2a751c8d494ed6b66b50365ab271d9|YBWbpYLLYLp4PsGYAwxAZSAt3k2izfxp51bcbUepf6C588It8cuAqKJwlfDWs7mrw2iH2c8IphxxtmKSg5tMko0w7pxSit1qfczGQk28BYr5YPCiBhSxWVF34EO2alKYGiPUoU0wrz+WzAjAhOFmi762Xgqjy0jdDCz3E3QquM6jXYSSTHSrHS+FPuhI6lwg2X26z+Gv4P1XvJx32T8eHAQVUO5CQzzTF85iKzoouxexLE7AF4pBpHwLU9yVbgxnmn9ysLSvV5g1QL/7vQol2SZc1T5aurr53+tPJMfaSvf1+bKv7AeKPmyLzUCG6GSelK3B9lz7Z2Em0xFterjBEg==",
        "month": "3b2a751c8d494ed6b66b50365ab271d9|pVCpfptL/H8KhxQPrQ+4OJTS4yE5WioCQ+tClqXqROxRpzXoirqG6LLvc9tvbPMxcYmes0odogi5tsgxvDLhEzbNjBzFRl6KpYfCnGKtZkcHz7SexRcLOQjF6PW17WoxfPc4WCEb8i/e3fcdaMi0v/X73rgAVapa9uCTZrEX6Dlaf0lT/Th51/zXxy0NGOvzIrIQUAJxkwQone0Idg0w0O4nZfryCvtzunKl+tVH78TqPgMMB98dNVLSNmE+UHZRVinrUKlcEWRj9PFuYZj6Iy7K/lE7SxPiK70bO8RPRMDM3Guesi1KV90xpB2XsVHRrRl1SPE9gvf+JyChZlhBhw==",
        "year": "3b2a751c8d494ed6b66b50365ab271d9|UJ015dGO9cCxkzfYgXCwwgm/5IqwcfIDiTJ6H8JmMnQbNy5R7EHSEnxR1jKdwzKpVnSWokB76j5DRZVcGH17KSSf9f+u37C7/QF8gMULcERnjLkTKHb4bcjOJskpFJfn5GkOnCB7RPaD9S7krvupJ492CaWKlHek+3aUsaZ0nhYP3SzeueegVCUUJ4656a8FwaT5ca/dx0CyQrBT0mo5RblyrSRJvFO19d/LLSEJkBi1Fzbbre4ny71zVIrzzs4FtigqXaFokLmPn/pVFs1CagS+krw3+/0OEaOORfrvuiRs+dZr6u9y9JR5ck3gQ9gcquFe07DoTG4kBziVPYm08A==",
        "verification_value": "3b2a751c8d494ed6b66b50365ab271d9|s57rFDEJKvHoYaH1ItK8Csi29ngY3mzZofKRxL0TTUj0JCf0m3OXNPSxL2fD4KlW4d01c/4Qbg7vb9w6WlgVk1c0ahci1KCYJXINvBIUWdh3K2c5qD0u7ZKhRmwuQQLNyK+SdKPfND2Qa3FEIVJXFC1p/0FHj3ufg2rfQZ8doqeMSddd20Hg3MfqI3fHpSf8R4+ZkQL1eLfhrkV38tcKQCW1zB8PRVDwgkTQt4l5FR00yhClczsrEI2NhhBfgEqraTKuO7Lid4tTOK1DQiq1zETQs5C1zsF7gC812H5PXWdCgCt2hoVLESy0sJTcqtLILJjp3rjIjAorhbwfMPamAw=="
    },
    "billing_info": {
        "address1": "123 Nice St",
        "address2": "21st floor",
        "city": "Newcastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98006"
        "email": "john@firmly.ai"
        "phone": "206-555-1212"
        "first_name": "John"
        "last_name": "Smith"
    },
    "handle": "e90fea27-1dab-46be-a1fc-ab35153b478a|4hrNGoxaqrOhZibmfkmX0OOAcPNqQjqZysIc/tIwyk7OlMS8t8qTzv2yPnR2tT5diw=="
}'
```

## Sample Response

```json
{
    "platform_id": "merchant_platform",
    "shop_id": "59",
    "cart_id": "30c28ec6-7321-4a61-92ed-8067c59b41e6",
    "line_items": [
        {
            "sku": "42961836507384",
            "base_sku": "7725397508344",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_discount": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "image": {
                "url": "https://cdn.merchant.com/image1_small.jpg?v=1655838064"
            },
            "platform_line_item_id": "fdb139055ad337bfb346326a234cbe05",
            "description": "Junior Smith Daredevil Ski Goggles",
            "variant_description": "Black",
            "line_item_id": "076a6428-6783-45a8-95c6-eacc8bb00fdd"
        }
    ],
    "shipping_info": {
        "first_name": "John",
        "last_name": "Smith",
        "phone": "(206) 555-1212",
        "address1": "123 Nice St",
        "city": "Newcastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056",
        "email": "john@firmly.ai"
    },
    "shipping_method": {
        "sku": "Economy-0.00",
        "description": "Economy",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        },
        "applicable_line_items": []
    },
    "total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_method_options": [
        {
            "sku": "Economy-0.00",
            "description": "Economy",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "Standard-4.90",
            "description": "Standard",
            "price": {
                "currency": "USD",
                "value": 4.9,
                "number": 490,
                "symbol": "$"
           }
        }
    ],
    "platform_order_number": "#1095",
    "app_id": "fdc6e81b-3792-4920-b19b-986c334f3e19",
    "cart_status": "submitted"
}
```
 


---


# Complete Order with Card - v3

This API places the order on the merchant and completes the checkout flow. It receives a JWE-encrypted credit card (encrypted with the public key provided by [Get Public Key API](/firmly-api/api/payment/get-public-key/)), the unencrypted billing info, and the payment handle.

> **Note**
> When this API is used, the order will be placed, sent to the customer's address by the merchant, and the payment will be processed. There is no way to undo this action using Firmly APIs.

## Key Differences from v2

The v3 API uses modern JWE encryption for credit card data rather than individually encrypted fields. This provides stronger security and simplifies implementation. The API also supports optional captcha tokens for additional security.

### Encryption Specifications

The v3 API uses the following encryption parameters:

- **Algorithm**: RSA-OAEP (RSA Optimal Asymmetric Encryption Padding)
- **Hash Algorithm**: SHA-256
- **Content Encryption**: A256GCM (AES 256-bit in Galois/Counter Mode)
- **Key Format**: JSON Web Key (JWK)

These parameters should be specified in the JWE protected header as:
```json
{
  "alg": "RSA-OAEP-256",
  "enc": "A256GCM",
  "kid": "[key identifier from Get Public Key API]"
}
```

## To Build the Payload

1. Encrypt the credit card object using JWE with the public key from the [Get Public Key API](/firmly-api/api/payment/get-public-key/).

```json
{
    "number": "4111111111111111",
    "name": "John Smith",
    "verification_value": "123",
    "month": "08",
    "year": "2030"
}
```

2. Assemble the Complete Order with Card API payload (handle, encrypted_card, and billing_info).

```json
{
    "encrypted_card": "eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00iLCJraWQiOiJ2MSJ9.N9_nfGUY8fUXyLZ32WVfR51zGjL-MTpNUPuSXwN8K7tGtNZICf9PpU6zOuX1bc0bCg6NVzVtHYeNWTZNe9MpHvbwLKhd8aaQQOGw1U2IpYbjSrQ6g29QYV1_rnEPwTeqb7L23IocO_hb9vBV_NmrIsFKuYAgUX0yZqNcBqxnxk5wX2sQhqW7jjOgR5kHfkKBpCKGVeYnUCIW8WpYCVdYAuCdXED7lKQ22VGaIMJn8rLpfMTZpdGHQZmE6xuS04hmMpjn3CKwRyHl9JXHqJ5uVvqXJuSzODVeVkHCi8NbEQek2_FNTfeXfOtGHZkIaMWe1Rq8fLrKFB0nJ7b4mFyOhq1xZJPnCGDFZmgAV2P9IujNFvx1W0WxLQmxIPFvjfVEtJfQ2nydHKFdSDzQxmyqHt_tSzFw4B2YGMkK4MwdcRm-qMQ7tmpaY4UsSgvXBVP6vEf2rWUsxnPe-CXxW8TqhTTzQdRlBXfXJ3fEdLj_x1gKPHI95xgSuYKwEJRYJKwwF8tXrHH3uuA_AqiQRmWzgYQRYwkgH6Qy3Iw9wt5nABJLmEu6tn4mGi_GZzEhMv09qHpuB5QrvJbH7EAP_YdjIRYWGFOz7UBj0YBPeMJL5UZDGAkXwAzRz0SiuOrh3hbGFfIcPEqvTTwXRNHyxFCc0JIo0DjXH_DPVoLYyTI.7yt8Cd0BIK0VDA9Q.dOfHnrLtOh3fNvG5i2VaAFHIk_nR8qp11qsO1y3jx2Ykno2MGGFK3_sI5_8DJUB9zXpVqr0J2Hh54YHXSvcpgS4fh5KTGaJxJXXnqo_CDWHiBi0xUOUlFmf1LoNNWLjfyKI4VgTr9mXcl1EyHnk_hXv6NhY.ZUk77c7_TSpAeY1O2bOFEQ",
    "billing_info": {
        "first_name": "John",
        "last_name": "Smith",
        "phone": "2065551212",
        "email": "john_smith@yopmail.com",
        "address1": "123 Nice St.",
        "address2": "",
        "city": "Newcastle", 
        "state_name": "Washington",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056"
    },
    "handle": "e90fea27-1dab-46be-a1fc-ab35153b478a|4hrNGoxaqrOhZibmfkmX0OOAcPNqQjqZysIc/tIwyk7OlMS8t8qTzv2yPnR2tT5diw==",
    "captcha_token": "03AGdBq26xqxgQ0tRr..."  // Optional
}
```

### Encrypt Card in Node.js

```javascript
import { CompactEncrypt } from 'jose';

/**
* Fetches the payment key from the API
* @returns {Promise<{alg: string, enc: string, kid: string}>}
*/
export async function fetchPaymentKey() {
    const response = await fetch('https://cc.firmly.work/api/v1/payment/key');
    if (!response.ok) {
        throw new Error(`Failed to fetch payment key: ${response.statusText}`);
    }
    return response.json();
}

/**
* Encrypts card data using JOSE's CompactEncrypt format
* @param {Object} cardData - The card data to encrypt
* @param {string} publicKey - The RSA public key in JWK format
* @returns {Promise<string>} The encrypted card data in JWE format
*/
export async function encryptCard(cardData, publicKey) {
    // Convert the card data to a string
    const cardDataString = JSON.stringify(cardData);

    // Create a TextEncoder to convert the string to Uint8Array
    const encoder = new TextEncoder();
    const cardDataBytes = encoder.encode(cardDataString);

    // Create the JWE
    const jwe = await new CompactEncrypt(cardDataBytes)
        .setProtectedHeader({
            alg: 'RSA-OAEP-256', // Key wrapping algorithm
            enc: 'A256GCM',      // Content encryption algorithm
            kid: publicKey.kid   // Key ID from the public key
        })
        .encrypt(publicKey);

    return jwe;
}

// Example usage:

const cardData = {
    "number": "4111111111111111",
    "name": "John Smith",
    "verification_value": "123",
    "month": "08",
    "year": "2030"
};

const publicKey = await fetchPaymentKey();

const encryptedCard = await encryptCard(cardData, publicKey);

console.log('Encrypted card:', encryptedCard);
```

### Encrypt Card in Python

```python
from jwcrypto import jwk, jwe
import json
import requests

def fetch_payment_key():
    """Fetches the payment key from the API"""
    response = requests.get('https://cc.firmly.work/api/v1/payment/key')
    if response.status_code != 200:
        raise Exception(f"Failed to fetch payment key: {response.reason}")
    return response.json()

def encrypt_card(card_data, public_key):
    """
    Encrypts card data using JWE Compact Serialization

    Args:
        card_data (dict): The card data to encrypt
        public_key (dict): The RSA public key in JWK format

    Returns:
        str: The encrypted card data in JWE format
    """
    # Convert card data to string
    payload = json.dumps(card_data)

    # Create JWE header
    header = {
        "alg": "RSA-OAEP-256",
        "enc": "A256GCM",
        "kid": public_key["kid"]
    }

    # Create JWE token
    token = jwe.JWE(
        payload.encode('utf-8'),
        recipient=jwk.JWK(**public_key),
        protected=header
    )

    # Encrypt and serialize
    return token.serialize(compact=True)

# Example usage:
card_data = {
    "number": "4111111111111111",
    "name": "John Smith", 
    "verification_value": "123",
    "month": "08",
    "year": "2030"
}

public_key = fetch_payment_key()
encrypted_card = encrypt_card(card_data, public_key)
print('Encrypted card:', encrypted_card)
```


## HTTP Request

`POST /api/v3/payment/complete-order`


## Authentication

This API requires a [`Device Authentication`](/firmly-api/quickstart/authentication/).


## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Token returned by [Browser Session](/firmly-api/api/authentication/browser-session/) that identifies client's device.

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
handle | - | The handle retrieved as part of the cart once the shipping info is added.
billing_info | - | Address and contact information for billing.
encrypted_card | - | The complete credit card object encrypted using JWE with the public key from Get Public Key API.
captcha_token | - | (Optional) A captcha token for additional security when required by the merchant.

## Response Format

`Content-Type: application/json`

Returns a Firmly [`Order`](#order-model).

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
MissingTaxSync | 412 | The taxes are not synced yet. Please refresh the cart and try again.
NoLineItemError | 412 | Cart does not have any line item. Add an item at least and try again.
CheckoutError | 412 | Payment info or billing address invalid.
MissingShippingMethod | 412 | Shipping method needs to be set.
MissingEmailAddressOnCheckout | 412 | Missing email address during checkout phase.
UserMustLogin | 409 | This merchant requires the user to be logged in at this step.
MissingEmail | 412 | Missing email address.
CreditCardInsufficientFunds | 422 | Insufficent funds.
CreditCardDeclined | 422 | Credit card declined
CreditCardInvalidNumber | 422 | Credit card number is invalid.
CreditCardInvalidExpiry | 422 | Credit card expiry date is invalid.
CreditCardInvalidSecurityCode | 422 | Credit card security code is invalid.
StoreUnavailable | 503 | Store temporarily unavailable. Please try again later.

See [Errors](/firmly-api/errors/) for more information.


## Sample Request

curl example:

```bash
curl \
  --location \
  --request POST 'https://cc.firmly.work/api/v3/payment/complete-order' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "encrypted_card": "eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIiwia2lkIjoidjEifQo=.N9_nfGUY8fUXyLZ32WVfR51zGjL-MTpNUPuSXwN8K7tGtNZICf9PpU6zOuX1bc0bCg6NVzVtHYeNWTZNe9MpHvbwLKhd8aaQQOGw1U2IpYbjSrQ6g29QYV1_rnEPwTeqb7L23IocO_hb9vBV_NmrIsFKuYAgUX0yZqNcBqxnxk5wX2sQhqW7jjOgR5kHfkKBpCKGVeYnUCIW8WpYCVdYAuCdXED7lKQ22VGaIMJn8rLpfMTZpdGHQZmE6xuS04hmMpjn3CKwRyHl9JXHqJ5uVvqXJuSzODVeVkHCi8NbEQek2_FNTfeXfOtGHZkIaMWe1Rq8fLrKFB0nJ7b4mFyOhq1xZJPnCGDFZmgAV2P9IujNFvx1W0WxLQmxIPFvjfVEtJfQ2nydHKFdSDzQxmyqHt_tSzFw4B2YGMkK4MwdcRm-qMQ7tmpaY4UsSgvXBVP6vEf2rWUsxnPe-CXxW8TqhTTzQdRlBXfXJ3fEdLj_x1gKPHI95xgSuYKwEJRYJKwwF8tXrHH3uuA_AqiQRmWzgYQRYwkgH6Qy3Iw9wt5nABJLmEu6tn4mGi_GZzEhMv09qHpuB5QrvJbH7EAP_YdjIRYWGFOz7UBj0YBPeMJL5UZDGAkXwAzRz0SiuOrh3hbGFfIcPEqvTTwXRNHyxFCc0JIo0DjXH_DPVoLYyTI.7yt8Cd0BIK0VDA9Q.dOfHnrLtOh3fNvG5i2VaAFHIk_nR8qp11qsO1y3jx2Ykno2MGGFK3_sI5_8DJUB9zXpVqr0J2Hh54YHXSvcpgS4fh5KTGaJxJXXnqo_CDWHiBi0xUOUlFmf1LoNNWLjfyKI4VgTr9mXcl1EyHnk_hXv6NhY.ZUk77c7_TSpAeY1O2bOFEQ",
    "billing_info": {
        "first_name": "John",
        "last_name": "Smith",
        "phone": "2065551212",
        "email": "john_smith@yopmail.com",
        "address1": "123 Nice St.",
        "address2": "",
        "city": "Newcastle", 
        "state_name": "Washington",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056"
    },
    "handle": "e90fea27-1dab-46be-a1fc-ab35153b478a|4hrNGoxaqrOhZibmfkmX0OOAcPNqQjqZysIc/tIwyk7OlMS8t8qTzv2yPnR2tT5diw=="
}'
```

## Sample Response

```json
{
    "platform_id": "merchant_platform",
    "shop_id": "59",
    "cart_id": "30c28ec6-7321-4a61-92ed-8067c59b41e6",
    "line_items": [
        {
            "sku": "42961836507384",
            "base_sku": "7725397508344",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_discount": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "image": {
                "url": "https://cdn.merchant.com/image1_small.jpg?v=1655838064"
            },
            "platform_line_item_id": "fdb139055ad337bfb346326a234cbe05",
            "description": "Junior Smith Daredevil Ski Goggles",
            "variant_description": "Black",
            "line_item_id": "076a6428-6783-45a8-95c6-eacc8bb00fdd"
        }
    ],
    "shipping_info": {
        "first_name": "John",
        "last_name": "Smith",
        "phone": "(206) 555-1212",
        "address1": "123 Nice St",
        "city": "Newcastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056",
        "email": "john@firmly.ai"
    },
    "shipping_method": {
        "sku": "Economy-0.00",
        "description": "Economy",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        },
        "applicable_line_items": []
    },
    "total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_method_options": [
        {
            "sku": "Economy-0.00",
            "description": "Economy",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "Standard-4.90",
            "description": "Standard",
            "price": {
                "currency": "USD",
                "value": 4.9,
                "number": 490,
                "symbol": "$"
           }
        }
    ],
    "platform_order_number": "#1095",
    "app_id": "fdc6e81b-3792-4920-b19b-986c334f3e19",
    "cart_status": "submitted"
}
```
 


---


# Complete Order with Saved Payment from Merchant
This path allows the completion of an order without the need to tokenize the card. This process makes use of an identification number provided by the merchant or platform. By leveraging this identification number, the system can retrieve the necessary payment details directly from the merchant or platform, eliminating the requirement for the user to re-enter their card number.

The saved cards are returned inside `payment_method_options` after the user is logged in through login, wallets path, or during transfer session.

This API places the order on the respective merchant and completes the flow.

Before using this API, first refer to the [`Payment APIs`](/firmly-api/api/payment/). You must tokenize the credit card using Payment APIs before calling this API.

> **Note**
> Alternatively (and firmly recommends), you can tokenize and place the order in a single step by using the [Complete Order with Card v3](/firmly-api/api/payment/complete-order-3/) API, which offers enhanced security through JWE encryption.




## HTTP Request

`POST /api/v1/domains/{{merchant-domain}}/cart/complete-order-with-saved-payment`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website (e.g. mystore.com).


## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
payment_id | - | The payment id from merchant to complete the order.


## Response Format

`Content-Type: application/json`

Returns a firmly [`Order`](#order-model).

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

```json
{
    "payment_id": "card_1NIypHC8WIvDXO6n13o6lrrk"
}
```

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/complete-order-with-saved-payment' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "payment_id": "card_1NIypHC8WIvDXO6n13o6lrrk"
  }'
```

## Sample Response

```json
{
    "platform_id": "ubuyme",
    "shop_id": "59",
    "cart_id": "30c28ec6-7321-4a61-92ed-8067c59b41e6",
    "urls": {
		"thank_you_page": "https://merchant.com/65092026616/checkouts/bc9570c89e37eb21a5578f2cdd5741a3/thank_you?key=ecbe428aebeba1b4a53c86adfb0f44f2"
	},
    "line_items": [
        {
            "sku": "42961836507384",
            "base_sku": "7725397508344",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_discount": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "image": {
                "url": "https://cdn.merchant.com/image1_small.jpg?v=1655838064"
            },
            "platform_line_item_id": "fdb139055ad337bfb346326a234cbe05",
            "description": "Junior Smith Daredevil Ski Goggles",
            "variant_description": "Black",
            "line_item_id": "076a6428-6783-45a8-95c6-eacc8bb00fdd"
        }
    ],
    "shipping_info": {
        "first_name": "John",
        "last_name": "Smith",
        "phone": "(206) 555-1212",
        "address1": "123 Nice St",
        "city": "Newcastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056",
        "email": "john@firmly.ai"
    },
    "shipping_method": {
        "sku": "Economy-0.00",
        "description": "Economy",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        },
        "applicable_line_items": []
    },
    "total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_method_options": [
        {
            "sku": "Economy-0.00",
            "description": "Economy",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "Standard-4.90",
            "description": "Standard",
            "price": {
                "currency": "USD",
                "value": 4.9,
                "number": 490,
                "symbol": "$"
           }
        }
    ],
    "platform_order_number": "#1095",
    "app_id": "fdc6e81b-3792-4920-b19b-986c334f3e19",
    "cart_status": "submitted"
}
```


 


---

# Get Public Key



Retrieve the valid public key for encrypting the payment information before sending to firmly's vault messenger.

## HTTP Request

`GET /api/v1/payment/key?format={{format}}`

## Authentication

This API requires no authentication.

## Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
format | JWK | Determines the key format to be returned. <br/> Valid values are: <br/> * JWK (JSON Web Key) <br/> * PEM (Privacy Enhanced Mail) <br/> * RSA for a PEM using the RSAPublicKey format

## Response Format

### JWK

`Content-Type: application/json`

Parameter | Default | Description
--------- | ------- | -----------
kid | - | The ID/version of the key
kty | - | The type of the key. e.g. RSA
n | - | For RSA keys, this is the modulus component.
e | - | For RSA keys, this is the exponent component.
use | - | The purpose of the key. i.e. enc for encryption.

### PEM or RSA

`Content-Type: plain/text`

The PEM format string will be returned in the response body.
One can find the key id (aka. kid) as part of the response header: `x-firmly-kid`

## Expected Errors
None

## Sample Responses

*Sample response with JWK format (default):*

```json
{
  "kid": "a81b2d581f2a42c09143eb6fdb918fff",
  "kty": "RSA",
  "n": "yURqBPP1k_kwMp8AiHeZya7zgO9ZulKrNvFYcQK2eIvkbl7VlhxYt6bnJ0urrUrJbuM_bbRg3yiwXtAN_BsHWTm6JwWSjRx3PQMIm0Yb-HGj2YM6moJ9YFACqtZB2zjkE98Q_TOhfAnYuoSIPsY3k9U1iJmi6gpaZ7E01QFGoRlAwB55yMETl3UT7uodGLRPBz_JGhRuDCJ1dVEfzcojUxOt7FFbRIGDGQzMTvmskRID3N50z6UwJOFwmP6N17qIMYCbr3IQg0fU75HsL-lChpA8m-EnvK0hL4CcNnBVqupxzhsKq2SSLigNBFC6J4gs3mV7L7qu1Q8u_Cg5tGVZiQ",
  "e": "AQAB",
  "use": "enc"
}
```

*Sample response with RSA format:*

```text
-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAyURqBPP1k/kwMp8AiHeZya7zgO9ZulKrNvFYcQK2eIvkbl7VlhxY
t6bnJ0urrUrJbuM/bbRg3yiwXtAN/BsHWTm6JwWSjRx3PQMIm0Yb+HGj2YM6moJ9
YFACqtZB2zjkE98Q/TOhfAnYuoSIPsY3k9U1iJmi6gpaZ7E01QFGoRlAwB55yMET
l3UT7uodGLRPBz/JGhRuDCJ1dVEfzcojUxOt7FFbRIGDGQzMTvmskRID3N50z6Uw
JOFwmP6N17qIMYCbr3IQg0fU75HsL+lChpA8m+EnvK0hL4CcNnBVqupxzhsKq2SS
LigNBFC6J4gs3mV7L7qu1Q8u/Cg5tGVZiQIDAQAB
-----END RSA PUBLIC KEY-----
```
 


---

# Payment


  <h1 id="payment-apis">Payment APIs</h1><p>The following APIs are used in the payment process.</p>
<ul>
<li><a href=/firmly-api/firmly-checkout-api/payment/complete-order-2/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Complete Order with Card- v2</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/payment/get-public-key/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get Public Key</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/payment/complete-order-with-saved-payment/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Complete Order with Saved Payment</span></a></li>
</ul>


- [Complete Order with Card - v2](/firmly-api/firmly-checkout-api/payment/complete-order-2/index.md)
- [Get Public Key](/firmly-api/firmly-checkout-api/payment/get-public-key/index.md)
- [Complete Order with Saved Payment](/firmly-api/firmly-checkout-api/payment/complete-order-with-saved-payment/index.md)
- [Complete Order with Card - v3](/firmly-api/firmly-checkout-api/payment/complete-order-3/index.md)


---

# Create OTP


Triggers API to create a one time password (OTP).
## HTTP Request

`POST /api/v1/domains/{{merchant-domain}}/session/create-otp`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. mystore.com).

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
email | - | Customer's email.

## Response Format

`Content-Type: application/json`

Parameter | Type | Description
--------- | ------- | -----------
otp_destination | otp_destination.emails otp_destination.phones | Destinations where the OTP was sent.

### OTP Destination Model

Parameter | Type | Description
--------- | ------- | -----------
emails | string[] | Emails that the OTP was sent.
phones | string[] | Phones that the OTP was sent.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/session/create-otp' \
  --header 'Content-Type: application/json' \
  --data-raw '{
      "email": "john@firmly.ai"
  }'
```

## Sample Response 

```json
{
    "otp_destination": {
      "emails": ["john@firmly.ai"],
      "phones": ["1234567"]
    }
}
```
 


---

# Forgot Password

 
Resets the password for the respective merchant, via email.

## HTTP Request

`POST /api/v1/domains/{{merchant-domain}}/session/forgot-password`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website (e.g. mystore.com).

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
email | - | Customer's email.

## Response Format

Returns a HTTP Status Code 200.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/session/forgot-password' \
  --header 'Content-Type: application/json' \
  --data-raw '{
      "email": "john@firmly.ai"
  }'
```
 


---

# Get Active Carts

Gets the active carts for the current session (this applies to the multi-merchant (marketplace context)).

## HTTP Request

`GET /api/v1/carts/active`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authorization | - | Id shared by firmly to identify and map the source of the session.

## Expected Errors
Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
PartnerNotFound | 404 | Credit card was not found using these parameters.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.


## Sample Request
```bash
curl \
  --location \
  --request GET 'https://api.firmly.work/api/v1/carts/active' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json'
```

## Sample Responses
*From above API if there is no active cart:*

```json
{
    "domains": [],
    "carts": []
}
```

*From above API if there is an active cart:*

```json
{
    "domains": [
        "myecomstore.com",
        "staging.luma.gift"
    ],
    "carts": [
        {
            "display_name": "Firmly (Demo)",
            "cart_status": "active",
            "platform_id": "myecomstore",
            "shop_id": "myecomstore.com",
            "cart_id": "0a8eb7a0-3218-4529-9900-9f0878bb3970",
            "urls": {},
            "line_items": [
                {
                    "line_item_id": "2121d03d-76ba-42d0-9701-11e6537bbddf",
                    "sku": "48975383822647",
                    "base_sku": "9564382888247",
                    "quantity": 1,
                    "msrp": {
                        "currency": "USD",
                        "value": 10,
                        "number": 1000,
                        "symbol": "$"
                    },
                    "price": {
                        "currency": "USD",
                        "value": 1,
                        "number": 100,
                        "symbol": "$"
                    },
                    "line_price": {
                        "currency": "USD",
                        "value": 1,
                        "number": 100,
                        "symbol": "$"
                    },
                    "requires_shipping": true,
                    "image": {
                        "type": "large",
                        "url": "https://cdn.myecomstore.com/s/files/1/0878/4704/3383/files/1_large.png?v=1715913166"
                    },
                    "platform_line_item_id": "ab2835c0730ff075261e0a9c002e2518",
                    "description": "Men's White Hoodie",
                    "variant_description": "S"
                }
            ],
            "sub_total": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "tax": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "total": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "payment_method_options": [
                {
                    "type": "CreditCard",
                    "wallet": "user"
                },
                {
                    "type": "PayPal",
                    "wallet": "paypal"
                }
            ],
            "session": {
                "requires_login": false,
                "is_email_registered": false,
                "is_logged_in": false,
                "cookies": [
                    "cart=Z2NwLXVzLXdlc3QxOjAxSlQ; path=/; expires=Sat, 31 May 2025 22:58:03 GMT; SameSite=Lax",
                    "cart_sig=6e9dc88068ad3626124507af8ec87c6e; path=/; expires=Sat, 31 May 2025 22:58:03 GMT; HttpOnly; SameSite=Lax",
                    "cart_currency=USD; path=/; expires=Wed, 14 May 2025 22:58:04 GMT; SameSite=Lax",
                    "checkout_token=%7B%22token%22%3A%22aXpaNml5QnVmZUhBZmR6GkwMkh5VWhUcnd3THZMcnhGV3ZVZz09%22%2C%22locale%22%3A%22en-US%22%2C%22checkout_session_identifier%22%3A%22da8396bca8ebff8464735fa1291d0b77%22%7D; Priority=High; path=/; expires=Wed, 21 May 2025 22:58:03 GMT; secure; HttpOnly; SameSite=Lax"
                ]
            }
        },
        {
            "display_name": "Luma (Staging)",
            "cart_status": "active",
            "platform_id": "magento",
            "shop_id": "staging.luma.gift",
            "shop_properties": {
                "paypal": {
                    "express_enabled": true,
                    "sandbox": true,
                    "merchantId": "CNZHJ67E75RWN",
                    "clientId": "AUZfbDQ_4m8ibp82qV9pi9wxGkGrdGILVYWbWaTWreW9mmTm6LjQorLZxpP7kjymXc7flRnepHBFSQWp"
                }
            },
            "cart_id": "cc1ccaa8-cdd7-4cbb-be91-705a662d3ae7",
            "urls": {},
            "payment_method_options": [
                {
                    "type": "PayPal",
                    "wallet": "paypal"
                }
            ],
            "line_items": [
                {
                    "line_item_id": "4c17ea0a-8179-4264-9adc-924f72dad26b",
                    "sku": "Women-White-Hoodie-Small",
                    "base_sku": "Women-White-Hoodie-Small",
                    "quantity": 1,
                    "requires_shipping": true,
                    "image": {
                        "url": "https://staging.luma.gift/media/catalog/product/w/o/womens-white-1_1.png"
                    },
                    "msrp": {
                        "currency": "USD",
                        "value": 39.99,
                        "number": 3999,
                        "symbol": "$"
                    },
                    "price": {
                        "currency": "USD",
                        "value": 39.99,
                        "number": 3999,
                        "symbol": "$"
                    },
                    "line_price": {
                        "currency": "USD",
                        "value": 39.99,
                        "number": 3999,
                        "symbol": "$"
                    },
                    "platform_line_item_id": "0",
                    "description": "Women's White Hoodie-Small"
                }
            ],
            "session": {
                "requires_login": false,
                "is_email_registered": false,
                "is_logged_in": false,
                "cookies": [
                    "PHPSESSID=b33jtfhiuakr3j55b2kcafvghk; expires=Wed, 30-Apr-2025 23:58:10 GMT; Max-Age=3600; path=/; domain=staging.luma.gift; secure; HttpOnly; SameSite=Lax"
                ]
            },
            "total": {
                "currency": "USD",
                "value": 39.99,
                "number": 3999,
                "symbol": "$"
            },
            "sub_total": {
                "currency": "USD",
                "value": 39.99,
                "number": 3999,
                "symbol": "$"
            },
            "shipping_total": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "tax": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "cart_discount": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        }
    ]
}
```
 


---


# Transfer Session
This API is used to transfer the customer session from the in app webview (IAW) or browser into the firmly backend services. This is required to provide the Dynamic Social Commerce Checkout experience to the customer.

Every merchant requires a different set of information to be transferred. For that reason, an opaque handle is transferred from the injected javascript to this API payload.

For certain merchants, the system needs cookies that are not accessible through the JS interface (httpOnly cookies). Hence, the partner must send the required cookies through the transfer session API along with the opaque handle.

> **Note**
> Logged in customer may require additional changes to the user experience. Please, refer to [Logged In Customer](/firmly-api/miscellaneous/specific-scenarios/logged-in-customer/) for more information.

## HTTP Request

`POST /api/v1/domains/{{merchant-domain}}/session/transfer`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. mystore.com).

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
handle | - | Opaque handle generated by the injected javascript for this customer session.
cookies | - | List of cookie strings as it is received from the set-cookie header.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
MissingRequiredCookie | 400 | Required cookie to perform session transfer is missing.
MissingRequiredHandle | 400 | Required handle to perform session transfer is missing.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
CannotTransferSession | 409 | Required information to perform session transfer is not available.


See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Requests

*Sample `payload` for a guest cart that does not need cookie information.*

```json
{
    "handle": "3a94675ca8535c44bb8c7a6190e6512a7660ad2b"
}
```

*Sample `payload` for a cart of a logged in user that only needs cookie information.*

```json
{
    "handle": "",
    "cookies": [
        "am_auth=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlJ6bFMwRVZycnFWS3duOXRmTnFpVDJQMXFlMGZPWmRiejZWcHVVMFBCTTgifQ.eyJpc3MiOiJHdy1NYWluIiwiaWF0IjoxNjY2MDQxMzE5LCJleHAiOjE2ODE4MDkzMTksInN1YiI6IjMzNDQwOTEwIiwic2NvcGVzIjpbImZ1bGxfbG9naW4iXX0.MzjlGXH-5xLaF6sXWM9oe2gXVhdEKt0lARjgoaCBu4pjJcLphbjMBA28fQCDcSykN2x-y7ls7uxemaMF7Csk26WgjNDhWnWIxEbhVlhUcXXT0IBzIKdh7jzJrabTa_gLu4fEJ4xU90kGHg8EwZxVaXG77FVuODtSB47sBuaarJQM0Oal-dVw8wSJQFrCHO78zAYLR29GWrRXJoG2qo_BAVKfDk8OrqQ2uKzA4mLKTIoPs_zaGqt_Fql6LFjCwHlDFdyet7XK2wNK1spWL2serM3GmXz5SMCex4zWwnidCHkTxr6kQij4V0M0xHmut38cJ1E1rKL3lH9mgUuFxiBIIA; Expires=Tue, 18 Apr 2023 09:15:19 GMT; Domain=merchant.com; Path=/; HttpOnly",
        "AM_CUSTOMER=33410310; Expires=Tue, 18 Apr 2023 09:15:19 GMT; Domain=merchant.com; Path=/, __pdst=658368481ca240db8aef7a24cb1e3860; Expires=Mon, 24 Oct 2022 21:09:37 GMT; Domain=www.merchant.com; Path=/"
    ]
}
```

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/session/transfer' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "handle": "3a94675ca8535c44bb8c7a6190e6512a7660ad2b"
  }'
```

## Sample Response

```json
{
  "platform_id": "merchant_platform",
  "shop_id": "merchant.com",
  "cart_id": "a2925972-ce11-445f-847a-9c327be1cfdf",
  "line_items": [
      {
          "sku": "MAG000037",
          "base_sku": "MAG000037",
          "quantity": 1,
          "price": {
              "currency": "USD",
              "value": 29.95,
              "number": 2995,
              "symbol": "$"
          },
          "line_price": {
              "currency": "USD",
              "value": 29.95,
              "number": 2995,
              "symbol": "$"
          },
          "platform_line_item_id": 0,
          "description": "Bryna (3-Pack)",
          "variant_description": "Bryna (3-Pack)",
          "line_item_id": "f4be4cca-2ee1-4870-96d1-73ec3c785b82"
      }
  ],
  "total": {
      "currency": "USD",
      "value": 32.97,
      "number": 3297,
      "symbol": "$"
  },
  "sub_total": {
      "currency": "USD",
      "value": 29.95,
      "number": 2995,
      "symbol": "$"
  },
  "shipping_total": {
      "currency": "USD",
      "value": 0,
      "number": 0,
      "symbol": "$"
  },
  "tax": {
      "currency": "USD",
      "value": 3.02,
      "number": 302,
      "symbol": "$"
  },
  "cart_discount": {
      "currency": "USD",
      "value": 0,
      "number": 0,
      "symbol": "$"
  },
  "cart_status": "active"
}
```


 


---

# Validate OTP


Validates the one time password (OTP).
## HTTP Request

`POST /api/v1/domains/{{merchant-domain}}/session/validate-otp`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. mystore.com).

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
email | - | Customer's email.
otp | - | OTP number.

## Response Format

`Content-Type: application/json`

Returns a firmly [`Cart`](/firmly-api/schema/schema/#cart).

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidInputBody | 422 | The body is not processable.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidOTP | 401 | The OTP is invalid.
InvalidToken | 400 | JWT token is invalid.
Unauthorized | 401 | Caller is not authorized to make this call.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.
## Sample Request
```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/session/validate-otp' \
  --header 'Content-Type: application/json' \
  --data-raw '{
      "email": "john@firmly.ai",
      "otp": "123456",
  }'
```

## Sample Response

```json
{
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "1e560c27-501e-4f81-bd12-516c3cbe7fba",
    "line_items": [
        {
            "sku": "MAG000037",
            "base_sku": "MAG000037",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 29.95,
                "number": 2995,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 29.95,
                "number": 2995,
                "symbol": "$"
            },
            "platform_line_item_id": 0,
            "description": "Bryna (3-Pack)",
            "variant_description": "Bryna (3-Pack)",
            "line_item_id": "6c47658f-1b48-4a31-908b-a0f4e045b46a"
        }
    ],
    "shipping_info": {
      "first_name": "John",
      "last_name": "Smith",
      "email": "john@firmly.ai",
      "phone": "(206) 555-0000",
      "address1": "123 Nice St",
      "city": "Newcastle",
      "postal_code": "98056",
      "state_or_province": "Washington",
      "country": "United States"
    },
    "shipping_method": {
        "sku": "united_states_continental",
        "description": "3 to 7 days free delivery",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        }
    },
    "shipping_method_options": [
        {
            "sku": "united_states_continental",
            "description": "3 to 7 days free delivery",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "priority_shipping",
            "description": "Priority Shipping",
            "price": {
                "currency": "USD",
                "value": 6.95,
                "number": 695,
                "symbol": "$"
            }
        },
        {
            "sku": "expedited_shipping",
            "description": "Express Shipping",
            "price": {
                "currency": "USD",
                "value": 14.95,
                "number": 1495,
                "symbol": "$"
            }
        }
    ],
    "total": {
        "currency": "USD",
        "value": 32.97,
        "number": 3297,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 29.95,
        "number": 2995,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 3.02,
        "number": 302,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "cart_status": "active"
}
```
 


---

# Session


  <h1 id="session">Session</h1><p>The following APIs are used for working with passwords and getting the active cart:</p>
<ul>
<li><a href=/firmly-api/firmly-checkout-api/session/transfer-session/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Transfer Session</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/session/create-otp/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Create One Time Password (OTP)</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/session/validate-otp/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Validate One Time Password (OTP)</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/session/forgot-password/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Forgot Password</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/session/get-active-carts/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get Active Carts</span></a></li>
</ul>


- [Transfer Session](/firmly-api/firmly-checkout-api/session/transfer-session/index.md)
- [Create OTP](/firmly-api/firmly-checkout-api/session/create-otp/index.md)
- [Validate OTP](/firmly-api/firmly-checkout-api/session/validate-otp/index.md)
- [Forgot Password](/firmly-api/firmly-checkout-api/session/forgot-password/index.md)
- [Get Active Carts](/firmly-api/firmly-checkout-api/session/get-active-carts/index.md)


---


# Get Shipping Methods
Gets the shipping methods available for the current cart/session.

## HTTP Request

`GET /api/v1/domains/{{merchant-domain}}/cart/shipping-rates`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. mystore.com)

## Response Format

`Content-Type: application/json`

The response is a list of [`Shipping Methods`](#shipping-method).

## Expected Errors
Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
PartnerNotFound | 404 | Credit card was not found using these parameters.
MissingShippingInfo | 412 | Shipping info needs to be set.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

```bash
curl \
  --location \
  --request GET 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/shipping-method'
```

## Sample Response

```json
[
    {
        "sku": "united_states_continental",
        "description": "3 to 7 days free delivery",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        }
    },
    {
        "sku": "priority_shipping",
        "description": "Priority Shipping",
        "price": {
            "currency": "USD",
            "value": 6.95,
            "number": 695,
            "symbol": "$"
        }
    },
    {
        "sku": "expedited_shipping",
        "description": "Express Shipping",
        "price": {
            "currency": "USD",
            "value": 14.95,
            "number": 1495,
            "symbol": "$"
        }
    }
]
```


 


---


# Set Shipping Info

Sets the shipping address information to the current cart/session. 

By default, the lowest cost shipping method is automatically selected if, and only if, you did not previously set the shipping method. In that case, the previously selected shipping method is persisted.


## HTTP Request

`POST /api/v1/domains/{{merchant-domain}}/cart/shipping-info`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. mystore.com).

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
first_name | - | Customer's first name.
last_name | - | Customer's last name.
email | - | Customer's email.
phone | - | Customer's phone number.
address1 | - | Shipping address line 1 (number and street name).
address2 | - | Shipping address line 2 (e.g. floor, apt, etc.).
city | - | Shipping address city.
postal_code | - | Shipping address postal code.
state_or_province | - | Shipping address state.
country | - | Shipping address country.

## Response Format

`Content-Type: application/json`

Returns a firmly [`Cart`](/firmly-api/data-model/parameters/#cart) with shipping info included.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
ShippingNotNeeded | 400 | You don't have any items that require shipping.
CountryNotSupported | 412 | We don't currently support this country/region. Enter a new address and try again.
InvalidState | 400 | This state is not valid for the given country.
MultipleDiscountCodesNotSupported | 409 | This store does not support multiple discount codes.
CartNotFound | 404 | Cart was not found.
InvalidShippingInfo | 400 | The shipping info provided is not valid.
InvalidInputBody | 422 | The body is not processable.
ErrorInvalidEmail | 400 | Email provided is invalid.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request
*The `payload` must have the following format/attributes:*

```json
{
  "first_name": "John",
  "last_name": "Smith",
  "email": "john@firmly.ai",
  "phone": "(206) 555-0000",
  "address1": "123 Nice St",
  "city": "Newcastle",
  "postal_code": "98056",
  "state_or_province": "Washington",
  "country": "United States"
}
```

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/shipping-info' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "first_name": "John",
    "last_name": "Smith",
    "email": "john@firmly.ai",
    "phone": "(206) 555-0000",
    "address1": "123 Nice St",
    "city": "Newcastle",
    "postal_code": "98056",
    "state_or_province": "Washington",
    "country": "United States"
  }'
```

## Sample Response

```json
{
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "1e560c27-501e-4f81-bd12-516c3cbe7fba",
    "line_items": [
        {
            "sku": "MAG000037",
            "base_sku": "MAG000037",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 29.95,
                "number": 2995,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 29.95,
                "number": 2995,
                "symbol": "$"
            },
            "platform_line_item_id": 0,
            "description": "Bryna (3-Pack)",
            "variant_description": "Bryna (3-Pack)",
            "line_item_id": "6c47658f-1b48-4a31-908b-a0f4e045b46a"
        }
    ],
    "shipping_info": {
      "first_name": "John",
      "last_name": "Smith",
      "email": "john@firmly.ai",
      "phone": "(206) 555-0000",
      "address1": "123 Nice St",
      "city": "Newcastle",
      "postal_code": "98056",
      "state_or_province": "Washington",
      "country": "United States"
    },
    "shipping_method": {
        "sku": "united_states_continental",
        "description": "3 to 7 days free delivery",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        }
    },
    "shipping_method_options": [
        {
            "sku": "united_states_continental",
            "description": "3 to 7 days free delivery",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "priority_shipping",
            "description": "Priority Shipping",
            "price": {
                "currency": "USD",
                "value": 6.95,
                "number": 695,
                "symbol": "$"
            }
        },
        {
            "sku": "expedited_shipping",
            "description": "Express Shipping",
            "price": {
                "currency": "USD",
                "value": 14.95,
                "number": 1495,
                "symbol": "$"
            }
        }
    ],
    "total": {
        "currency": "USD",
        "value": 32.97,
        "number": 3297,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 29.95,
        "number": 2995,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 3.02,
        "number": 302,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "cart_status": "active"
}
```


 


---


# Set Shipping Method

Sets the shipping method for the current cart/session.  

## HTTP Request

`POST /api/v1/domains/{{merchant-domain}}/cart/shipping-method`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website (e.g. mystore.com).

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
shipping_method | - | Shipping method code.

## Response Format

`Content-Type: application/json`

Returns a firmly [`Cart`](/firmly-api/schema/schema/#cart) with shipping method included.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
MissingShippingInfo | 412 | Shipping info needs to be set.
InvalidShippingMethod | 400 | Invalid shipping method.
NoLineItemError | 412 | Cart does not have any line item. Add an item at least and try again. 
MultipleDiscountCodesNotSupported | 409 | This store does not support multiple discount codes.
UnprocessableEntity | 422 | The given payload has unprocessable, invalid or non-existent data. Please check the data and try again.
CartNotFound | 404 | Cart was not found.
TooManyRetries | 429 | Given request is not available. Retry changing the parameters or try again later.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Request

*The `payload` must have the following format/attributes:*

```json
{
  "shipping_method": "united_states_continental"
}
```

```bash
curl \
  --location \
  --request POST 'https://api.firmly.work/api/v1/domains/{{merchant-domain}}/cart/shipping-method' \
  --header 'x-firmly-authorization: <>' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "shipping_method": "united_states_continental"
  }'
```

## Sample Response

```json
{
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "1e560c27-501e-4f81-bd12-516c3cbe7fba",
    "line_items": [
        {
            "sku": "MAG000037",
            "base_sku": "MAG000037",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 29.95,
                "number": 2995,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 29.95,
                "number": 2995,
                "symbol": "$"
            },
            "platform_line_item_id": 0,
            "description": "Bryna (3-Pack)",
            "variant_description": "Bryna (3-Pack)",
            "line_item_id": "6c47658f-1b48-4a31-908b-a0f4e045b46a"
        }
    ],
    "shipping_info": {
      "first_name": "John",
      "last_name": "Smith",
      "email": "john@firmly.ai",
      "phone": "(206) 555-0000",
      "address1": "123 Nice St",
      "city": "Newcastle",
      "postal_code": "98056",
      "state_or_province": "Washington",
      "country": "United States"
    },
    "shipping_method": {
        "sku": "united_states_continental",
        "description": "3 to 7 days free delivery",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        }
    },
    "shipping_method_options": [
        {
            "sku": "united_states_continental",
            "description": "3 to 7 days free delivery",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "priority_shipping",
            "description": "Priority Shipping",
            "price": {
                "currency": "USD",
                "value": 6.95,
                "number": 695,
                "symbol": "$"
            }
        },
        {
            "sku": "expedited_shipping",
            "description": "Express Shipping",
            "price": {
                "currency": "USD",
                "value": 14.95,
                "number": 1495,
                "symbol": "$"
            }
        }
    ],
    "total": {
        "currency": "USD",
        "value": 32.97,
        "number": 3297,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 29.95,
        "number": 2995,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 3.02,
        "number": 302,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "cart_status": "active"
}
```


 


---

# Shipping


  <h1 id="shipping-apis">Shipping APIs</h1><p>The following APIs are used in the shipping process.</p>
<ul>
<li><a href=/firmly-api/firmly-checkout-api/shipping/set-shipping-info/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Set Shipping Info</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/shipping/get-shipping-methods/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get Shipping Methods</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/shipping/set-shipping-method/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Set Shipping Method</span></a></li>
</ul>


- [Set Shipping Info](/firmly-api/firmly-checkout-api/shipping/set-shipping-info/index.md)
- [Get Shipping Methods](/firmly-api/firmly-checkout-api/shipping/get-shipping-methods/index.md)
- [Set Shipping Method](/firmly-api/firmly-checkout-api/shipping/set-shipping-method/index.md)


---


# Complete Unlocking Wallet
The "Complete Unlocking Wallet" API is the second step following the initial "Start Unlocking Wallet" process. This API enables the user to gain access to their payment method options and addresses stored within their unlocked wallet. By providing the necessary cookies and access token, the user can securely access and utilize their wallet's payment methods and addresses on supported online stores. This API facilitates a seamless integration between the unlocked wallet and the participating merchants, allowing users to conveniently make payments and utilize their wallet's features for a smooth shopping experience.



The response from the "Complete Unlocking Wallet" API call includes essential information for the user's convenience and secure usage of the unlocked wallet. The response contains the available shipping options, payment options, and an access token. These details provide the user with a comprehensive overview of the available choices and enable them to proceed with their desired transactions seamlessly.

Additionally, the API response sets necessary cookies that are required for utilizing the unlocked wallet on various online shopping carts. These cookies serve as identifiers and store relevant session information, ensuring a consistent and personalized experience for the user while interacting with the wallet across different merchant platforms.

By including shipping options, payment options, an access token, and setting cookies, the "Complete Unlocking Wallet" API response streamlines the user's shopping experience, offering them a wide range of choices and preserving their preferences as they navigate through supported online stores.


## HTTP Request

`POST /api/v1/wallets/{{wallet-name}}/unlock-complete`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
wallet-name | - | -

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
email | - | User's email.
hcaptcha_token | - | hcaptcha token generated through the ui. It may be required for some wallets.


## Response Format

`Content-Type: application/json`

Parameter | Default | Description
--------- | ------- | -----------
access_token | - | Token used for tokenizing cards using existing payment methods for a cart.
payment_method_options | - | List of cards available for the logged in user.
shipping_info_options | - | List of addresses available for the logged in user.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
Unauthorized | 401 | Caller is not authorized to make this call.
PaymentMethodNotAvailable | 409 | The payment method is not available. Please choose a different one or try again later.
LoginFailed | 409 | An error occurred during login. Please try to login again.
InvalidOtp | 401 | The OTP is invalid.
WalletProviderNotFound | 404 | The wallet provider does not exit.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Requests 
```json
{
    "otp": "830178",
    "access_token": "accesstokenfromstep1"
}
```


```bash
curl 'https://api.firmly.work/api/v1/wallets/shoppay/unlock-complete' \
  -H 'content-type: application/json' \
  -H 'x-firmly-authorization: <>' \
  --data-raw '{
    "otp": "830178",
    "access_token": "accesstokenfromstep1"
  }'
```

## Sample Response
*As shown in the following example, two values are received to continue the unlock flow: payment_method_options and shipping_info_options:*


```json
{
    "payment_method_options": [
        {
            "type": "CreditCard",
            "art": "",
            "id": "238716156",
            "wallet": "shoppay",
            "last_four": "2834",
            "month": 11,
            "year": 2029,
            "card_type": "visa",
            "billing_info": {
                "first_name": "tester",
                "last_name": "tester",
                "address1": "21530 Northeast 9th Place",
                "address2": "",
                "city": "North Miami Beach",
                "state_or_province": "FL",
                "state_name": "Florida",
                "postal_code": "33162",
                "country": "United States",
                "phone": "+111115555555"
            }
        },
        {
            "type": "CreditCard",
            "art": "",
            "id": "272168524",
            "wallet": "shoppay",
            "last_four": "0465",
            "month": 5,
            "year": 2028,
            "card_type": "visa",
            "billing_info": {
                "first_name": "tester",
                "last_name": "tester",
                "address1": "12334 126th Southeast",
                "address2": "",
                "city": "Newcastle",
                "state_or_province": "WA",
                "state_name": "Washington",
                "postal_code": "98056",
                "country": "United States",
                "phone": "+111115555555"
            }
        }
    ],
    "shipping_info_options": [
        {
            "first_name": "Tester",
            "last_name": "Tester",
            "phone": "+11111555555",
            "address1": "7367 126th Place Southeast",
            "address2": "",
            "city": "newcastle",
            "state_or_province": "WA",
            "country": "US",
            "postal_code": "98056",
            "email": "tester@firmly.ai"
        }
    ],
    "access_token": "accessToken"
}
```
 


---

# Start Unlocking Wallet
This path initiates the unlocking process for the requested wallet service. When a user desires to access a specific wallet, such as the "shoppay" wallet, this API call is made, requiring specific parameters to commence the unlocking procedure. These parameters typically include the necessary authentication and authorization details, along with any additional information specific to the unlocking mechanism. By invoking this path, the user can begin the unlocking process for their desired wallet service, enabling them to access the functionalities of that wallet, such as payment method options and addresses.



## HTTP Request

`POST /api/v1/wallets/{{wallet-name}}/unlock-start`

## Authentication

This API requires a [`Device Authentication`](/firmly-api/getting-started/authentication-overview/).

## Header Parameters

Parameter | Default | Description
--------- | ------- | -----------
x-firmly-authentication | - | Id shared by firmly to identify and map the source of the session.

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
wallet-name | - | -

## Payload Parameters

Parameter | Default | Description
--------- | ------- | -----------
email | - | User's email
hcaptcha_token | - | hcaptcha token generated through the ui. It may be required for some wallets.


## Response Format

`Content-Type: application/json`

Parameter | Default | Description
--------- | ------- | -----------
otp_destination | otp_destination.emails otp_destination.phones | List of emails or phones where the otp code was received.
access_token | - | Token needed for the current session. It needs to be used for completing the wallet unlock.

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidToken | 400 | JWT token is invalid.
Unauthorized | 401 | Caller is not authorized to make this call.
PaymentMethodNotAvailable | 409 | The payment method is not available. Please choose a diferent one or try again later.
InvalidKey | 409 | The key used for encryption in this request does not exist or is no longer valid.
BadRequest | 400 | Request Syntax is not correct.
WalletProviderNotFound | 404 | The wallet provider does not exit.
WalletNotFound | 404 | This email or phone number does not have a wallet from this provider.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.

## Sample Requests

```json
{
    "email": "example@tester.com",
    "hcaptcha_token": "atokenexample"
}
```


```bash
curl 'https://api.firmly.work/api/v1/wallets/shoppay/unlock-start' \
  -H 'content-type: application/json' \
  -H 'x-firmly-authorization: <>' \
  --data-raw '{"email":"tester@tester.com","hcaptcha_token":"anexampleforhcaptcha"}'
```

## Sample Response

```json
{
	"access_token": "e90fea27-1dab-46be-a1fc-ab35153b478a|rzQfhtqmmD3l9dAzv2UbRR0pEkzS7cTtW9Jz4TmZ3RZi1F5R7Mnohf6HgK9PhyfuBJvLgmXtujCqJr0ksx276DiqD50cIPgcMpf8fp9wCsWiZDzlwYi59YmNu9pJfehuBY0ix5cCG4AGUJL6/Etmn1PwOWF01w9umJkIZ60XCX+qg0VAklTjiHyU0SfF5GYpfLfq+7ksNN2e6v5AavyAwzp/gfEELJg/reWluFLD6hXmYqWfcgQceWfnECPoaOeAMreVtGaualUDehFIjZNJ+hzkPSSj15b9VX4qnzlyMTszirtsUGIcHiaKiFEH5JaKI3tYuT8F7/uYwf6VXNUbYrEwpC2yDQIGZ1lMme7q+g2q3c9Yi6yXslmp/aZfOSSnGpGExCnx/tcu171vRRG/SWR4ys8dImS8eZSEk85xhlqc8CcLFhD2iafgEHSqQ7HEPdxmbrHfg8rCt8f+oYS+zX8OOkhLTO89Z4WNldbJtfSQlohHxlDly1AQ7WMneSwnKcQgjLxpAB09zD8jX5kxdnTgAlu15FY1oty64Ut7nk5v4jmEgLiYOQ5disJuoiyTMweWfUoH7RLv1Ugb3aONgTlpQ9v/bkWGLrIZd6q44Y48etMyvZotLi+jZ5+t+V4bf1T6P4frt1qGuBbXQewZGKHJQGL0683JtEy3N/7xACUIHCkEQZMmYhUq0COT0Z43YYEU30GGHpHoNeNVAFN+23WSbEDT3iz5NgwnKesqkpAlEPqKbQhinRfQiYwccZvzcq4Kqah/mYmyDfyPsdGEX0RLtxml2YD4HkJPNcVsdv1aqp829ArDI0vTto3/wIqgiTRCw0x8MKupoz+x//gkxLFwur+W2ABuQNNZodxLPy4VkQ6y15r43d9iZUb5Y5cP1VeUQwyArA+U0gkefMBfaLLsyirD9a38fuqcTSsVEG8MWT77IgRbXEOGrGvzHmXC9iTmXvNedfUfATQUWg0kTjrmPdAOchykLaAZRNTsjSCyFbYQK3LaIg0j+bg+GMsKce9ZqMTFODiQ8yVyINpjGu118+KqH1Ij7xbEXuwpJPJ0ax0qp2RZiST7fxVwGIPsfWay3+PP",
	"otp_destination": {
		"phones": ["(••) •••••-•622"]
	}
}
```
In the sample response above, two values are received to continue the unlock flow.

`otp_destination` is an array containing the phone numbers and email addresses to which the one-time password (OTP) was sent. This information is useful for tracking and verifying the delivery of the OTP, ensuring that it reaches the intended recipients. By including the OTP destination details in the response, the system allows for transparency and facilitates any necessary troubleshooting related to OTP delivery.

`access_token` is a token that serves as an authentication mechanism and is required for subsequent requests related to the unlocking process. It acts as a form of authorization, enabling the user or the system to access and interact with the unlocked wallet service. This access token must be included in the header or parameters of the following requests to ensure a successful and authorized continuation of the unlocking process.

By providing both the OTP destination and the access token, the system ensures secure and controlled access to the requested wallet service while maintaining effective communication regarding OTP delivery.
 


---

# Wallet


  <h1 id="wallet-apis">Wallet APIs</h1><p>The following APIs are used to unlock a customer wallet for payment.</p>
<ul>
<li><a href=/firmly-api/firmly-checkout-api/wallet/start-unlocking-wallet/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Start Unlocking Wallet</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/wallet/complete-unlocking-wallet/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Complete Unlocking Wallet</span></a></li>
</ul>


- [Start Unlocking Wallet](/firmly-api/firmly-checkout-api/wallet/start-unlocking-wallet/index.md)
- [Complete Unlocking Wallet](/firmly-api/firmly-checkout-api/wallet/complete-unlocking-wallet/index.md)


---

# firmly Checkout API Reference


  <h1 id="firmly-checkout-apis">firmly Checkout APIs</h1><p>The following APIs are used in the process of checking out from a merchant website.</p>
<ul>
<li><a href=/firmly-api/firmly-checkout-api/authentication/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Authentication</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/payment/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Payment</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/session/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Session</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/coupon/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Coupon</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/shipping/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Shipping</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/express-checkout/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Express Checkout</span></a></li>
<li><a href=/firmly-api/firmly-checkout-api/wallet/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Wallet</span></a></li>
</ul>


- [Authentication](/firmly-api/firmly-checkout-api/authentication/index.md)
- [Payment](/firmly-api/firmly-checkout-api/payment/index.md)
- [Session](/firmly-api/firmly-checkout-api/session/index.md)
- [Coupon](/firmly-api/firmly-checkout-api/coupon/index.md)
- [Shipping](/firmly-api/firmly-checkout-api/shipping/index.md)
- [Consent](/firmly-api/firmly-checkout-api/consent/index.md)
- [Express Checkout](/firmly-api/firmly-checkout-api/express-checkout/index.md)
- [Wallet](/firmly-api/firmly-checkout-api/wallet/index.md)


---



# Authentication Overview
There are four types of authentication:

Key	Type                  | Type     | Owner       | Purpose
------------| ------| -------- |------------
Application Identifier | Public | Partner | Pass the partner's public key (provided by firmly) with the browser-session API to retrieve an access_token. This token will be given to the customer during the checkout flow.
Device authentication | Private	| Customer | Uses the key given by the partner on the line above to call checkout APIs.
Application Authentication	| Private | Partner	| Used on APIs that are not in the checkout flow, but give information to the partner that should not be made public to the customer or other partners (such as the get-available-merchants API, which retrieves the integrated merchants for the partner).
Session Token | Public	| Customer | When device authentication is not possible, firmly will provide a session token that can be used to retrieve the access_token. The session token can be traded for the access_token only once. After that, the session token is invalidated.


 


---


# Add an Item to Cart and Place the Order

The following procedure demonstrates how to place an order by adding an item to the cart using our APIs. Before you start, you first need to authorize the browser session.

In this example. You'll learn how to:

 * [authorize the browser session](/firmly-api/getting-started/integration-examples/start-cart-add-item/#1-authorize-browser-session)
 * [add an item to create a cart](/firmly-api/getting-started/integration-examples/start-cart-add-item/#2-add-item-to-cart)
 * [set the shipping address](/firmly-api/getting-started/integration-examples/start-cart-add-item/#3-set-shipping-address)
 * [tokenize card data](/firmly-api/getting-started/integration-examples/start-cart-add-item/#4-tokenize-card-data)
 * [complete the order](/firmly-api/getting-started/integration-examples/start-cart-add-item/#5-complete-the-order)

## Prerequisites
Before you get started, ensure you have the following:
- `x-firmly-app-id` shared by firmly

## 1. Authorize Browser Session
To authorize the browser session or device session use the [Browser Session API](/firmly-api/firmly-checkout-api/authentication/browser-session/).

*Browser Session Sample Request*

```bash
curl --location --request POST 'https://api.firmly.work/api/v1/browser-session' \
--header 'x-firmly-app-id: <app-id>' \
--data ''
```


*Browser Session Sample Response*

```json
{
    "device_created": false,
    "access_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImY1NGMzYjc4ZDc0NjQ2MzQ4NWIzMjM2MjUzOWYyMWYwIn0.eyJkZXZpY2VpZCI6IjAyOGU5OTY1LThjNzUtNDVlOS1iZmY2LTFkOTVlY2ZkMDQ5MSIsImFwcGlkIjoiYjUzZmQ1Y2YtMzQ1Zi00NzFmLWJjYTUtNmMzNzY1YzE5MTdlIiwic3ViIjoiRGV2ZWxvcGVyIiwiZW52IjoiZGV2IiwiaWF0IjoxNjkwODA5MjI5LCJleHAiOjE2OTA4MTI4Mjl9.P26KkZWJgDPF3aRqF43x3rGmy7Z-wsSxdUTlczxLCgu91uQ5f-YiNGJ9aJWP4G1Lt0OwZVGYL8KJlX0J0XAMr3BTVK3gxcFnRijeIwhzBstn9CnH6AmysXXfPLO4t2aqDD7UwGw5C-6IsE-uc76F5Io5NZizABShI_9Ahuxi26sFPDzHkKKXbi7AKQMmB_9BQ3YDCQO-9koKI-zxfO39AtBmjL0ihjNryhpW2V4zWSbBnZEIsATbA4rYBrVXbRDfHbGu8IeZqs9prHyMpKJz_yPqfDJW9g9hWVU0xUYS0iB7MNNFj8rwwtvdyCUTQnFZtVXIG7RgTFN4wBolY3v_Ag",
    "expires_in": 3600,
    "expires": 1690812829,
    "device_id": "028e9965-8c75-45e9-bff6-1d95ecfd0491"
}
```

*`access_token` value will be used for `x-firmly-authorization` value.*



## 2. Add Item to Cart
Once the browser session is authorized, use the [Add Item to Cart API](/firmly-api/firmly-cart-api/add-item-to-cart/) to add items to the cart. This will create a new cart or update an existing one.


*Sample Request (where `variant-id` is the sku for the item). In this example the sku is `42961853841656`:*

```bash
curl 'https://api.firmly.work/api/v1/domains/merchant.com/cart/line-items/{{variant-id}}/quantity/1' \
  -H 'x-firmly-authorization: <x-firmly-authorization>'
```

*Sample Response from above request:*

```json
{
    "cart_status": "active",
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "d065bec3-0a1e-44b4-abe5-b91929be79a2",
    "urls": {},
    "line_items": [
        {
            "line_item_id": "fbe9a03f-00a4-4765-9a9f-435b728bb669",
            "sku": "42961853841656",
            "base_sku": "7725400785144",
            "quantity": 1,
            "msrp": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.merchant.com/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_small.webp?v=1655838389"
            },
            "platform_line_item_id": "0d3654f857dac73d67a1c4c4a9ad313e",
            "description": "Clip-in hair extensions #1 jet black.",
            "variant_description": "16\" / Classic"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        },
        {
            "type": "PayPal",
            "wallet": "paypal"
        },
        {
            "type": "ShopPay",
            "wallet": "shoppay"
        }
    ]
}
```

## 3. Set Shipping Address
With the cart obtained from Step 2, use the [Set Shipping Info API](/firmly-api/firmly-checkout-api/shipping/set-shipping-info/) to set the shipping address for the order. The API will automatically select the lowest cost available shipping method for the cart.

*Sample Request:*

```bash
curl 'https://api.firmly.work/api/v1/domains/merchant.com/cart/shipping-info' \
  -H 'x-firmly-authorization: <x-firmly-authorization>' \
  --data-raw '{"email":"tester@tester.com","phone":"12364567890","address1":"7367 126th PL SE","address2":" ","city":"NewCastle","country":"United States","first_name":"John","last_name":"Doe","postal_code":"98056","state_or_province":"Washington"}'
```

*Sample Response:*

```json
{
    "cart_status": "active",
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "d065bec3-0a1e-44b4-abe5-b91929be79a2",
    "urls": {},
    "line_items": [
        {
            "line_item_id": "fbe9a03f-00a4-4765-9a9f-435b728bb669",
            "sku": "42961853841656",
            "base_sku": "7725400785144",
            "quantity": 1,
            "msrp": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.merchant.com/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_small.webp?v=1655838389"
            },
            "platform_line_item_id": "0d3654f857dac73d67a1c4c4a9ad313e",
            "description": "Clip-in hair extensions #1 jet black.",
            "variant_description": "16\" / Classic"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0.11,
        "number": 11,
        "symbol": "$"
    },
    "total": {
        "currency": "USD",
        "value": 1.11,
        "number": 111,
        "symbol": "$"
    },
    "shipping_method_options": [
        {
            "sku": "Economy-0.00",
            "description": "Economy: 5 to 8 business days",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "Standard-4.90",
            "description": "Standard: 3 to 4 business days",
            "price": {
                "currency": "USD",
                "value": 4.9,
                "number": 490,
                "symbol": "$"
           }
        }
    ],
    "shipping_method": {
        "sku": "Economy-0.00",
        "description": "Economy: 5 to 8 business days",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        }
    },
    "shipping_info": {
        "first_name": "John",
        "last_name": "Doe",
        "phone": "12364567890",
        "address1": "7367 126th PL SE",
        "city": "NewCastle",
        "state_or_province": "WA",
        "state_name": "Washington",
        "country": "United States",
        "postal_code": "98056",
        "email": "tester@tester.com"
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        },
        {
            "type": "PayPal",
            "wallet": "paypal"
        },
        {
            "type": "ShopPay",
            "wallet": "shoppay"
        }
    ],
    "payment_handle": "e90fea27-1dab-46be-a1fc-ab35153b478a|7MKbEEipeJO4h8SohZbSDHZ2Ic6hGVscesqO8bf1rpp/vUot01ucfWhSt9u6zabZIQr1Ua1yhUz+BgBag5j2zRbd9euOBkXDPuvqxFVUVbXyEfiygWCrpthXZfH0eh4O/vfpIeoKSEsxraIgfc73tUByK9Xw8LF1X2NAzwSRTGMWH6kg64gSYtVZhVBWY3nUpiXM1XKRtovsUz0YsTLmzVRJc6ABG9rAZ3cS3QIgLmXnog8X41bItGWI2QleZxQeJJlMntLnwn4taGIryafXgh1EXQD3lMMrjhI9Jtwga1sp6J+u8KviBUVpu/7kx3kLq2tVjT4mqjngCsBmScl7Buo5m1OSfYFXxglM"
}
```

*Store the `payment_handle` response to be used on next step:*

## 4. Tokenize Card Data
To tokenize the card data securely, first use the [Get Public Key API](/firmly-api/firmly-checkout-api/payment/get-public-key/) to fetch the encryption keys needed for tokenization. Then, follow the example provided to tokenize the card data before sending it using the tokenize API.

*I - Get public key to tokenize*

```bash
curl \
  --location \
  --request GET 'https://cc.firmly.work/api/v1/payment/key'
```

*I - Response Example - Store it as `publicKeyJson`*

```json
{
	"kid": "2bfc2392ba1d4a9686845da80bf477de",
	"kty": "RSA",
	"n": "s7X0oaoXcSjlUWR1vmhufa_PuMs0z80uQ8256BisgSro8Fln5IdSjMN48_hneGEmxUIdx7C3GTYhFcw4FxYZ8bK-bb_jKOyeesZAa_-P0lK_o-YNCbftVuv3anoYdnal1X0hQCc22vsi3zLYTl8MV4v1ygEk5Zx4Bw6q_6iaGnKd6kVJI5ZFz2of3zpgx45koxyxAZbQofQ9unnUMwU5XaQFjAtt1nxTzPXkgiSsu89Iu38AZKvXXqXY89Sujtwl9IM8BS6q2Piskrb8vQ0rxz1lwE8eymP00SnZPcaeaIPtmaJgr7VpPewPdTEULP7bqlJ9gVtsv0skN4GQi5tGuQ",
	"e": "AQAB",
	"use": "enc"
}
```

*II - Prepare payload (Example using Javascript on Client Side)*

```javascript
 let inputPayload = {
        credit_card: {
          number: '4111111111111111',
          name: 'John Doe',
          month: 12,
          year: 2031,
          verification_value: '123'
        },
        billing_info: {
          first_name: 'Tester',
          last_name: 'Tester',
          phone: '555-555-1234',
          address1: '123 NY State Thruway',
          city: 'New York',
          state_or_province: 'New York',
          country: 'United States',
          postal_code: '10001',
          email: 'tester@tester.com'
        }
    };
```

*III. Encrypt the payload*

```javascript
    const crypto = require('crypto');

    const publicKey = crypto.createPublicKey({
        key: publicKeyJson, // From response example above
        format: 'jwk'
    });
    // 1. Generate a random AES Key
    const aesKey = crypto.randomBytes(32);
    // 2. Generate a random AES IV
    const aesIV = crypto.randomBytes(16);
    // 3. Encrypt the serialized source payload and encode it with Base64
    const cipher = crypto.createCipheriv('aes-256-gcm', aesKey, aesIV);
    let data = cipher.update(JSON.stringify(inputPayload), 'utf-8', 'base64');
    data += cipher.final('base64');
    // 4. Assemble the metadata input buffer
    const metadataInput = Buffer.concat([aesKey, aesIV, cipher.getAuthTag()]);
    const encMetadata = crypto.publicEncrypt(publicKey, metadataInput).toString('base64');
    const metadata = `${publicKey.kid}|${encMetadata}`;
    // 5. Prepare the payload
    const payload = {
      data,
      metadata,
      handle: payment_handle // From Set shipping info response
    }
```

*Now we can [tokenize the card and billing](/firmly-api/firmly-checkout-api/payment/complete-order-2/):*

```bash
curl 'https://cc.firmly.work/api/v1/payment/tokenize' \
  --data-raw '{"data":"PekcdFhhWBYGcn57f+8rPkug3d1onkLBA63RQGyTT+EvS3DkicO6VaWVmOJrdauxrOjtgk1H22bCXj3fBY+6TmAEU875a19tIhOjnG/L/o+vUJVOUSFifh95nbbR0NWybLz+V2ou2zzeUh6fjLWK1AvxUaT8r6U4T3Va8NzLfYSNo2wnT6EhgcLMQGSTAXgcoSfMxNB5lj0JXCk0tz/adOfjWtyf20g3ici+iposhub0PNealMu1ztmLsA6GmozmcXaoKcfgi5nPvAJPFSH2EkK1isWZuWuZf9nsvRWWCbdYP+bSPq/R1FcbNVLkhYt4lCdTDxdZLI+ubcSuzDXy6/vLRQ+3OtsQRQslEfTUo9aO7kEYs/y8o74pUKpp8Z3lZ5l1cVOkjuMzn1z/5iFdgVhAi+v+/EpblvdZ+tNDGnjvig9v++h5js322JY7vP3iHPqDTZWhGyc6AOl7SQHT+IVsR7yg6RPTCehBfCQ=","metadata":"2bfc2392ba1d4a9686845da80bf477de|ISmV1aZrG5uLlSAiLnM6iVbWuepF3c9Un/gT6FuC1zZ/LAvZB0Q7kqHC8BFnCJZ7Kh/LtcPwx7/YK5YqEI2QO+YykTWXC3M/BkOuD1PiASgCXWLr/my1aAATKhBkItyJFsdVwihgWnoQsSoC2GPRYpcLg0uznN3Q7fK4koJqMBwAK/Unbs2RZOgs+ZXD41f/FBGDE2tec334YSW8HLiepySvZp0SLixe4Cr01N/nvX1dpyixVvneixo8qjWc4gz6mG981p59CMDhXiaJFOCvngygzjqiAzp+cSfMyijw+2oEqhvvssbZFz39qb/dynl3JnP/nlZTTPbFp3IL3AVdDw==","handle":"e90fea27-1dab-46be-a1fc-ab35153b478a|7MKbEEipeJO4h8SohZbSDHZ2Ic6hGVscesqO8bf1rpp/vUot01ucfWhSt9u6zabZIQr1Ua1yhUz+BgBag5j2zRbd9euOBkXDPuvqxFVUVbXyEfiygWCrpthXZfH0eh4O/vfpIeoKSEsxraIgfc73tUByK9Xw8LF1X2NAzwSRTGMWH6kg64gSYtVZhVBWY3nUpiXM1XKRtovsUz0YsTLmzVRJc6ABG9rAZ3cS3QIgLmXnog8X41bItGWI2QleZxQeJJlMntLnwn4taGIryafXgh1EXQD3lMMrjhI9Jtwga1sp6J+u8KviBUVpu/7kx3kLq2tVjT4mqjngCsBmScl7Buo5m1OSfYFXxglM"}'
```

*Response example:*

```json
{
    "token": "e90fea27-1dab-46be-a1fc-ab35153b478a|IBUs3bj3wjFoYPq6lyPnDqenpk5mGZXAeXBUT/IXi1MiCioTOM+5+Izl31wr609FVXvTgu2COgHrDs0ZdHQyhzkSBzHY4aYr/20aftPdWI/yIVgWi8IsOnJrZ3PtVnahmKT70rEnuScd8XvbJ77e2Wok5oO4+39nDmuYebZ1DDwJb7/xhCuCRzcXNJgvX83XRqZRprXqW9TjU6HmucqBpJXlaT9b8Mfka5MLFSDrB2XMirZfn40iqw018H1imr4RMMLCZAY/aJmp0AEyhP/VtbYzhWThPuq2sMO4FMo3Hn1JOngNaEfg4+5DsbuKDyfSee2aBWpzeV1/JFaVFr+fxEXFQfsex5tcyadcI9lpKyOjvDjVxfaR3EOlRu44KaH92GqiXTQcY2zwSgniCU9q+1hhN29u/bdSYDSIGYcrHMFTitjtZyA8DvU/kSa7WhphQv/I6myS69EqGXq1UVrCxI79WmWZ5I3HmJ55Z5rlChRQJ48xbq4Xz2vq7lw2nq7HyB+YGELrLPwBXVXg7zyNJmSNe4vUcgymfFSeAIQvXnb1x+1ov6c9gUsYmIg+MOdIdswdVH9xaHmrCwOUIyvuYa2RDBQ="
}
```

*We will use this `token` value on the next step:*

## 5. Complete the Order
Once you have the generated token, pass it to the [Complete Order with Token API](/firmly-api/firmly-checkout-api/payment/complete-order-2/). This API will process the order, and upon successful completion, it will return the cart with the order placed.

*Sample Request:*

```bash
curl 'https://api.firmly.work/api/v1/domains/merchant.com/cart/complete-order' \
  -H 'x-firmly-authorization: <x-firmly-authorization>' \
  --data-raw '{"payment_token":{"id":"e90fea27-1dab-46be-a1fc-ab35153b478a|IBUs3bj3wjFoYPq6lyPnDqenpk5mGZXAeXBUT/IXi1MiCioTOM+5+Izl31wr609FVXvTgu2COgHrDs0ZdHQyhzkSBzHY4aYr/20aftPdWI/yIVgWi8IsOnJrZ3PtVnahmKT70rEnuScd8XvbJ77e2Wok5oO4+39nDmuYebZ1DDwJb7/xhCuCRzcXNJgvX83XRqZRprXqW9TjU6HmucqBpJXlaT9b8Mfka5MLFSDrB2XMirZfn40iqw018H1imr4RMMLCZAY/aJmp0AEyhP/VtbYzhWThPuq2sMO4FMo3Hn1JOngNaEfg4+5DsbuKDyfSee2aBWpzeV1/JFaVFr+fxEXFQfsex5tcyadcI9lpKyOjvDjVxfaR3EOlRu44KaH92GqiXTQcY2zwSgniCU9q+1hhN29u/bdSYDSIGYcrHMFTitjtZyA8DvU/kSa7WhphQv/I6myS69EqGXq1UVrCxI79WmWZ5I3HmJ55Z5rlChRQJ48xbq4Xz2vq7lw2nq7HyB+YGELrLPwBXVXg7zyNJmSNe4vUcgymfFSeAIQvXnb1x+1ov6c9gUsYmIg+MOdIdswdVH9xaHmrCwOUIyvuYa2RDBQ="},"vault_token":true}'
```

*Sample Response:*

```json
{
    "cart_status": "submitted",
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "d065bec3-0a1e-44b4-abe5-b91929be79a2",
    "submitted_at": "2023-07-31T14:11:25.717Z",
    "urls": {
        "thank_you_page": "https://merchant.com/65092026616/checkouts/951958f005f80a88cf14c433512ec684/thank_you?key=05e486b25d02a02339c616a6e1068efc"
    },
    "line_items": [
        {
            "line_item_id": "6b7c27e3-2d50-4600-823d-8e751def4612",
            "sku": "42961853841656",
            "base_sku": "7725400785144",
            "quantity": 2,
            "msrp": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.merchant.com/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_small.webp?v=1655838389"
            },
            "platform_line_item_id": "a07a4af7b39c17367eadabb5fd897dc3",
            "description": "Clip-in hair extensions #1 jet black.",
            "variant_description": "16\" / Classic"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0.2,
        "number": 20,
        "symbol": "$"
   },
    "total": {
        "currency": "USD",
        "value": 2.2,
        "number": 220,
        "symbol": "$"
   },
    "shipping_method_options": [
        {
            "sku": "Economy-0.00",
            "description": "Economy: 5 to 8 business days",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "Standard-4.90",
            "description": "Standard: 3 to 4 business days",
            "price": {
                "currency": "USD",
                "value": 4.9,
                "number": 490,
                "symbol": "$"
           }
        }
    ],
    "shipping_method": {
        "sku": "Economy-0.00",
        "description": "Economy: 5 to 8 business days",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        }
    },
    "platform_order_number": "#14002",
    "shipping_info": {
        "first_name": "John",
        "last_name": "Doe",
        "phone": "12364567890",
        "address1": "7367 126th PL SE",
        "city": "NewCastle",
        "state_or_province": "WA",
        "state_name": "Washington",
        "country": "United States",
        "postal_code": "98056",
        "email": "tester@tester.com"
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        },
        {
            "type": "PayPal",
            "wallet": "paypal"
        },
        {
            "type": "ShopPay",
            "wallet": "shoppay"
        }
    ],
    "payment_method": {
        "payment_type": "CreditCard",
        "last_four": "1111",
        "month": 3,
        "year": 2031
    },
    "billing_info": {
        "first_name": "John",
        "last_name": "Doe",
        "email": "tester@tester.com",
        "phone": "12364567890",
        "address1": "7367 126th PL SE",
        "address2": "",
        "city": "NewCastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056"
    }
}
```

*Congratulations, your order was placed!*
 


---



# Transfer a Session from the Browser and Place the Order

The following example will walk you through the steps to use our APIs to place an order by transferring a session from the browser. Before you start, you must first authorize the session from the browser.

In this example you'll learn how to:
* [authorize the browser session](/firmly-api/getting-started/integration-examples/transfer-session/#1-authorize-browser-session)
* [transfer the session](/firmly-api/getting-started/integration-examples/transfer-session/#2-transfer-session)
* [set the shipping address](/firmly-api/getting-started/integration-examples/transfer-session/#3-set-shipping-address)
* [tokenize a card](/firmly-api/getting-started/integration-examples/transfer-session/#4-tokenize-card-data)
* [complete the order](/firmly-api/getting-started/integration-examples/transfer-session/#5-complete-the-order)

## Prerequisites
Before you begin, ensure you have the following:
- `x-firmly-app-id` shared by firmly
- A test store with an active cart.
- The required cookies: "cart" for this example.

## 1. Authorize Browser Session
Authorize the browser session or device session. Let's do it by using the [Browser Session  API](/firmly-api/firmly-checkout-api/authentication/browser-session/)

*Browser Session sample request:*

```bash
curl --location --request POST 'https://api.firmly.work/api/v1/browser-session' \
--header 'x-firmly-app-id: <app-id>' \
--data ''
```


*Browser Session sample response:*

```json
{
    "device_created": false,
    "access_token": "eyJhbGciOiJSUzI1NiIsImtpZCI6ImY1NGMzYjc4ZDc0NjQ2MzQ4NWIzMjM2MjUzOWYyMWYwIn0.eyJkZXZpY2VpZCI6IjAyOGU5OTY1LThjNzUtNDVlOS1iZmY2LTFkOTVlY2ZkMDQ5MSIsImFwcGlkIjoiYjUzZmQ1Y2YtMzQ1Zi00NzFmLWJjYTUtNmMzNzY1YzE5MTdlIiwic3ViIjoiRGV2ZWxvcGVyIiwiZW52IjoiZGV2IiwiaWF0IjoxNjkwODA5MjI5LCJleHAiOjE2OTA4MTI4Mjl9.P26KkZWJgDPF3aRqF43x3rGmy7Z-wsSxdUTlczxLCgu91uQ5f-YiNGJ9aJWP4G1Lt0OwZVGYL8KJlX0J0XAMr3BTVK3gxcFnRijeIwhzBstn9CnH6AmysXXfPLO4t2aqDD7UwGw5C-6IsE-uc76F5Io5NZizABShI_9Ahuxi26sFPDzHkKKXbi7AKQMmB_9BQ3YDCQO-9koKI-zxfO39AtBmjL0ihjNryhpW2V4zWSbBnZEIsATbA4rYBrVXbRDfHbGu8IeZqs9prHyMpKJz_yPqfDJW9g9hWVU0xUYS0iB7MNNFj8rwwtvdyCUTQnFZtVXIG7RgTFN4wBolY3v_Ag",
    "expires_in": 3600,
    "expires": 1690812829,
    "device_id": "028e9965-8c75-45e9-bff6-1d95ecfd0491"
}
```

*`access_token` value will be used for `x-firmly-authorization` value.*


## 2. Transfer Session
Using the authorization token obtained from Step 1, pass it to the [Transfer Session API](/firmly-api/firmly-checkout-api/session/transfer-session/), which will respond with the cart details. For this example, the required cookie is "cart". The cart value will be passed to `handle` property.

*Transfer Session sample request:*

```bash
curl 'https://api.firmly.work/api/v1/domains/merchant.com/session/transfer' \
  -H 'x-firmly-authorization: <x-firmly-authorization>' \
  --data-raw '{"handle":"4ee5b8a9452eedb5282339ccb880c1ca","cookies":["_s=dff26e35-3228-4ce1-aa39-de03d6e7d06d","_y=8e1e6192-C5AC-41C1-7F37-815515223C44"]}'
```

*Transfer Session sample response:*

```json
{
    "cart_status": "active",
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "d065bec3-0a1e-44b4-abe5-b91929be79a2",
    "urls": {},
    "line_items": [
        {
            "line_item_id": "fbe9a03f-00a4-4765-9a9f-435b728bb669",
            "sku": "42961853841656",
            "base_sku": "7725400785144",
            "quantity": 1,
            "msrp": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.merchant.com/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_small.webp?v=1655838389"
            },
            "platform_line_item_id": "0d3654f857dac73d67a1c4c4a9ad313e",
            "description": "Clip-in hair extensions #1 jet black.",
            "variant_description": "16\" / Classic"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        },
        {
            "type": "PayPal",
            "wallet": "paypal"
        },
        {
            "type": "ShopPay",
            "wallet": "shoppay"
        }
    ]
}
```

## 3. Set Shipping Address
With the cart obtained from Step 2, use the [Set Shipping Info API](/firmly-api/firmly-checkout-api/shipping/set-shipping-info/) to set the shipping address for the order. The API will automatically select the lowest cost available shipping method for the cart.

*Set Shipping Address sample request:*

```bash
curl 'https://api.firmly.work/api/v1/domains/merchant.com/cart/shipping-info' \
  -H 'x-firmly-authorization: <x-firmly-authorization>' \
  --data-raw '{"email":"tester@tester.com","phone":"12364567890","address1":"7367 126th PL SE","address2":" ","city":"NewCastle","country":"United States","first_name":"John","last_name":"Doe","postal_code":"98056","state_or_province":"Washington"}'
```

*Set Shipping Address sample response:*

```json
{
    "cart_status": "active",
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "d065bec3-0a1e-44b4-abe5-b91929be79a2",
    "urls": {},
    "line_items": [
        {
            "line_item_id": "fbe9a03f-00a4-4765-9a9f-435b728bb669",
            "sku": "42961853841656",
            "base_sku": "7725400785144",
            "quantity": 1,
            "msrp": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.merchant.com/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_small.webp?v=1655838389"
            },
            "platform_line_item_id": "0d3654f857dac73d67a1c4c4a9ad313e",
            "description": "Clip-in hair extensions #1 jet black.",
            "variant_description": "16\" / Classic"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0.11,
        "number": 11,
        "symbol": "$"
    },
    "total": {
        "currency": "USD",
        "value": 1.11,
        "number": 111,
        "symbol": "$"
    },
    "shipping_method_options": [
        {
            "sku": "Economy-0.00",
            "description": "Economy: 5 to 8 business days",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "Standard-4.90",
            "description": "Standard: 3 to 4 business days",
            "price": {
                "currency": "USD",
                "value": 4.9,
                "number": 490,
                "symbol": "$"
           }
        }
    ],
    "shipping_method": {
        "sku": "Economy-0.00",
        "description": "Economy: 5 to 8 business days",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        }
    },
    "shipping_info": {
        "first_name": "John",
        "last_name": "Doe",
        "phone": "12364567890",
        "address1": "7367 126th PL SE",
        "city": "NewCastle",
        "state_or_province": "WA",
        "state_name": "Washington",
        "country": "United States",
        "postal_code": "98056",
        "email": "tester@tester.com"
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        },
        {
            "type": "PayPal",
            "wallet": "paypal"
        },
        {
            "type": "ShopPay",
            "wallet": "shoppay"
        }
    ],
    "payment_handle": "e90fea27-1dab-46be-a1fc-ab35153b478a|7MKbEEipeJO4h8SohZbSDHZ2Ic6hGVscesqO8bf1rpp/vUot01ucfWhSt9u6zabZIQr1Ua1yhUz+BgBag5j2zRbd9euOBkXDPuvqxFVUVbXyEfiygWCrpthXZfH0eh4O/vfpIeoKSEsxraIgfc73tUByK9Xw8LF1X2NAzwSRTGMWH6kg64gSYtVZhVBWY3nUpiXM1XKRtovsUz0YsTLmzVRJc6ABG9rAZ3cS3QIgLmXnog8X41bItGWI2QleZxQeJJlMntLnwn4taGIryafXgh1EXQD3lMMrjhI9Jtwga1sp6J+u8KviBUVpu/7kx3kLq2tVjT4mqjngCsBmScl7Buo5m1OSfYFXxglM"
}
```

*Store the `payment_handle` response to be used on next step:*

## 4. Tokenize Card Data
To tokenize the card data securely, first use the [Get Public Key API](/firmly-api/firmly-checkout-api/payment/get-public-key/) to fetch the encryption keys needed for tokenization. Then follow the example provided to tokenize the card data before sending it using the Tokenize API.

*I - Sample Request: Get public key to tokenize*

```bash
curl \
  --location \
  --request GET 'https://cc.firmly.work/api/v1/payment/key' \
  --header 'Content-Type: application/json'
```

*I - Sample Response: Store it as `publicKeyJson`*

```json
{
	"kid": "2bfc2392ba1d4a9686845da80bf477de",
	"kty": "RSA",
	"n": "s7X0oaoXcSjlUWR1vmhufa_PuMs0z80uQ8256BisgSro8Fln5IdSjMN48_hneGEmxUIdx7C3GTYhFcw4FxYZ8bK-bb_jKOyeesZAa_-P0lK_o-YNCbftVuv3anoYdnal1X0hQCc22vsi3zLYTl8MV4v1ygEk5Zx4Bw6q_6iaGnKd6kVJI5ZFz2of3zpgx45koxyxAZbQofQ9unnUMwU5XaQFjAtt1nxTzPXkgiSsu89Iu38AZKvXXqXY89Sujtwl9IM8BS6q2Piskrb8vQ0rxz1lwE8eymP00SnZPcaeaIPtmaJgr7VpPewPdTEULP7bqlJ9gVtsv0skN4GQi5tGuQ",
	"e": "AQAB",
	"use": "enc"
}
```

*II - Prepare payload (Example using Javascript on Client Side):*

```javascript
 let inputPayload = {
        credit_card: {
          number: '4111111111111111',
          name: 'John Doe',
          month: 12,
          year: 2031,
          verification_value: '123'
        },
        billing_info: {
          first_name: 'Tester',
          last_name: 'Tester',
          phone: '555-555-1234',
          address1: '123 NY State Thruway',
          city: 'New York',
          state_or_province: 'New York',
          country: 'United States',
          postal_code: '10001',
          email: 'tester@tester.com'
        }
    };
```

*III. Encrypt the payload:*

```javascript
    const crypto = require('crypto');

    const publicKey = crypto.createPublicKey({
        key: publicKeyJson, // From response example above
        format: 'jwk'
    });
    // 1. Generate a random AES Key
    const aesKey = crypto.randomBytes(32);
    // 2. Generate a random AES IV
    const aesIV = crypto.randomBytes(16);
    // 3. Encrypt the serialized source payload and encode it with Base64
    const cipher = crypto.createCipheriv('aes-256-gcm', aesKey, aesIV);
    let data = cipher.update(JSON.stringify(inputPayload), 'utf-8', 'base64');
    data += cipher.final('base64');
    // 4. Assemble the metadata input buffer
    const metadataInput = Buffer.concat([aesKey, aesIV, cipher.getAuthTag()]);
    const encMetadata = crypto.publicEncrypt(publicKey, metadataInput).toString('base64');
    const metadata = `${publicKey.kid}|${encMetadata}`;
    // 5. Prepare the payload
    const payload = {
      data,
      metadata,
      handle: payment_handle // From Set shipping info response
    }
```

*Now we can [tokenize the card and billing](/firmly-api/firmly-checkout-api/payment/complete-order-2/):*

```bash
curl 'https://cc.firmly.work/api/v1/payment/tokenize' \
  --data-raw '{"data":"PekcdFhhWBYGcn57f+8rPkug3d1onkLBA63RQGyTT+EvS3DkicO6VaWVmOJrdauxrOjtgk1H22bCXj3fBY+6TmAEU875a19tIhOjnG/L/o+vUJVOUSFifh95nbbR0NWybLz+V2ou2zzeUh6fjLWK1AvxUaT8r6U4T3Va8NzLfYSNo2wnT6EhgcLMQGSTAXgcoSfMxNB5lj0JXCk0tz/adOfjWtyf20g3ici+iposhub0PNealMu1ztmLsA6GmozmcXaoKcfgi5nPvAJPFSH2EkK1isWZuWuZf9nsvRWWCbdYP+bSPq/R1FcbNVLkhYt4lCdTDxdZLI+ubcSuzDXy6/vLRQ+3OtsQRQslEfTUo9aO7kEYs/y8o74pUKpp8Z3lZ5l1cVOkjuMzn1z/5iFdgVhAi+v+/EpblvdZ+tNDGnjvig9v++h5js322JY7vP3iHPqDTZWhGyc6AOl7SQHT+IVsR7yg6RPTCehBfCQ=","metadata":"2bfc2392ba1d4a9686845da80bf477de|ISmV1aZrG5uLlSAiLnM6iVbWuepF3c9Un/gT6FuC1zZ/LAvZB0Q7kqHC8BFnCJZ7Kh/LtcPwx7/YK5YqEI2QO+YykTWXC3M/BkOuD1PiASgCXWLr/my1aAATKhBkItyJFsdVwihgWnoQsSoC2GPRYpcLg0uznN3Q7fK4koJqMBwAK/Unbs2RZOgs+ZXD41f/FBGDE2tec334YSW8HLiepySvZp0SLixe4Cr01N/nvX1dpyixVvneixo8qjWc4gz6mG981p59CMDhXiaJFOCvngygzjqiAzp+cSfMyijw+2oEqhvvssbZFz39qb/dynl3JnP/nlZTTPbFp3IL3AVdDw==","handle":"e90fea27-1dab-46be-a1fc-ab35153b478a|7MKbEEipeJO4h8SohZbSDHZ2Ic6hGVscesqO8bf1rpp/vUot01ucfWhSt9u6zabZIQr1Ua1yhUz+BgBag5j2zRbd9euOBkXDPuvqxFVUVbXyEfiygWCrpthXZfH0eh4O/vfpIeoKSEsxraIgfc73tUByK9Xw8LF1X2NAzwSRTGMWH6kg64gSYtVZhVBWY3nUpiXM1XKRtovsUz0YsTLmzVRJc6ABG9rAZ3cS3QIgLmXnog8X41bItGWI2QleZxQeJJlMntLnwn4taGIryafXgh1EXQD3lMMrjhI9Jtwga1sp6J+u8KviBUVpu/7kx3kLq2tVjT4mqjngCsBmScl7Buo5m1OSfYFXxglM"}'
```

*Sample Response:*

```json
{
    "token": "e90fea27-1dab-46be-a1fc-ab35153b478a|IBUs3bj3wjFoYPq6lyPnDqenpk5mGZXAeXBUT/IXi1MiCioTOM+5+Izl31wr609FVXvTgu2COgHrDs0ZdHQyhzkSBzHY4aYr/20aftPdWI/yIVgWi8IsOnJrZ3PtVnahmKT70rEnuScd8XvbJ77e2Wok5oO4+39nDmuYebZ1DDwJb7/xhCuCRzcXNJgvX83XRqZRprXqW9TjU6HmucqBpJXlaT9b8Mfka5MLFSDrB2XMirZfn40iqw018H1imr4RMMLCZAY/aJmp0AEyhP/VtbYzhWThPuq2sMO4FMo3Hn1JOngNaEfg4+5DsbuKDyfSee2aBWpzeV1/JFaVFr+fxEXFQfsex5tcyadcI9lpKyOjvDjVxfaR3EOlRu44KaH92GqiXTQcY2zwSgniCU9q+1hhN29u/bdSYDSIGYcrHMFTitjtZyA8DvU/kSa7WhphQv/I6myS69EqGXq1UVrCxI79WmWZ5I3HmJ55Z5rlChRQJ48xbq4Xz2vq7lw2nq7HyB+YGELrLPwBXVXg7zyNJmSNe4vUcgymfFSeAIQvXnb1x+1ov6c9gUsYmIg+MOdIdswdVH9xaHmrCwOUIyvuYa2RDBQ="
}
```

*We will use this `token` value on the next step.*

## 5. Complete the Order
After you generate the token, pass it to the [Complete Order API](/firmly-api/firmly-checkout-api/payment/complete-order-2/). This API will process the order, and, upon successful completion, will return the cart with the order placed.

*Sample Request*

```bash
curl 'https://api.firmly.work/api/v1/domains/merchant.com/cart/complete-order' \
  -H 'x-firmly-authorization: <x-firmly-authorization>' \
  --data-raw '{"payment_token":{"id":"e90fea27-1dab-46be-a1fc-ab35153b478a|IBUs3bj3wjFoYPq6lyPnDqenpk5mGZXAeXBUT/IXi1MiCioTOM+5+Izl31wr609FVXvTgu2COgHrDs0ZdHQyhzkSBzHY4aYr/20aftPdWI/yIVgWi8IsOnJrZ3PtVnahmKT70rEnuScd8XvbJ77e2Wok5oO4+39nDmuYebZ1DDwJb7/xhCuCRzcXNJgvX83XRqZRprXqW9TjU6HmucqBpJXlaT9b8Mfka5MLFSDrB2XMirZfn40iqw018H1imr4RMMLCZAY/aJmp0AEyhP/VtbYzhWThPuq2sMO4FMo3Hn1JOngNaEfg4+5DsbuKDyfSee2aBWpzeV1/JFaVFr+fxEXFQfsex5tcyadcI9lpKyOjvDjVxfaR3EOlRu44KaH92GqiXTQcY2zwSgniCU9q+1hhN29u/bdSYDSIGYcrHMFTitjtZyA8DvU/kSa7WhphQv/I6myS69EqGXq1UVrCxI79WmWZ5I3HmJ55Z5rlChRQJ48xbq4Xz2vq7lw2nq7HyB+YGELrLPwBXVXg7zyNJmSNe4vUcgymfFSeAIQvXnb1x+1ov6c9gUsYmIg+MOdIdswdVH9xaHmrCwOUIyvuYa2RDBQ="},"vault_token":true}'
```

*Sample Response*

```json
{
    "cart_status": "submitted",
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "d065bec3-0a1e-44b4-abe5-b91929be79a2",
    "submitted_at": "2023-07-31T14:11:25.717Z",
    "urls": {
        "thank_you_page": "https://merchant.com/65092026616/checkouts/951958f005f80a88cf14c433512ec684/thank_you?key=05e486b25d02a02339c616a6e1068efc"
    },
    "line_items": [
        {
            "line_item_id": "6b7c27e3-2d50-4600-823d-8e751def4612",
            "sku": "42961853841656",
            "base_sku": "7725400785144",
            "quantity": 2,
            "msrp": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 2,
                "number": 200,
                "symbol": "$"
            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.merchant.com/UGC1_10_torie.bliss_486x593_c0c816d5-21e6-430f-afd3-ac65b0f34b89_small.webp?v=1655838389"
            },
            "platform_line_item_id": "a07a4af7b39c17367eadabb5fd897dc3",
            "description": "Clip-in hair extensions #1 jet black.",
            "variant_description": "16\" / Classic"
        }
    ],
    "sub_total": {
        "currency": "USD",
        "value": 2,
        "number": 200,
        "symbol": "$"
    },
    "cart_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0.2,
        "number": 20,
        "symbol": "$"
   },
    "total": {
        "currency": "USD",
        "value": 2.2,
        "number": 220,
        "symbol": "$"
   },
    "shipping_method_options": [
        {
            "sku": "Economy-0.00",
            "description": "Economy: 5 to 8 business days",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "Standard-4.90",
            "description": "Standard: 3 to 4 business days",
            "price": {
                "currency": "USD",
                "value": 4.9,
                "number": 490,
                "symbol": "$"
           }
        }
    ],
    "shipping_method": {
        "sku": "Economy-0.00",
        "description": "Economy: 5 to 8 business days",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        }
    },
    "platform_order_number": "#14002",
    "shipping_info": {
        "first_name": "John",
        "last_name": "Doe",
        "phone": "12364567890",
        "address1": "7367 126th PL SE",
        "city": "NewCastle",
        "state_or_province": "WA",
        "state_name": "Washington",
        "country": "United States",
        "postal_code": "98056",
        "email": "tester@tester.com"
    },
    "payment_method_options": [
        {
            "type": "CreditCard",
            "wallet": "user"
        },
        {
            "type": "PayPal",
            "wallet": "paypal"
        },
        {
            "type": "ShopPay",
            "wallet": "shoppay"
        }
    ],
    "payment_method": {
        "payment_type": "CreditCard",
        "last_four": "1111",
        "month": 3,
        "year": 2031
    },
    "billing_info": {
        "first_name": "John",
        "last_name": "Doe",
        "email": "tester@tester.com",
        "phone": "12364567890",
        "address1": "7367 126th PL SE",
        "address2": "",
        "city": "NewCastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056"
    }
}
```

*Congratulations, your order was placed!*
 


---

# Integration Examples


  <h1 id="integration-examples">Integration Examples</h1><p>In these examples, we&rsquo;ll walk you through real-world examples of using the firmly APIs.</p>
<ul>
<li><a href=/firmly-api/getting-started/integration-examples/start-cart-add-item/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Add an Item to the Cart and Place the Order</span></a></li>
<li><a href=/firmly-api/getting-started/integration-examples/transfer-session/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Transfer a Session from the Browser and Place the Order</span></a></li>
</ul>


- [Add Item to Cart and Place Order](/firmly-api/getting-started/integration-examples/start-cart-add-item/index.md)
- [Transfer Session from Browser and Place Order](/firmly-api/getting-started/integration-examples/transfer-session/index.md)


---

# Getting Started


  <h1 id="getting-started">Getting Started</h1><p>The Getting Started section describes the different types of authentication provided by the firmly APIs, and includes examples of how to use the APIs to perform everyday tasks in your e-c0mmerce environment.</p>
<ul>
<li><a href=/firmly-api/getting-started/authentication-overview/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Authentication Overview</span></a></li>
<li><a href=/firmly-api/getting-started/integration-examples/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Integration Examples</span></a></li>
</ul>


- [Authentication Overview](/firmly-api/getting-started/authentication-overview/index.md)
- [Integration Examples](/firmly-api/getting-started/integration-examples/index.md)


---


# Error Codes

All firmly errors will follow a general normalized convention no matter which module is returning the error.
The errors will always change the HTTP response code and have the following format in the HTTP body:


Parameter | Default | Description
--------- | ------- | -----------
code | - | The HTTP error code status.
error | - | Normalized error identifier. More details can be found in the table below.
description | - | String with error details. It can vary depending on how the error was generated in the system.


*Example of error response:*

```json
 {
    "code": 401,
    "error": "InvalidDeviceIssuedJWT",
    "description": "Device issued JWT is invalid.  Either it has expired or the signature is incorrect."
}
```

<aside class="notice">
The <code>description</code> parameter may vary according to the merchant/platform to provide detailed information to the user.
In order to handle the error properly, please rely on the <code>code</code> and <code>error</code> parameters.
</aside>


The firmly services API may return the following error codes:

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
AllProductsNotFound | 404 | All Products not found.
AllProductsNotImplemented | 404 | All Products not Implemented.
BadRequest | 400 | Request Syntax is not correct.
CannotCreateCart | 409 | Could not create cart
CannotTransferSession | 409 | Required information to perform session transfer is not available.
CartAlreadyLoggedIn | 409 | This cart already belongs to a logged in customer.
CartNotFound | 404 | Cart was not found.
CheckoutError | 412 | Payment info or billing address invalid.
ClearPromoCodeNotAllowed | 409 | Clear promo code is not allowed for this merchant.
CountryNotSupported | 412 | We don't currently support this country/region. Enter a new address and try again.
CreditCardDeclined | 422 | Credit card declined
CreditCardInsufficientFunds | 422 | Insufficient funds
CreditCardInvalidExpiry | 422 | Credit card expiry date is invalid
CreditCardInvalidExpiryDate | 422 | Credit card expiry date is invalid
CreditCardInvalidExpiryMonth | 422 | Credit card expiry month is invalid
CreditCardInvalidExpiryYear | 422 | Credit card expiry Year is invalid
CreditCardInvalidNumber | 422 | Credit card number is invalid
CreditCardInvalidSecurityCode | 422 | Credit card security code is invalid
CreditCardNotFound | 404 | Credit Card was not found using these parameters.
DomainNotFound | 404 | This domain was not found in firmly servers.
DynamoNotFound | 404 | The provided Dynamo was not found.
ErrorInvalidAppId | 400 | App ID is invalid.
ErrorInvalidEmail | 400 | Email provided is invalid
ErrorMissingAppId | 400 | x-firmly-app-id header is missing or invalid.
ErrorNotExpectedForRoute | 500 | This is an internal error. We use it when a route returned an error that was not expected for it.
ErrorNotMapped | 500 | 
ErrorServiceUnavailable | 503 | Service temporarily unavailable. Please try again later.
ErrorStartExpressCheckout | 400 | Could not start checkout.
ErrorSubmitExpressCheckout | 400 | Could not submit checkout.
ExceedMaxQtyCart | 400 | The request exceeds the maximun qty allowed in shopping cart.
Forbidden | 403 | The requested resource is forbidden.
GatewayNotFound | 404 | Invalid payment gateway.
InvalidAPIToken | 400 | API token is invalid.
InvalidDeviceIssuedJWT | 401 | Device issued JWT is invalid.  Either it has expired or the signature is incorrect.
InvalidInputBody | 422 | The body is not processable
InvalidJWTToken | 401 | The JWT token is invalid.
InvalidKey | 409 | The key used for encryption in this request does not exist or is no longer valid.
InvalidOtp | 401 | The OTP is invalid.
InvalidOTPType | 404 | The OTP type provided is either missing or invalid.
InvalidPhoneNumber | 400 | The phone number provided is not valid.
InvalidPromoCode | 409 | Enter a valid discount code.
InvalidShippingInfo | 400 | The shipping info provided is not valid.
InvalidShippingMethod | 400 | Invalid shipping method.
InvalidState | 400 | This state is not valid for the given country.
InvalidToken | 400 | Jwt token is invalid.
InvalidUrl | 400 | Url not valid.
ItemNotFound | 404 | Item not found.
LoginFailed | 409 | An error happened during during login. Please, try to login again.
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
MissingEmail | 412 | Missing email address.
MissingEmailAddressOnCheckout | 412 | Missing email address during checkout phase.
MissingRequiredCookie | 400 | Required cookie is missing to perform session transfer.
MissingRequiredHandle | 400 | Required handle is missing to perform session transfer.
MissingShippingInfo | 412 | Shipping info needs to be set.
MissingShippingMethod | 412 | Shipping method needs to be set.
MissingTaxSync | 412 | The taxes are not synced yet. Please refresh the cart and try again.
MultipleDiscountCodesNotSupported | 409 | This store does not support multiple discount codes.
NoLineItemError | 412 | Cart does not have any line item. Add an item at least and try again.
NotEnoughStockError | 409 | The amount of the required item it not available in stock.
NotImplemented | 501 | This action is not implemented. Please contact the admin.
OperationNotSupported | 412 | This operation is not supported for this store.
PartnerNotFound | 404 | Partner could not be found
PaymentMethodNotAvailable | 409 | The payment method is not available. Please, choose a diferent one or try again later.
PleaseTryAgainLater | 409 | Please, try again later.
PreconditionError | 412 | A precondition was not completed.
ProductListNotFound | 404 | Product list not found.
ProductListNotImplemented | 404 | Product list not implemented.
ProductNotFound | 404 | Product not found.
ProductNotImplemented | 404 | Product not Implemented.
ProductUrlNotImplemented | 404 | ProductUrl not Implemented.
PromoNotAvailable | 409 | This merchant does not allow promotions for this cart.
RouteNotFound | 404 | This route was not found in this server.
SessionTokenExpired | 401 | Your session expired. Please, refresh your cart and try again
ShippingNotNeeded | 400 | You don't have any items that require shipping
ShopNotFound | 404 | The shop is not setup in our system.
StoreUnavailable | 503 | Store temporarily unavailable. Please try again later.
Unauthorized | 401 | Caller is not authorized to make this call
Unexpected | 500 | Unexpected server error.
UnprocessableEntity | 422 | The given payload has unprocessable, invalid or non-existent data. Please check the data and try again.
UnregisteredDevice | 404 | Device does not have an active registration in the system.
UserMustLogin | 409 | This merchant requires the user to be logged in at this step.
UserNotFound | 404 | User not found
WalletNotFound | 404 | This email or phone number does not have a wallet from this provider.
WalletProviderNotFound | 404 | The wallet provider does not exist
 


---


# Merchant Specific Errors

 firmly supports the ability for a merchant to customize the description presented to a user when an error code is generated. In general, firmly will normalize all errors in a finite list of codes, comprised of a number and a short string (e.g., 422 CreditCardDeclined).
 
These errors will also be accompanied by an additional field named `description` which carries user friendly messages for business logic errors.

As a firmly partner, you may choose to do one of the following:
 - Use the error code number and the normalized identifier (a short string) to map the errors into your own messages (i.e. 422 CreditCardInvalidSecurityCode" will always be constant)
 - Show the `description` field to the customer and benefit from getting personalized merchant messages for some of the errors. 


---


# Relevant IDs

To help identify and track a customer's sessions and specific requests, firmly uses the following identifiers:

### Device ID
The Device ID is the identifier that firmly provides for every customer session. It may or may not be reused for different carts, depending on the partner's integration.

A Device ID can be used to understand a particular customer's session and interactions.

```json
---
filename: Example of Device ID
---
{
    "device_id": "fdf5c4d6-4f21-43a8-90f1-11e202e5d782"
}
```

The device ID is returned as part of the [Browser Session](/firmly-api/firmly-checkout-api/authentication/browser-session/) API response and can be retrieved from the JWT used as the customer session authentication.

### Ray ID
A Ray ID is returned as part of the Reponse header (CF-RAY) of every request executed againts firmly servers.
Ray IDs are particularly useful when evaluating issues, identifiying false positives, or more generally,
understanding your customer's traffic.

```json
---
filename: Example of Ray ID
---
881d0d5048e6752c-SEA
```
 


---


# Logged-in Customer

On the merchant site, each customer is required to have a valid email address to be used for validation and communication. 
If the customer is logged in, the email address <b><u>cannot</u></b> be changed. 

The customer account email will be used for the order.

## Data Model

Information about whether the user is logged in or not is available in the "[session](/firmly-api/schema/schema/#session-info)" attribute of the cart:

```json
---
filename: Logged in customer "session" attribute
---
    ...
    "session": {
        "requires_login": false,
        "is_email_registered": true,
        "is_logged_in": true,
        "cookies": [
            ...
        ]
    }
    ...
```

> **Note**
> - If the "session" attribute is not present, the value of the internal flags should be considered *false*.
> 
> - As part of the firmly cart, the shipping information will always contain the customer's account email.
> 
> - To comply with the [Set Shipping Info](/firmly-api/firmly-checkout-api/shipping/set-shipping-info/) API, it is mandatory to send an email address, however, the email address will be ignored.

### Recomended Client Behavior

If the customer is logged in, we recommend hiding the email field from the checkout form in order to reduce friction or confusion.

Alternatively, you can leave the field in a "disabled" state since it cannot be changed.

## Related Pages

- [Transfer Session](/firmly-api/firmly-checkout-api/session/transfer-session/) API
- [Set Shipping Info](/firmly-api/firmly-checkout-api/shipping/set-shipping-info/) API
 


---


# Login Required

Some merchants support true guest orders, while other merchants require all customers to create an account.  For those merchants that require customer accounts, part of the purchase process is for the customer email to be added to the cart. After the email is added to the cart, the customer must login to continue with the purchase process.

## Data Model

The information about registered email, required customer login, and customer logged in is available in the “session” attribute of the cart:

### Login required "session" attribute

```json
---
filename: Login required "session" attribute
---
...
"session": {
    "requires_login": true,
    "is_email_registered": true,
    "is_logged_in": false,
    "cookies": [
        ...
    ]
}
...
```

For merchants with this condition, if the “session” attribute is not present, the values of the internal flags, should be considered <b>`false`</b>.

### Recomended Client Behavior

For the cart response after `Set Shipping Info API` is called, verify the session attribute for the combination above.
If the customer is a registered customer but is not logged in, and the merchant requires login, fall back to the original merchant flow.

## Related Pages

- [Set Shipping Info](/firmly-api/firmly-checkout-api/shipping/set-shipping-info/) API
 


---


# Payment Methods Available for a Cart

When the total price of the cart is greater than zero, the available payment methods for the merchant are shown in the `payment_method_options` attribute.


The payment methods that are available depend on the merchant integration and specific cart conditions. Scenarios may occur when one or more payment methods are not supported and need to be removed. Here are a few examples when a merchant might remove a payment method:

- Total price of the cart is too low.
- Total price of the cart is too high.
- Certain discounts or products in the cart require a specific payment method.

## Data Model

The `payment_method_options` attribute of the cart may be empty:
```json
---
filename: No payment methods supported
---
...
"payment_method_options": []
...
 ```

Or the `payment_method_options` attribute of the cart may contain multiple payment methods:
```json
---
filename: Alternative payment methods supported
---
   ...
   "payment_method_options": [
         {
              "type": "PayPal",
              "wallet": "paypal"
         },
         {
              "type": "ShopPay",
              "wallet": "shoppay"
         }
    ]
  ...
```

### Recomended Client Behavior

For every Cart response from firmly:
- If the client supports at least one of the available payment methods, hide any other payment method not listed for the current cart. (e.g., PayPal may be available, but credit card may not).
- If there are no available payment methods supported by the client, fall back to the original merchant experience.

 


---

# Specific Scenarios


  <h1 id="specific-scenarios">Specific Scenarios</h1><ul>
<li><a href=logged-in-customer/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Logged-in Customer</span></a></li>
<li><a href=login-required/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Login Required</span></a></li>
<li><a href=payment-methods/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Payment Methods</span></a></li>
</ul>


- [Logged-in Customer](/firmly-api/miscellaneous/specific-scenarios/logged-in-customer/index.md)
- [Login Required](/firmly-api/miscellaneous/specific-scenarios/login-required/index.md)
- [Payment Methods](/firmly-api/miscellaneous/specific-scenarios/payment-methods/index.md)


---

# Miscellaneous


  <h1 id="miscellaneous">Miscellaneous</h1><ul>
<li><a href=/firmly-api/miscellaneous/specific-scenarios/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Specific Scenarios</span></a></li>
<li><a href=/firmly-api/miscellaneous/relevant-ids/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Relevant IDs</span></a></li>
<li><a href=/firmly-api/miscellaneous/errors/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Error Codes</span></a></li>
<li><a href=/firmly-api/miscellaneous/merchant-specific-errors/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Merchant Specific Errors</span></a></li>
</ul>


- [Specific Scenarios](/firmly-api/miscellaneous/specific-scenarios/index.md)
- [Relevant IDs](/firmly-api/miscellaneous/relevant-ids/index.md)
- [Error Codes](/firmly-api/miscellaneous/errors/index.md)
- [Merchant Specific Errors](/firmly-api/miscellaneous/merchant-specific-errors/index.md)


---


# Get Merchant Health Status

<!-- Adds a product to the cart. In order to retrieve a product identifier refer to the [Catalog APIs](/firmly-api/api/catalog/). If the requested quantity is not available in the merchant, InventoryError is returned. See [Errors](/firmly-api/errors/) for more information. -->

## HTTP Request

`GET https://status.firmly.work/api/v1/domains/{{merchant-domain}}?id={{id}}`

## Authentication
This API is public. No authentication or authorization required.

<!-- This API requires [Application Identifier Authorization](/firmly-api/quickstart/authentication/#application-identifier-authorization).-->

## Path Parameters

Parameter | Default | Description
--------- | ------- | -----------
merchant-domain | - | Domain of the current merchant website. (e.g. mystore.com).

## Query Parameters

Parameter | Default | Description
--------- | ------- | -----------
id | - | The ID of the component to be validated.


## Response Format

`Content-Type: application/json`

Parameter | Default | Description
--------- | ------- | -----------
status | - | Current status of this merchant. The value can be one of the following: <br/> * operational <br/> * degraded <br/> * outage

## Expected Errors

Normalized Identifier | Error Code | Description
---------- | ---------- | -------
MissingAuthHeader | 400 | x-firmly-authorization header is missing or invalid.
InvalidToken | 400 | The authentication key is invalid.
DomainNotFound | 404 | The requested domain is not found.
BadRequest | 400 | Request syntax is not correct.

See [Errors](/firmly-api/miscellaneous/errors/) for more information.
## Sample Request

```bash
curl \
  --location \
  --request GET 'https://status.firmly.work/api/v1/domains/{{merchant-domain}}?id=v2024-02-27-0-chkt' \
  --header 'x-firmly-app-id: <>'
```

## Sample Response

```json
{
  "status": "operational"
}
```
 


---

# Other firmly APIs


  <h1 id="other-firmly-apis">Other firmly APIs</h1><ul>
<li><a href=/firmly-api/other-firmly-api/get-health-status/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Get Merchant Health Status</span></a></li>
</ul>


- [Get Merchant Health Status](/firmly-api/other-firmly-api/get-health-status/index.md)


---



# Whitelist Stripe Radar
Even though Meta has validated the cards with $0 auth, the fraud management solutions sometimes use their own algorithm to reject a legitimate card. 

In such cases, we would like the merchant to create an “allow” in the Stripe Radar so that the orders are not fraud blocked.  

1. Log into your Stripe account and, under Shortcuts, select <b>Radar</b>. 
[![Stripe Radar](/striperadar1.png)](/striperadar1.png)
2. At the top of the window, under Radar, select <b>Rules</b>. 
[![Stripe Radar](/striperadar2.png)](/striperadar2.png)
3. On the top right side of the window, select <b>Add Rule</b>. 
[![Stripe Radar](/striperadar3.png)](/striperadar3.png)
4. Add <b>Allow Rule</b> and enter the following information:  

 

Allow if : user_agent = “firmly.ai <merchant secret>” (The secret must include at least 32 characters) 

The merchant can create their own secret or firmly will provide one for their convenience.  


---

# Fraud Risk Management


  <h1 id="fraud-risk-management">Fraud Risk Management</h1><p>It may be necessary to whitelist different providers so that orders initiated on the merchant site using firmly are not blocked.</p>
<ul>
<li><a href=/firmly-api/quickstart/fraud-risk-management/whitelist-stripe-radar/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Whitelisting for Stripe Radar</span></a></li>
</ul>


- [Whitelist Stripe Radar](/firmly-api/quickstart/fraud-risk-management/whitelist-stripe-radar/index.md)


---

# Optional Cart Fields

Some fields related to the Cart object may be optional depending on the merchant's requirements. For instance, if the product is small and there is no need for a phone number during the delivery, the `shipping phone` field may be optional for the current cart. 

If the merchant has additional optional fields, they will be indicated by a boolean flag in the cart object. (See the code sample below).

When designing the user interface, you have the option to not show these fields, or show them and keep them optional for the user.

```json
{
    ...
    "shop_properties": {
        "optional_fields": {
            "billing_phone": true,
            "shipping_email": true,
            "shipping_first_name": true,
            "shipping_phone": true
        }
    }
    ...
}
```

 


---


# Schema
The schema for the firmly API describes the data elements and how they relate to one another. Each element includes an example of how the element appears in code and the parameter descriptions for each element.


## Address
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
first_name | string | Address first name. | Yes
last_name | string | Address last name. | Yes
email | string | Address email. | Yes
phone | string | Address phone number. | Yes
address1 | string | Shipping address line 1. (number and street name) | No
address2 | string | Shipping address line 2. (e.g. floor, apt, etc.) | Yes
city | string | Shipping address city | No
postal_code | string | Shipping address postal code. | No
state_or_province | string | Shipping address state. | No
country | string | Shipping address country. | No
state_name * | string | State's full name. | Yes
company | string | Company's name. | Yes

\* state_name is return-only field. The partner can send either a state code or name in state_or_province.

```json
{
    "first_name": "John",
    "last_name": "Smith",
    "email": "john@firmly.ai",
    "phone": "(206) 555-1212",
    "address1": "123 Nice St",
    "address2": "",
    "city": "Newcastle",
    "postal_code": "98056",
    "state_or_province": "WA",
    "country": "United States",
    "state_name": "Washington",
    "company": "firmly"
}
```


## Amount
Parameter | Type | Description| Optional
--------- | ------- | ----------- |  --------
currency | string | Currency code as defined in ISO 4217. | No
value | float | Amount of this currency object. | No
number | integer| Value of the product in cents. | No
symbol | string | Currency symbol. | No <br>If the symbol is not found, then the three letter currency code will be returned.

```json
{
    "currency": "USD",
    "value": 4.99,
    "number": 499,
    "symbol": "$"
}
```



## Cart
Some fields in the Cart object are optional. See [Optional Cart Fields](/firmly-api/schema/optional-fields/) for more information.


Parameter | Type | Description | Optional
--------- | ------- | ----------- | -----------
available_store_credit | [Amount](/firmly-api/schema/schema/#amount) | Available credit on the store. | Yes
billing_info | AddressInfo | Billing information. | Yes
cart_id | uuid | Unique identifier for this cart on firmly services. | No
cart_status | string | Status of this cart. | Yes
display_name | string | Store display name. | Yes
is_tax_included_in_price | boolean | Boolean if tax is included in price. | Yes
line_items | [LineItem[]](/firmly-api/schema/schema/#line-item) | List of line items of this cart. | No
notice | string[] | General notices. | Yes
payment_handle | string | Opaque handle used by firmly Vault Messenger to tokenize the credit card. | Yes
payment_method | [PaymentMethod[]](/firmly-api/schema/schema/#payment-method) | Payment method summary. | Yes
payment_method_options |  | Saved customer credit cards (from Merchant or from Wallets). | Yes
platform_id | string | firmly platform id for the current cart. | No
properties | object |  | Yes
reward_points | [Amount](/firmly-api/schema/schema/#amount) | Reward points to be obtained with this cart. | Yes
available_reward_points | [Amount](/firmly-api/schema/schema/#amount) | Available rewards points. | Yes
session | [SessionInfo](/firmly-api/schema/schema/#session-info) | Information about user session. | Yes
shipping_info | [AddressInfo](/firmly-api/schema/schema/#address) | Shipping address. | Yes
shipping_info_options | [AddressInfo](/firmly-api/schema/schema/#address) | Saved customer addresses (from Merchant or from Wallets). | Yes
shipping_method | string | Identifier for the current selected shipping method. | Yes
additional_shipping_methods | [ShippingMethod[]](/firmly-api/schema/schema/#shipping-method) | Shipping methods that are going to be used in addition to the main one. | Yes
shipping_method_options | [ShippingMethod[]](/firmly-api/schema/schema/#shipping-method) | List of available shipping methods for this cart. | Yes
shop_id | string | Merchant identified on firmly services. | No
store_credits | [Amount](/firmly-api/schema/schema/#amount) | If logged in, the amount of credit that the customer has in this store. | Yes
submitted_at | string | Time when cart was submitted. | Yes
urls | object | Additional urls, like thank you page. | Yes
validation_errors | object | Specific form validation errors, i.e. Invalid State, Invalid Country, etc. | Yes
sub_total | [Amount](/firmly-api/schema/schema/#amount) | Subtotal value for this cart. | Yes
cart_discount | [Amount](/firmly-api/schema/schema/#amount) | Total discount provided for this cart. | Yes
cart_discount_breakdown | DiscountsBreakdown[] | Cart discount breakdown. | Yes
tax | [Amount](/firmly-api/schema/schema/#amount) | Estimated tax to be collected for this cart. | Yes
coupons | string[] | List of applicable coupons applied in the cart. if the list is empty, it means the coupons are not valid. | Yes
shipping_total | [Amount](/firmly-api/schema/schema/#amount) | Total value for all shipment cost of this cart. | Yes
total | [Amount](/firmly-api/schema/schema/#amount) | Total value of this cart (Subtotal + tax). |

```json
{
    "platform_id": "merchant_platform",
    "shop_id": "59",
    "cart_id": "30c28ec6-7321-4a61-92ed-8067c59b41e6",
    "line_items": [
        {
            "sku": "42961836507384",
            "base_sku": "7725397508344",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_discount": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
                "number": 0,
                "symbol": "$"
            },
            "image": {
                "url": "https://cdn.merchant.com/image1_small.jpg?v=1655838064"
            },
            "platform_line_item_id": "fdb139055ad337bfb346326a234cbe05",
            "description": "Junior Smith Daredevil Ski Goggles",
            "variant_description": "Black",
            "line_item_id": "076a6428-6783-45a8-95c6-eacc8bb00fdd"
        }
    ],
    "shipping_info": {
        "first_name": "John",
        "last_name": "Smith",
        "phone": "(206) 555-1212",
        "address1": "123 Nice St",
        "city": "Newcastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056",
        "email": "john@firmly.ai"
    },
    "shipping_method": {
        "sku": "Economy-0.00",
        "description": "Economy",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        },
        "applicable_line_items": []
    },
    "total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_method_options": [
        {
            "sku": "Economy-0.00",
            "description": "Economy",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "Standard-4.90",
            "description": "Standard",
            "price": {
                "currency": "USD",
                "value": 4.9,
                "number": 490,
                "symbol": "$"
            }
        }
    ],
    "app_id": "fdc6e81b-3792-4920-b19b-986c334f3e19",
    "cart_status": "active",
    "payment_method_options": [
        {
            "id": "card_id_1",
            "type": "CreditCard",
            "wallet": "merchant",
            "card_type": "Visa",
            "last_four": "2834",
            "month": "11",
            "year": "2029",
            "billing_info": {
                "first_name": "fistname",
                "last_name": "lastame",
                "address1": "7367 126th Pl SE",
                "address2": "",
                "city": "Renton",
                "state_or_province": "WA",
                "state_name": "Washington",
                "postal_code": "98056",
                "country": "United States",
                "phone": "1231234123",
            },
        },
        {
            "id": "card_id_2",
            "type": "CreditCard",
            "wallet": "merchant",
            "card_type": "Visa",
            "last_four": "8798",
            "month": "3",
            "year": "2030",
            "billing_info": {
                "first_name": "fistname",
                "last_name": "lastame",
                "address1": "7367 126th Pl SE",
                "address2": "",
                "city": "Renton",
                "state_or_province": "WA",
                "state_name": "Washington",
                "postal_code": "98056",
                "country": "United States",
                "phone": "1231234123",
            },
        }
    ],


}
```
## Discounts Breakdown
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
label | string
discount | [Amount](/firmly-api/schema/schema/#amount) |

## Discount Details
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
code | string | Discount code. | No
description | string | Description of the discount. | No

```json
{
    "code": "fiftyOff",
    "description": "half the price",
}
```

## Line Item
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
sku | string | Variant Product SKU. Might be an abstraction of the real merchant's SKU. | No
base_sku | string | Base Product SKU. Might be an abstraction of the real merchant's SKU. | Yes
quantity | integer | Number of units this entry represents. | No
price | [Amount](/firmly-api/schema/schema/#amount) | Unit price for this product. | No
line_price | [Amount](/firmly-api/schema/schema/#amount) | Total line item price. | No
line_discount | [Amount](/firmly-api/schema/schema/#amount) | Total line item discount. | Yes
image | object | Image URL for this product. | No
platform_line_item_id | string | Original merchant's identifer. | Yes
description | string | Description of the base product. | Yes
variant_description | string | Description of this specific variant. | Yes
line_item_id | string | Unique identifier of this line item in firmly services. | No
variant_handles | string[] | Additional information to differentiate product options (Used in some merchants). | Yes
extended_attributes | object | Itens attributes. | Yes
msrp | [Amount](/firmly-api/schema/schema/#amount) | Manufacturer Suggested Retail Price. | No
discount | [Amount](/firmly-api/schema/schema/#amount) | Items discount. | Yes
requires_shipping | Boolean | If the requires shipping. | No
discounts | [DiscountDetails[]](/firmly-api/schema/schema/#discount-details) | List of discount details. | Yes
line_item_tax | [Amount](/firmly-api/schema/schema/#amount) | Item's respective tax. | Yes

```json
{
    "sku": "42961836507384",
    "base_sku": "7725397508344",
    "quantity": 1,
    "price": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "line_price": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "line_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "image": {
        "url": "https://cdn.merchant.com/image1_small.jpg?v=1655838064"
    },
    "platform_line_item_id": "fdb139055ad337bfb346326a234cbe05",
    "description": "Junior Smith Daredevil Ski Goggles",
    "variant_description": "Black",
    "line_item_id": "076a6428-6783-45a8-95c6-eacc8bb00fdd"
}
```
## Order

The Order model inherits all properties from the [`Cart`](/firmly-api/schema/schema/#cart) model, and in addition, includes the following additional parameter(s).

Parameter | Type | Description
--------- | ------- | -----------
platform_order_number | string | The order id in the merchant's website.

```json
{
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "6f0c0063-43bf-4f44-880a-bcbd6cbb0807",
    "line_items": [
        {
            "sku": "29227235868724",
            "base_sku": "3796148518964",
            "variant_option_list": [],
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 6.5,
                "number": 650,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 6.5,
                "number": 650,
                "symbol": "$"

            },
            "line_discount": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"

            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.merchant.com/Tank-Top-Women-White-Front_small.jpg?v=1565574386"
            },
            "platform_line_item_id": "cc8a4896b4da26dbe37d89b85b44efeb",
            "description": "Tank Top Women White",
            "variant_description": "M / White",
            "line_item_id": "7d00fa5c-f723-445b-a465-d038ae0adbe0"
        }
    ],
    "shipping_info": {
        "first_name": "John",
        "last_name": "Smith",
        "phone": "(206) 555-1212",
        "address1": "123 Nice St.",
        "city": "Newcastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056",
        "email": "john@firmly.ai"
    },
    "shipping_method": {
        "sku": "Economy-2.00",
        "description": "Economy",
        "price": {
            "currency": "USD",
            "value": 2,
            "number": 200,
            "symbol": "$"
        },
        "applicable_line_items": []
    },
    "total": {
        "currency": "USD",
        "value": 9.35,
        "number": 935,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 6.5,
        "number": 650,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 2,
        "number": 200,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0.85,
        "number": 85,
        "symbol": "$"
    },
    "shipping_method_options": [
        {
            "sku": "Economy-2.00",
            "description": "Economy",
            "price": {
                "currency": "USD",
                "value": 2,
                "number": 200,
                "symbol": "$"
            }
        }
    ],
    "platform_order_number": "#1784",
    "app_id": "9ce7a122-7c0d-4a13-893d-5d376f197fe6",
    "payment_method": {
        "card_holder_name": "Krishna",
        "last_four": "0465",
        "month": "05",
        "year": "2028",
        "card_type": "Visa"
    },
    "cart_status": "submitted",
    "coupons": []
}
```
## Payment Method
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
payment_type | string | Payment method. | No
last_four | string | Last four digits of payment card. | No
month | Integer | Card validity month. | No
year | Integer | Card validity year. | No
card_type | string | Card type. | Yes

```json
{
    "payment_type": "CreditCard",
    "last_four": "1234",
    "month": 12,
    "year": 2025
}
```

## Payment Method Options
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
type | string | Payment method option. | No
wallet | string | Wallet. | No
art | string |  | Yes
last_four | string | Last four digits of the payment card. | Yes
month | integer | Card validity month. | Yes
year | integer | Card validity year. | Yes
card_type | string | Card type. | Yes
billing_info | AddressInfo | Billing info. | Yes



## Product Collection
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
Product | [Product[]](/firmly-api/schema/schema/#product) |  | No

### Product
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
loc | string | | No
image | [Image[]](/firmly-api/schema/schema/#image) |  | Yes
handle | string | | No
title | string | | No
pdp_url | string | | Yes

```json
    {
      "loc": "https://api.firmly.work/api/v1/domains-products/merchant.com/abc1289",
      "image": {
        "url": "https://cdn.merchant.com/s/files/1/0493/9834/9974/products/abc1289.png"
      },
      "title": "Brand Firmly Power Bank (PowerCore 24K)",   
      "handle": "abc1289"
    },

```

### Image 
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
url | string | URL of the image. | No
alt | string | Alt text for the image. | Yes
type | string | Type of image (preview, small, medium, large, default, video). Defaults to 'default'. | Yes
aspect_ratio | number | Aspect ratio of the image. | Yes
width | integer | Width of the image in pixels. | Yes
height | integer | Height of the image in pixels. | Yes
position | integer | Position/order of the image. | Yes
srcset | array of objects | Array of alternate image sources with different sizes/formats. | Yes

```json
{
    "url": "https://cdn.merchant.com/s/files/1/0493/9834/9974/products/abc1289.png"
}
```
## Product Details
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
base_sku | string | Base SKU of the product. | No
title | string | Product title. | No
handle | string | Product handle. | No
description | string | Product description. | Yes
short_description | string | Short product description. | Yes
tags | string[] | Product tags. | Yes
product_type | string | Type of product. | Yes
pdp_url | string | Product detail page URL. | Yes
image | [Image[]](/firmly-api/schema/schema/#image) |  | Yes
variant_option_values | [Variant Option Values[]](/firmly-api/schema/schema/#variant-option-values) |  | No
product variant | [Product Variant[]](/firmly-api/schema/schema/#product-variant) |  | No
properties | [Product Properties](/firmly-api/schema/schema/#product-properties)|  | Yes
reviews | [Reviews](/firmly-api/schema/schema/#reviews)|  | Yes


### Variant Option Values
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
option_values | [Option Value[]](/firmly-api/schema/schema/#option-value) |  | No
display_name | string | Display name of the variant option. | No
property_accessor | string | Property accessor for the variant option. | No
position | integer | Position of the variant option. | No


### Option Value

Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
display_name | string | Display name of the variant option value. | No
value | string | Value of the variant option. | No
swatch | [Swatch](/firmly-api/schema/schema/#swatch) |  | Yes
available | boolean | Whether the variant option value is available. | Yes
image | [Image[]](/firmly-api/schema/schema/#image) |  | Yes

### Swatch
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
url | string | URL of the swatch image. | Yes
rgb | string | RGB color value of the swatch. | Yes


### Product Variant
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
handle | string | Variant handle. | No
display_name | string | Display name of the variant. | No
title | string | Variant title. | No
sku | string | SKU of the variant. | No
available | boolean | Whether the variant is available. | No
highlights | string[] | Variant highlights. | Yes
price | object | Type Amount with additional fields. | No
msrp | object | Type Amount with additional fields. | No
variant_option_list | string[] | List of variant options. | No
option1 | string | First variant option. | Yes
option2 | string | Second variant option. | Yes
option3 | string | Third variant option. | Yes
option4 | string | Fourth variant option. | Yes
option5 | string | Fifth variant option. | Yes
image | [Image[]](/firmly-api/schema/schema/#image) |  | Yes
requires_shipping | boolean | Whether the variant requires shipping. | Yes
taxable | boolean | Whether the variant is taxable. | Yes
weight | number | Weight of the variant. | Yes
weight_unit | string | Unit of weight measurement. | Yes
modified_at | string | ISO date of last modification. | Yes



### Product Properties
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
vendor | string | Product vendor name. | Yes
product_family | string | Product family name. | Yes

### Reviews
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
total_reviews | integer | Total number of reviews for the product. | No
average_rating | number | Average rating of the product. | No
review_list_url | string | URL to view full review list. | Yes
review_list | [Review List[]](/firmly-api/schema/schema/#review-list-item) | List of individual reviews. | Yes
rating_list | [Rating List[]](/firmly-api/schema/schema/#rating-list-item) | Distribution of ratings. | Yes

#### Review List Item
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
reviewer_name | string | Name of reviewer. | Yes
review_date | string | ISO date when review was written. | Yes
rating | integer | Rating given in review. | Yes
review_title | string | Title of the review. | Yes
review_text | string | Full text of the review. | Yes
verified_purchase | boolean | Whether reviewer purchased the product. | Yes
helpful_votes | integer | Number of helpful votes received. | Yes

#### Rating List Item  
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
rating | integer | Star rating (1-5). | No
count | integer | Number of reviews with this rating. | No
percentage | number | Percentage of total reviews with this rating. | No

## Session Info


Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
requires_login | boolean | Indicates login required or not. | No
is_email_registered | boolean | Indicates email registered or not. | No
is_logged_in | boolean | Indicates logged in or not. | No
cookies | string[] | Session cookies. | No
accepts_membership | string[] | Indicates whether membership is accepted or not. | Yes
accepts_otp | string[] | Indicates whether OTP is accepted or not. | Yes

```json
{
    "requires_login": true,
    "is_email_registered": true,
    "is_logged_in": true,
    "cookies": "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/",
}
```




## Shipping Method
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
sku | string | Short text identifying the shipping method. | No
description | string | Description of the shipping method. | No
price | [Amount](/firmly-api/schema/schema/#amount) | Price for this shipping method. | No
```json
{
    "sku": "Economy-0.00",
    "description": "Economy",
    "price": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    }
}
```
 


---

# Schema


  <h1 id="schema">Schema</h1><ul>
<li><a href=/firmly-api/schema/schema/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Schema</span></a></li>
<li><a href=/firmly-api/schema/optional-fields/ class="DocsMarkdown--link"><span class="DocsMarkdown--link-content">Optional Fields</span></a></li>
</ul>
<!--
# Schema
The schema for the firmly API describes the data elements and how they relate to one another. Each element includes an example of how the element appears in code and the parameter descriptions for each element.


## Address
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
first_name | string | Address first name. | Yes
last_name | string | Address last name. | Yes
email | string | Address email. | Yes
phone | string | Address phone number. | Yes
address1 | string | Shipping address line 1. (number and street name) | No
address2 | string | Shipping address line 2. (e.g. floor, apt, etc.) | Yes
city | string | Shipping address city | No
postal_code | string | Shipping address postal code. | No
state_or_province | string | Shipping address state. | No
country | string | Shipping address country. | No
state_name * | string | State's full name. | Yes
company | string | Company's name. | Yes

\* state_name is return-only field. The partner can send either a state code or name in state_or_province.

```json
{
    "first_name": "John",
    "last_name": "Smith",
    "email": "john@firmly.ai",
    "phone": "(206) 555-1212",
    "address1": "123 Nice St",
    "address2": "",
    "city": "Newcastle",
    "postal_code": "98056",
    "state_or_province": "WA",
    "country": "United States",
    "state_name": "Washington",
    "company": "firmly"
}
```


## Amount
Parameter | Type | Description| Optional
--------- | ------- | ----------- |  --------
currency | string | Currency code as defined in ISO 4217. | No
value | float | Amount of this currency object. | No
```json
{
    "currency": "USD",
    "value": 4.99,
    "number": 499,
    "symbol": "$"
}
```



## Cart
Some fields in the Cart object are optional. See [Optional Cart Fields](/firmly-api/data-model/optional-fields/) for more information.


Parameter | Type | Description | Optional
--------- | ------- | ----------- | -----------
available_store_credit | [Amount](/firmly-api/data-model/parameters/#amount) | Available credit on the store. | Yes
billing_info | AddressInfo | Billing information. | Yes
cart_id | uuid | Unique identifier for this cart on firmly services. | No
cart_status | string | Status of this cart. | Yes
display_name | string | Store display name. | Yes
is_tax_included_in_price | boolean | Boolean if tax is included in price. | Yes
line_items | [LineItem[]](/firmly-api/data-model/parameters/#line-item) | List of line items of this cart. | No
notice | string[] | General notices. | Yes
payment_handle | string | Opaque handle used by firmly Vault Messenger to tokenize the credit card. | Yes
payment_method | [PaymentMethod[]](/firmly-api/data-model/parameters/#payment-method) | Payment method summary. | Yes
payment_method_options |  | Saved customer credit cards (from Merchant or from Wallets). | Yes
platform_id | string | firmly platform id for the current cart. | No
properties | object |  | Yes
reward_points | [Amount](/firmly-api/data-model/parameters/#amount) | Reward points to be obtained with this cart. | Yes
available_reward_points | [Amount](/firmly-api/data-model/parameters/#amount) | Available rewards points. | Yes
session | [SessionInfo](/firmly-api/data-model/parameters/#session-info) | Information about user session. | Yes
shipping_info | [AddressInfo](/firmly-api/data-model/parameters/#address) | Shipping address. | Yes
shipping_info_options | [AddressInfo](/firmly-api/data-model/parameters/#address) | Saved customer addresses (from Merchant or from Wallets). | Yes
shipping_method | string | Identifier for the current selected shipping method. | Yes
additional_shipping_methods | [ShippingMethod[]](/firmly-api/data-model/parameters/#shipping-method) | Shipping methods that are going to be used in addition to the main one. | Yes
shipping_method_options | [ShippingMethod[]](/firmly-api/data-model/parameters/#shipping-method) | List of available shipping methods for this cart. | Yes
shop_id | string | Merchant identified on firmly services. | No
store_credits | [Amount](/firmly-api/data-model/parameters/#amount) | If logged in, the amount of credit that the customer has in this store. | Yes
submitted_at | string | Time when cart was submitted. | Yes
urls | object | Additional urls, like thank you page. | Yes
validation_errors | object | Specific form validation errors, i.e. Invalid State, Invalid Country, etc. | Yes
sub_total | [Amount](/firmly-api/data-model/parameters/#amount) | Subtotal value for this cart. | Yes
cart_discount | [Amount](/firmly-api/data-model/parameters/#amount) | Total discount provided for this cart. | Yes
cart_discount_breakdown | DiscountsBreakdown[] | Cart discount breakdown. | Yes
tax | [Amount](/firmly-api/data-model/parameters/#amount) | Estimated tax to be collected for this cart. | Yes
coupons | string[] | List of applicable coupons applied in the cart. if the list is empty, it means the coupons are not valid. | Yes
shipping_total | [Amount](/firmly-api/data-model/parameters/#amount) | Total value for all shipment cost of this cart. | Yes
total | [Amount](/firmly-api/data-model/parameters/#amount) | Total value of this cart (Subtotal + tax). |

```json
{
    "platform_id": "merchant_platform",
    "shop_id": "59",
    "cart_id": "30c28ec6-7321-4a61-92ed-8067c59b41e6",
    "line_items": [
        {
            "sku": "42961836507384",
            "base_sku": "7725397508344",
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_price": {
                "currency": "USD",
                "value": 1,
                "number": 100,
                "symbol": "$"
            },
            "line_discount": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "image": {
                "url": "https://cdn.merchant.com/image1_small.jpg?v=1655838064"
            },
            "platform_line_item_id": "fdb139055ad337bfb346326a234cbe05",
            "description": "Junior Smith Daredevil Ski Goggles",
            "variant_description": "Black",
            "line_item_id": "076a6428-6783-45a8-95c6-eacc8bb00fdd"
        }
    ],
    "shipping_info": {
        "first_name": "John",
        "last_name": "Smith",
        "phone": "(206) 555-1212",
        "address1": "123 Nice St",
        "city": "Newcastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056",
        "email": "john@firmly.ai"
    },
    "shipping_method": {
        "sku": "Economy-0.00",
        "description": "Economy",
        "price": {
            "currency": "USD",
            "value": 0,
            "number": 0,
            "symbol": "$"
        },
        "applicable_line_items": []
    },
    "total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "shipping_total": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "shipping_method_options": [
        {
            "sku": "Economy-0.00",
            "description": "Economy",
            "price": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            }
        },
        {
            "sku": "Standard-4.90",
            "description": "Standard",
            "price": {
                "currency": "USD",
                "value": 4.9,
                "number": 490,
                "symbol": "$"
           }
        }
    ],
    "app_id": "fdc6e81b-3792-4920-b19b-986c334f3e19",
    "cart_status": "active",
    "payment_method_options": [
        {
            "id": "card_id_1",
            "type": "CreditCard",
            "wallet": "merchant",
            "card_type": "Visa",
            "last_four": "2834",
            "month": "11",
            "year": "2029",
            "billing_info": {
                "first_name": "fistname",
                "last_name": "lastame",
                "address1": "7367 126th Pl SE",
                "address2": "",
                "city": "Renton",
                "state_or_province": "WA",
                "state_name": "Washington",
                "postal_code": "98056",
                "country": "United States",
                "phone": "1231234123",
            },
        },
        {
            "id": "card_id_2",
            "type": "CreditCard",
            "wallet": "merchant",
            "card_type": "Visa",
            "last_four": "8798",
            "month": "3",
            "year": "2030",
            "billing_info": {
                "first_name": "fistname",
                "last_name": "lastame",
                "address1": "7367 126th Pl SE",
                "address2": "",
                "city": "Renton",
                "state_or_province": "WA",
                "state_name": "Washington",
                "postal_code": "98056",
                "country": "United States",
                "phone": "1231234123",
            },
        }
    ],


}
```
## Discounts Breakdown
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
label | string
discount | [Amount](/firmly-api/data-model/parameters/#amount) |

## Discount Details
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
code | string | Discount code. | No
description | string | Description of the discount. | No

```json
{
    "code": "fiftyOff",
    "description": "half the price",
}
```

## Line Item
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
sku | string | Variant Product SKU. Might be an abstraction of the real merchant's SKU. | No
base_sku | string | Base Product SKU. Might be an abstraction of the real merchant's SKU. | Yes
quantity | integer | Number of units this entry represents. | No
price | [Amount](/firmly-api/data-model/parameters/#amount) | Unit price for this product. | No
line_price | [Amount](/firmly-api/data-model/parameters/#amount) | Total line item price. | No
line_discount | [Amount](/firmly-api/data-model/parameters/#amount) | Total line item discount. | Yes
image | object | Image URL for this product. | No
platform_line_item_id | string | Original merchant's identifer. | Yes
description | string | Description of the base product. | Yes
variant_description | string | Description of this specific variant. | Yes
line_item_id | string | Unique identifier of this line item in firmly services. | No
variant_handles | string[] | Additional information to differentiate product options (Used in some merchants). | Yes
extended_attributes | object | Itens attributes. | Yes
msrp | [Amount](/firmly-api/data-model/parameters/#amount) | Manufacturer Suggested Retail Price. | No
discount | [Amount](/firmly-api/data-model/parameters/#amount) | Items discount. | Yes
requires_shipping | Boolean | If the requires shipping. | No
discounts | [DiscountDetails[]](/firmly-api/data-model/parameters/#discount-details) | List of discount details. | Yes
line_item_tax | [Amount](/firmly-api/data-model/parameters/#amount) | Item's respective tax. | Yes

```json
{
    "sku": "42961836507384",
    "base_sku": "7725397508344",
    "quantity": 1,
    "price": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "line_price": {
        "currency": "USD",
        "value": 1,
        "number": 100,
        "symbol": "$"
    },
    "line_discount": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    },
    "image": {
        "url": "https://cdn.merchant.com/image1_small.jpg?v=1655838064"
    },
    "platform_line_item_id": "fdb139055ad337bfb346326a234cbe05",
    "description": "Junior Smith Daredevil Ski Goggles",
    "variant_description": "Black",
    "line_item_id": "076a6428-6783-45a8-95c6-eacc8bb00fdd"
}
```
## Order

The Order model inherits all properties from the [`Cart`](/firmly-api/data-model/parameters/#cart) model, and in addition, includes the following additional parameter(s).

Parameter | Type | Description | Optional
--------- | ------- | ----------- | -------
platform_order_number | string | The order id in the merchant's website. | No

```json
{
    "platform_id": "merchant_platform",
    "shop_id": "merchant.com",
    "cart_id": "6f0c0063-43bf-4f44-880a-bcbd6cbb0807",
    "line_items": [
        {
            "sku": "29227235868724",
            "base_sku": "3796148518964",
            "variant_option_list": [],
            "quantity": 1,
            "price": {
                "currency": "USD",
                "value": 6.5,
                "number": 650,
                "symbol": "$"
           },
            "line_price": {
                "currency": "USD",
                "value": 6.5,
                "number": 650,
                "symbol": "$"
           },
            "line_discount": {
                "currency": "USD",
                "value": 0,
                "number": 0,
                "symbol": "$"
            },
            "requires_shipping": true,
            "image": {
                "url": "http://cdn.merchant.com/Tank-Top-Women-White-Front_small.jpg?v=1565574386"
            },
            "platform_line_item_id": "cc8a4896b4da26dbe37d89b85b44efeb",
            "description": "Tank Top Women White",
            "variant_description": "M / White",
            "line_item_id": "7d00fa5c-f723-445b-a465-d038ae0adbe0"
        }
    ],
    "shipping_info": {
        "first_name": "John",
        "last_name": "Smith",
        "phone": "(206) 555-1212",
        "address1": "123 Nice St.",
        "city": "Newcastle",
        "state_or_province": "WA",
        "country": "United States",
        "postal_code": "98056",
        "email": "john@firmly.ai"
    },
    "shipping_method": {
        "sku": "Economy-2.00",
        "description": "Economy",
        "price": {
            "currency": "USD",
            "value": 2,
            "number": 200,
            "symbol": "$"
        },
        "applicable_line_items": []
    },
    "total": {
        "currency": "USD",
        "value": 9.35,
        "number": 935,
        "symbol": "$"
    },
    "sub_total": {
        "currency": "USD",
        "value": 6.5,
        "number": 650,
        "symbol": "$"
   },
    "shipping_total": {
        "currency": "USD",
        "value": 2,
        "number": 200,
        "symbol": "$"
    },
    "tax": {
        "currency": "USD",
        "value": 0.85,
        "number": 85,
        "symbol": "$"
    },
    "shipping_method_options": [
        {
            "sku": "Economy-2.00",
            "description": "Economy",
            "price": {
                "currency": "USD",
                "value": 2,
                "number": 200,
                "symbol": "$"
            }
        }
    ],
    "platform_order_number": "#1784",
    "app_id": "9ce7a122-7c0d-4a13-893d-5d376f197fe6",
    "payment_method": {
        "card_holder_name": "Krishna",
        "last_four": "0465",
        "month": "05",
        "year": "2028",
        "card_type": "Visa"
    },
    "cart_status": "submitted",
    "coupons": []
}
```
## Payment Method
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
payment_type | string | Payment method. | No
last_four | string | Last four digits of payment card. | No
month | Integer | Card validity month. | No
year | Integer | Card validity year. | No
card_type | string | Card type. | Yes

```json
{
    "payment_type": "CreditCard",
    "last_four": "1234",
    "month": 12,
    "year": 2025
}
```

## Payment Method Options
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
type | string | Payment method option. | No
wallet | string | Wallet. | No
art | string |  | Yes
last_four | string | Last four digits of the payment card. | Yes
month | integer | Card validity month. | Yes
year | integer | Card validity year. | Yes
card_type | string | Card type. | Yes
billing_info | AddressInfo | Billing info. | Yes

## Session Info


Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
requires_login | boolean | Indicates login required or not. | No
is_email_registered | boolean | Indicates email registered or not. | No
is_logged_in | boolean | Indicates logged in or not. | No
cookies | string[] | Session cookies. | No
accepts_membership | string[] | Indicates whether membership is accepted or not. | Yes
accepts_otp | string[] | Indicates whether OTP is accepted or not. | Yes

```json
{
    "requires_login": true,
    "is_email_registered": true,
    "is_logged_in": true,
    "cookies": "username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC; path=/",
}
```




## Shipping Method
Parameter | Type | Description | Optional
--------- | ------- | ----------- | --------
sku | string | Short text identifying the shipping method. | No
description | string | Description of the shipping method. | No
price | [Amount](/firmly-api/data-model/parameters/#amount) | Price for this shipping method. | No
```json
{
    "sku": "Economy-0.00",
    "description": "Economy",
    "price": {
        "currency": "USD",
        "value": 0,
        "number": 0,
        "symbol": "$"
    }
}
```
-->

- [Schema](/firmly-api/schema/schema/index.md)
- [Optional Cart Fields](/firmly-api/schema/optional-fields/index.md)


---

# Getting Started


  <h1 id="getting-started">Getting Started</h1><p>firmly provides APIs that integrate with e-commerce merchants. There is no need to change anything on merchant&rsquo;s side, and the partner only needs to know how to call firmly APIs to integrate with these merchants.</p>
<h2 id="checkout-flow">
    <span class="DocsMarkdown--header-anchor-positioner">
      <a class="DocsMarkdown--header-anchor Link Link-without-underline" href="#checkout-flow">&#8203;​</a>
    </span>
    <span>Checkout Flow</span>
  </h2><p>Customer -&gt; Partner System -&gt; firmly APIs -&gt; Merchant</p>
<h2 id="terms">
    <span class="DocsMarkdown--header-anchor-positioner">
      <a class="DocsMarkdown--header-anchor Link Link-without-underline" href="#terms">&#8203;​</a>
    </span>
    <span>Terms</span>
  </h2><ul>
<li>Partner - The company that has partnership with firmly and will call firmly APIs to integrate with merchants.</li>
<li>Customer - the shopper that accesses a partner&rsquo;s system to make a purchase.</li>
<li>Merchant - The e-commerce store (website). It will be directly called by firmly, and neither the partner nor the merchant have to expend extra effort to make this integration.</li>
</ul>


- [Getting Started](/firmly-api/getting-started/index.md)
- [firmly Cart API Reference](/firmly-api/firmly-cart-api/index.md)
- [firmly Cart API v2 Reference](/firmly-api/firmly-cart-api-v2/index.md)
- [firmly Catalog API Reference](/firmly-api/firmly-catalog-api/index.md)
- [firmly Checkout API Reference](/firmly-api/firmly-checkout-api/index.md)
- [Other firmly APIs](/firmly-api/other-firmly-api/index.md)
- [Miscellaneous](/firmly-api/miscellaneous/index.md)
- [Fraud Risk Management](/firmly-api/quickstart/fraud-risk-management/index.md)
- [Schema](/firmly-api/schema/index.md)


---


# Firmly JS SDK

This SDK includes a bunch of useful tools that developers can use to easily connect their apps to Firmly's services using our APIs. It helps make the integration process smooth and user-friendly.

## Concepts

#### CartHive
CartHive is a special class that holds all the information about active carts. It's like a collection of different classes that represent these carts from different merchants.

#### Cart
The Cart class handles all the actions and operations related to a individual shopping cart. It's responsible for managing everything you can do with a cart.

#### LineItem
The LineItem class handles all actions for individual items inside a cart.

### Functions of "CartHive" (Collection of carts)

- get(): Retrieve all currently active carts associated with the user, enabling easy access to ongoing shopping sessions.
- subscribe(): Stay updated by subscribing to events that signal changes in carts, ensuring real-time awareness of any modifications.
- getAllCarts(): Access carts containing line items (non empty carts), facilitating efficient management of items across various carts.
- addLineItem(): Add Line Item through the APIe. It can create a new cart.
- clear(): Clear the shipping information from all carts..
- setShippingInfo(): Easily apply shipping information to all multiple active carts, simplifying the checkout process.

### Functions of "Cart"

- getTotalItemCount(): Dynamically reevaluate the total item count, ensuring accurate cart item count.
- clear(): Remove all items from the cart.
- setShippingInfo(): Set individually shipping details.
- setShippingMethod(): Set individual shipping method to a cart.
- placeOrderWithCreditCard(): Complete transactions by securely placing orders with credit card and billing information.
- subscribe(): Stay updated by subscribing to events that signal changes in carts, ensuring real-time awareness of any modifications.

### Functions of "LineItem"

- updateQuantity(): Modify item quantities using the API, accommodating changing preferences.
- remove(): Remove specific line items.
- subscribe(): Stay updated by subscribing to events that signal changes in carts, ensuring real-time awareness of any modifications.

 


---


# Getting Started - Using Firmly JS SDK to place orders
This is a guide to get the user started from the beginning to place orders using the firmly JS SDK
## Summary
This guide provides users with a comprehensive starting point for navigating the process of placing orders using the Firmly JavaScript SDK. It offers a step-by-step walkthrough, enabling users to initiate their journey and progress towards successfully completing orders through the Firmly platform.

## Step 1. Load the Source with the Proper App ID

To begin, create a sample HTML file and embed the source code using the correct App ID to establish a connection.

> Example of starting the source using a sourceUrl with app ID

```javascript
<script src="https://<sourceUrl>/sdk/js?appId=<appId>" type="text/javascript" async></script>
```

## Step 2. Get Current Carts from CartHive

Load the CartHive from the SDK to access active carts.

> Example of Getting Current Carts from CartHive

```javascript
    await window.firmly.sdk.CartHive.get();
```

> Example of the CartHive structure with existing Carts - after active carts exist

```javascript
    {
	"merchants": {
		"merchant.com": {
			"cart_status": "active",
			"platform_id": "merchant_platform",
			"shop_id": "merchant.com",
			"cart_id": "12f383e0-b157-4c8a-a443-3e5503ce8ac1",
			"urls": {},
			"line_items": [{
				"domain": "merchant.com",
				"readOnly": false,
				"line_item_id": "6dd57e75-98d2-44af-bb67-aa0e3a4be3e4",
				"sku": "43509491106040",
				"base_sku": "7882321756408",
				"quantity": 1,
				"msrp": {
					"currency": "USD",
					"value": 1,
					"number": 100,
					"symbol": "$"
				},
				"price": {
					"currency": "USD",
					"value": 1,
					"number": 100,
					"symbol": "$"
				},
				"line_price": {
					"currency": "USD",
					"value": 1,
					"number": 100,
					"symbol": "$"
				},
				"requires_shipping": true,
				"image": {
					"url": "http://cdn.merchant.com/14081736074_4345c03ece_b_large.jpg?v=1670281782",
					"large": "http://cdn.merchant.com/14081736074_4345c03ece_b_large.jpg?v=1670281782",
					"grande": "http://cdn.merchant.com/14081736074_4345c03ece_b_grande.jpg?v=1670281782",
					"medium": "http://cdn.merchant.com/14081736074_4345c03ece_b_medium.jpg?v=1670281782",
					"compact": "http://cdn.merchant.com/14081736074_4345c03ece_b_compact.jpg?v=1670281782",
					"small": "http://cdn.merchant.com/14081736074_4345c03ece_b_small.jpg?v=1670281782"
				},
				"platform_line_item_id": "489d6f5d837961c7a4e3a305678a34a0",
				"description": "My Product with taxes",
				"variant_description": "My Product with taxes"
			}],
			"sub_total": {
				"currency": "USD",
				"value": 1,
				"number": 100,
				"symbol": "$"
			},
			"cart_discount": {
				"currency": "USD",
				"value": 0,
				"number": 0,
				"symbol": "$"
			},
			"shipping_total": {
				"currency": "USD",
				"value": 0,
				"number": 0,
				"symbol": "$"
			},
			"tax": {
				"currency": "USD",
				"value": 0.11,
				"number": 11,
				"symbol": "$"
			},
			"total": {
				"currency": "USD",
				"value": 1.11,
				"number": 111,
				"symbol": "$"
			},
			"payment_method_options": [{
					"type": "CreditCard",
					"wallet": "user"
				},
				{
					"type": "PayPal",
					"wallet": "paypal"
				},
				{
					"type": "ShopPay",
					"wallet": "shoppay"
				}
			],
			"shipping_method_options": [{
					"sku": "Economy-0.00",
					"description": "Economy: 5 to 8 business days",
					"price": {
						"currency": "USD",
						"value": 0,
						"number": 0,
						"symbol": "$"
					}
				},
				{
					"sku": "Standard-4.90",
					"description": "Standard: 3 to 4 business days",
					"price": {
						"currency": "USD",
						"value": 4.9
					}
				}
			],
			"shipping_method": {
				"sku": "Economy-0.00",
				"description": "Economy: 5 to 8 business days",
				"price": {
					"currency": "USD",
					"value": 0,
					"number": 0,
					"symbol": "$"
				}
			},
			"shipping_info": {
				"first_name": "Test",
				"last_name": "Tester",
				"phone": "1234567890",
				"address1": "7367 126th PL SE",
				"address2": "21st floor",
				"city": "Newcastle",
				"state_or_province": "WA",
				"state_name": "Washington",
				"country": "United States",
				"postal_code": "98056",
				"email": "no@mail.com"
			},
			"payment_handle": "e90fea27-1dab-46be-a1fc-ab35153b478a|9ekdtqdMR964cljps0V7HgGNsQ+F8z2gX4owNAb8v0EqIvuLQKTaYWqJiCiG5RWYpVzgqpXaPbZ8B+h8DX7K8zQ/uk7QJJO0W8r6MhDCeoOOeFgdfpausBYZ3kj7RnsLKaZygDRCrVGaGXJTvWsVylFkgy1eWG3fJll1Ozi8m8fv55yqtq85y2uBcQhqsYTC502CaR03lyjflyun4kSxmeRIVoQGY92qx5eJvw2mpFk3N5XQ1s6QFbf+uTMoFmsmUAOl8j0Oy5ejphS1JFFNgXFbINcc+lFVG4EOPq2zyi/mdOULpdqqEaKaszj7tli864eQnr7ApV9ZMEI4soqJ0sXZYxit1Cpl/Q3E"
		},
		"merchanttwo.com": {
			"cart_status": "active",
			"platform_id": "merchant_platform",
			"shop_id": "merchanttwo.com",
			"shop_properties": {
				"paypal": {
					"clientId": "AfUEYT7nO4BwZQERn9Vym5TbHAG08ptiKa9gm8OARBYgoqiAJIjllRjeIMI4g294KAH1JdTnkzubt1fr",
					"merchantId": "GHJRLT2K5TDNC"
				}
			},
			"cart_id": "cebd99db-f719-4369-b6a0-3b9c5e9141d3",
			"urls": {},
			"line_items": [{
				"domain": "merchanttwo.com",
				"readOnly": false,
				"line_item_id": "b89fa7fd-e5db-498e-b20a-d4fc629e2696",
				"sku": "45824299761978",
				"base_sku": "8409725043002",
				"quantity": 1,
				"msrp": {
					"currency": "USD",
					"value": 1095,
					"number": 109500,
					"symbol": "$"
				},
				"price": {
					"currency": "USD",
					"value": 876,
					"number": 87600,
					"symbol": "$"
				},
				"line_price": {
					"currency": "USD",
					"value": 876,
					"number": 87600,
					"symbol": "$"
				},
				"requires_shipping": true,
				"image": {
					"url": "http://cdn.merchant.com/s/files/1/0793/5059/5898/files/SFM58714562-2_large.jpg?v=1690988879",
					"large": "http://cdn.merchant.com/s/files/1/0793/5059/5898/files/SFM58714562-2_large.jpg?v=1690988879",
					"grande": "http://cdn.merchant.com/s/files/1/0793/5059/5898/files/SFM58714562-2_grande.jpg?v=1690988879",
					"medium": "http://cdn.merchant.com/s/files/1/0793/5059/5898/files/SFM58714562-2_medium.jpg?v=1690988879",
					"compact": "http://cdn.merchant.com/s/files/1/0793/5059/5898/files/SFM58714562-2_compact.jpg?v=1690988879",
					"small": "http://cdn.merchant.com/s/files/1/0793/5059/5898/files/SFM58714562-2_small.jpg?v=1690988879"
				},
				"platform_line_item_id": "51ae84a6a2545d7fc9569e6ed047e72e",
				"description": "Kevin Original Hybrid Mattress",
				"variant_description": "Twin"
			}],
			"sub_total": {
				"currency": "USD",
				"value": 876,
				"number": 87600,
				"symbol": "$"
			},
			"cart_discount": {
				"currency": "USD",
				"value": 0,
				"number": 0,
				"symbol": "$"
			},
			"shipping_total": {
				"currency": "USD",
				"value": 0,
				"number": 0,
				"symbol": "$"
			},
			"tax": {
				"currency": "USD",
				"value": 0,
				"number": 0,
				"symbol": "$"
			},
			"total": {
				"currency": "USD",
				"value": 876,
				"number": 87600,
				"symbol": "$"
			},
			"payment_method_options": [{
					"type": "CreditCard",
					"wallet": "user"
				},
				{
					"type": "PayPal",
					"wallet": "paypal"
				},
				{
					"type": "ShopPay",
					"wallet": "shoppay"
				}
			],
			"shipping_method_options": [{
					"sku": "Economy-0.00",
					"description": "Economy: 5 to 8 business days",
					"price": {
						"currency": "USD",
						"value": 0,
						"number": 0,
						"symbol": "$"
					}
				},
				{
					"sku": "Standard-6.90",
					"description": "Standard: 3 to 4 business days",
					"price": {
						"currency": "USD",
						"value": 6.9
					}
				}
			],
			"shipping_method": {
				"sku": "Economy-0.00",
				"description": "Economy: 5 to 8 business days",
				"price": {
					"currency": "USD",
					"value": 0,
					"number": 0,
					"symbol": "$"
				}
			},
			"shipping_info": {
				"first_name": "Test",
				"last_name": "Tester",
				"phone": "1234567890",
				"address1": "7367 126th PL SE",
				"address2": "21st floor",
				"city": "Newcastle",
				"state_or_province": "WA",
				"state_name": "Washington",
				"country": "United States",
				"postal_code": "98056",
				"email": "no@mail.com"
			},
			"payment_handle": "e90fea27-1dab-46be-a1fc-ab35153b478a|LIksu2biQaKz+hT2RvkQt1cNlwM0Zf+hiawOdCHisbatk/wGOXC5HuXg0ffu70kWjNWVNNtTgxY977rZR/8Hx8qA7aJYb4yWGohVPMIG7uF8PKKHPm9Latad1no++wFuEdHQq8vvxTNER9u2q7HaHPHh+Wezntolk7RpwmfJpGl1vGt54YP9B09wBMK9CHHKpDDd6UUwPk+OqmtmkR1VhTBNRoXw2bE90eE3sT2jY/dr1hInd7O3unn9+IUNZBrLgDRvw8uhJc7YNtnNn9TlJ0gz8Q+Vmj9fGsRqAQ0PbDrso3vIDJYSwDPaYr/7mK9uS9JA0JM+yin6j8I47M6h5aB+SGy/"
		}
	},
	"total_quantity": 2,
	"total": {
		"value": 877.11,
		"currency": "USD"
	},
	"sub_total": {
		"value": 877,
		"currency": "USD"
	},
	"shipping_total": {
		"value": 0,
		"currency": "USD"
	},
	"tax": {
		"value": 0.11,
		"currency": "USD"
	},
	"cart_discount": {
		"value": 0,
		"currency": "USD"
	},
	"store_credit": {
		"value": 0,
		"currency": "USD"
	},
	"shipping_info": {
		"first_name": "Test",
		"last_name": "Tester",
		"phone": "1234567890",
		"address1": "7367 126th PL SE",
		"address2": "21st floor",
		"city": "Newcastle",
		"state_or_province": "WA",
		"state_name": "Washington",
		"country": "United States",
		"postal_code": "98056",
		"email": "no@mail.com"
	}
}
```

## Step 3. Subscribe to Receive Reactive Updates

Subscribe to cart updates for real-time reactivity.

> Use the following code as an example to set up a callback

```javascript
    await window.firmly.sdk.CartHive.subscribe((cartHiveSub) => {
        console.log('firmly demo - Cart hive subscription received an update', cartHiveSub);
    });
```

<aside class="notice">
   We will work on more fine grained events soon.
</aside>

## Step 4. Add Line Items to Current Merchants

To simulate adding items to the cart, use the CartHive class.
However, the merchant UI will have mechanisms to add line items, and the CartHive will be updated.

> To simulate an item being added, use:

```javascript
    await cartHive.addLineItem("merchant.com", "43509491106040", 1);
    await cartHive.addLineItem("merchanttwo.com", "45824299761978", 1);
```

## Step 5. Set Shipping Address for All Merchants

Set a shipping address for all carts by creating a shipping information object and applying it.

> Example of Setting Shipping Address for All Merchants

```javascript
const shippingInfo = {
    first_name: "Tester",
    last_name: "Tester",
    phone: "(123) 456-7890",
    address1: "126th PL SE",
    address2: "21st floor",
    city: "Newcastle",
    state_or_province: "WA",
    country: "United States",
    postal_code: "98056",
    email: "tester@firmly.ai",
};
await cartHive.setShippingInfo(shippingInfo);

```

## Step 6. Get Shipping Rates for Individual Carts

In order to provide an way to change the shipping rate, we can retrieve the shipping rates available for the cart and use on Step 7.

> Example of Getting Shipping Rates

```javascript
    await cartHive.merchants["merchant.com"].getShippingRates();
```

## Step 7. Set Shipping Rates for Individual Carts

Adjust individual shipping rates, to enable the user to change the shipping rate.

> Example of Set a Shipping Rate for a Individual Cart

```javascript
    await cartHive.merchants["merchant.com"].setShippingMethod("Economy-0.00");
```

## Step 8. Place the Orders

Finally, place orders by providing billing and credit card information for each cart.

> Example of placing the orders for each cart

```javascript
const creditCard = {
    name: "Tester Firmly",
    number: "4111 1111 1111 1111",
    month: 3,
    year: 2030,
    verification_value: "123",
};

const billingInfo = {
    first_name: "Test",
    last_name: "Tester",
    phone: "(123) 456-7890",
    address1: "1234 126th PL SE",
    address2: "21st floor",
    city: "Newcastle",
    state_or_province: "WA",
    country: "United States",
    postal_code: "98056",
    email: "tester@firmly.ai",
};

const merchantOrder = await cartHive.merchants["merchant.com"].placeOrderWithCreditCard(creditCard, billingInfo);
const merchantTwoOrder = await cartHive.merchants["merchanttwo.com"].placeOrderWithCreditCard(creditCard, billingInfo);

```


> This is an example of an order placed on merchantOrder variable

```javascript
{
	"cart_status": "submitted",
	"platform_id": "merchant_platform",
	"shop_id": "merchant.com",
	"cart_id": "0c584533-fb89-4174-9bee-929bbd49eca4",
	"urls": {
		"thank_you_page": "https://merchant.com/65092026616/checkouts/bc9570c89e37eb21a5578f2cdd5741a3/thank_you?key=ecbe428aebeba1b4a53c86adfb0f44f2"
	},
	"line_items": [{
		"domain": "merchant.com",
		"readOnly": true,
		"line_item_id": "1e264b2e-b6e8-4737-a0bc-c14173fb0aa3",
		"sku": "43509491106040",
		"base_sku": "7882321756408",
		"quantity": 1,
		"msrp": {
			"currency": "USD",
			"value": 1,
			"number": 100,
			"symbol": "$"
		},
		"price": {
			"currency": "USD",
			"value": 1,
			"number": 100,
			"symbol": "$"
		},
		"line_price": {
			"currency": "USD",
			"value": 1,
			"number": 100,
			"symbol": "$"
		},
		"requires_shipping": true,
		"image": {
			"url": "http://cdn.merchant.com/14081736074_4345c03ece_b_large.jpg?v=1670281782",
			"large": "http://cdn.merchant.com/14081736074_4345c03ece_b_large.jpg?v=1670281782",
			"grande": "http://cdn.merchant.com/14081736074_4345c03ece_b_grande.jpg?v=1670281782",
			"medium": "http://cdn.merchant.com/14081736074_4345c03ece_b_medium.jpg?v=1670281782",
			"compact": "http://cdn.merchant.com/14081736074_4345c03ece_b_compact.jpg?v=1670281782",
			"small": "http://cdn.merchant.com/14081736074_4345c03ece_b_small.jpg?v=1670281782"
		},
		"platform_line_item_id": "489d6f5d837961c7a4e3a305678a34a0",
		"description": "My Product with taxes",
		"variant_description": "My Product with taxes"
	}],
	"sub_total": {
		"currency": "USD",
		"value": 1,
		"number": 100,
		"symbol": "$"
	},
	"cart_discount": {
		"currency": "USD",
		"value": 0,
		"number": 0,
		"symbol": "$"
	},
	"shipping_total": {
		"currency": "USD",
		"value": 0,
		"number": 0,
		"symbol": "$"
	},
	"tax": {
		"currency": "USD",
		"value": 0.11,
		"number": 11,
		"symbol": "$"
	},
	"total": {
		"currency": "USD",
		"value": 1.11,
		"number": 111,
		"symbol": "$"
	},
	"payment_method_options": [{
		"type": "CreditCard",
		"wallet": "user"
	}, {
		"type": "PayPal",
		"wallet": "paypal"
	}, {
		"type": "ShopPay",
		"wallet": "shoppay"
	}],
	"shipping_method_options": [{
		"sku": "Economy-0.00",
		"description": "Economy: 5 to 8 business days",
		"price": {
			"currency": "USD",
			"value": 0,
			"number": 0,
			"symbol": "$"
		}
	}, {
		"sku": "Standard-4.90",
		"description": "Standard: 3 to 4 business days",
		"price": {
			"currency": "USD",
			"value": 4.9
		}
	}],
	"shipping_method": {
		"sku": "Economy-0.00",
		"description": "Economy: 5 to 8 business days",
		"price": {
			"currency": "USD",
			"value": 0,
			"number": 0,
			"symbol": "$"
		}
	},
	"shipping_info": {
		"first_name": "Tester",
		"last_name": "Tester",
		"phone": "1234567890",
		"address1": "1234 126th PL SE",
		"address2": "21st floor",
		"city": "Newcastle",
		"state_or_province": "WA",
		"state_name": "Washington",
		"country": "United States",
		"postal_code": "98056",
		"email": "tester@firmly.ai"
	},
	"payment_handle": "e90fea27-1dab-46be-a1fc-ab35153b478a|VB1sVyZEAvaifOc9GeD9WdinJYwGzWsOsEluFqq96CU1YEwhar6w6RVB8YAIHr/0gyccI5Cp8wSbiiHzDeydCoPGL4Nmwbja0yU1af12iQEnJUj3FHsrpPxSh/Nd9z2OIijQSZWv+MCwY+zsUvKwQ7SFEDhkAS068irs+I/CiOlWgvQVg9VLNFVNSv2yfzofi4ZbVj9F2Tj2DLzYdXoijsnLZ0cN1iaX+1yVKMl51gdhXwrFEAtuoojBS05DPxuo3TAbj/+VXDF9SyLVkjdsmTKrGVY0aF/lpVxqcxFAjB7+zdLsZNuCipybk4JbWfiRvBgsxozarAmoMiO+9AyOk8EKM/o+qjft0lWm",
	"submitted_at": "2023-08-11T21:58:17.969Z",
	"platform_order_number": "#14076",
	"payment_method": {
		"payment_type": "CreditCard",
		"last_four": "1111",
		"month": 3,
		"year": 2030
	},
	"billing_info": {
		"first_name": "Test",
		"last_name": "Tester",
		"phone": "1234567890",
		"address1": "1234 126th PL SE",
		"address2": "21st floor",
		"city": "Newcastle",
		"state_or_province": "WA",
		"country": "United States",
		"postal_code": "98056",
		"email": "tester@firmly.ai"
	}
}

```

<aside class="notice">
    After placing the order successfully, the carts will be removed from CartHive.
    It finishes the basics of the placing order flow.
</aside>

 


---

# firmly JS SDK

<p>some text</p>


- [Concepts](/firmly-js-sdk/concepts/index.md)
- [Getting started with firmly JS SDK](/firmly-js-sdk/sdk-getting-started/index.md)


---


# How does JavaScript Injection Work?  

One of the key requirements for implementing firmly Social Commerce Checkout is to get a special JavaScript (JS) from firmly and inject the JS into the IAW of the social media platform. At several points during the user's shopping experience, the JS is injected into the workflow, as described in Shopping Workflow below.

## To Receive Your JS from firmly  

The firmly JS is a key component for how firmly Social Commerce Checkout works.  

After you receive the JS from firmly, it will be injected into your Social Commerce process.   

To receive your firmly JavaScript, request one by sending an email to contact@firmly.ai.  

A firmly representative will be in contact with you. 

## Shopping Workflow  

1. The customer begins shopping experience.  

From the social media site, the user clicks a merchant ad (for example, merchant.com) with the intention of making a purchase.  

2. The merchant website opens.  

The merchant.com website opens in an In App Webview (IAW), which is part of the social media application.  
The social media backend gets metadata for the merchant website and returns the JS injection script with the metadata attached.  

3. The customer shops.  

Until the customer clicks Checkout, the entire shopping experience takes place on the merchant site. The customer selects one or more items and adds them to the cart.  
The social media app requests a health check from the firmly services and receives a health status.   

As the customer browses to different pages in the merchant's domain, the JS must be injected into each new page.   

4. The customer navigates to the Cart page.  

When the customer is on the Cart page, the Checkout button is enhanced by the JS to initiate the native social media checkout (rather than the merchant checkout).   

5. The customer clicks the Checkout button.  

The firmly Social Commerce Checkout experience launches.   
The user is no longer on the merchant website. Rather, the injected JavaScript collects the necessary information and generates the opaque handle. The opaque handle varies for each merchant. The makeup of the handle depends on the current product state of firmly. Any necessary information is transferred to complete the flow for this customer on the firmly backend services.   

6. On the social media app, the following events occur during the checkout process:  

    1. The injected JavaScript raises the StartCheckout event with an opaque handle as an argument.  

    2. The social media app retrieves relevant httpOnly cookies from the IAW.  

    3. The social media app calls the SessionTransfer API (cookies plus opaque handle) from the firmly services.  

    4. Firmly services responds with the firmly cart.  

    5. The social media site displays the firmly checkout page with items and shipping info.  

7. The customer selects the payment method and completes the transaction on the checkout page.   


---

# Using PayPal as Payment Method

When a customer makes an online purchase using an e-commerce site and firmly, the workflow used is described in [How does JavaScript Injection Work](/firmly-social-commerce/js-injection/).  

At the end of this workflow, the customer chooses a payment method on the Checkout page.  
When completing a payment for an online order, a customer can choose to pay by one of two ways: 
* Credit card
* PayPal (or some other online payment system).  
This topic describes how payment is completed using PayPal.  
 

 
## APIs used with PayPal 
Three firmly APIs are invoked during the PayPal payment workflow: 
* Start Express Checkout 
* Authorize Express Checkout 
* Complete Order with Payment Gateway 
 
## PayPal Payment Workflow

The PayPal payment method occurs as described below.  
 
1. The customer clicks Checkout on the merchant site. 
The checkout page that includes the PayPal button is displayed.  
2. The customer clicks the PayPal button.  
3. This calls the StartExpressCheckout API.  
Two things are returned: 
The URL for ???.  
4. The PayPal app opens in an In Application Web browser (IAW).  
5. The app monitors for navigation.  
6. When leaving PayPal, the following occurs:  
    1. The IAW closes 
    2. Return to the shopping app.  
    3. Call Authorize Express Checkout.  
7. Customer clicks Place Order.  
8. Calls Complete Order with Payment Gateway.  
  


---

# firmly Social Commerce


  <h1 id="getting-started">Getting Started</h1>

- [How does JavaScript Injection Work](/firmly-social-commerce/js-injection/index.md)
- [PayPal Integration with firmly](/firmly-social-commerce/paypal-payment/index.md)


---



<div class="Stripe">
  <div class="Stripe--content">
    <h1 id="documentation">Products</h1>
    <p>API reference, how-to guides, tutorials, example code, and more.</p>
  </div>
</div>

{{<product-grid>}}

<br>
<br>
 


---

