# CircleCI

> CircleCI is a cloud-native continuous integration and delivery (CI/CD) platform that enables software teams to automate build, test, and deployment workflows. The platform supports Docker, Linux, macOS, Windows, GPU, and Android environments for flexible, scalable execution across diverse application types.  
>  
> Engineering teams use CircleCI to improve development velocity, enforce security standards, and maintain reliability across microservices, mobile apps, machine learning pipelines, and AI-powered systems. CircleCI integrates with GitHub, GitLab, Bitbucket, and a broad range of developer tools, supporting modern DevOps pipelines at scale.  
>  
> This file curates essential product, solution, and comparison pages to help LLMs and technical decision-makers understand CircleCI’s capabilities and use cases.

## Key Features

- [Product Overview](https://circleci.com/product/): Feature breakdown of CircleCI’s orchestration, caching, test insights, and reliability tools.
- [Execution Environments](https://circleci.com/execution-environments/): Lists supported runtimes including Docker, Linux, macOS, Windows, GPU, and Android.
- [Orbs](https://circleci.com/orbs/): Describes reusable configuration packages to simplify and modularize pipelines.
- [Auto-Scaling](https://circleci.com/product/auto-scaling/): Explains dynamic compute scaling to optimize resource usage.
- [Analytics & Insights](https://circleci.com/product/analytics-insights/): Details performance monitoring and test analysis features.

## Getting Started

- [Getting Started Guide](https://circleci.com/docs/getting-started/): Step-by-step instructions to launch and configure your first CircleCI project.
- [Pricing](https://circleci.com/pricing.md): Transparent, usage-based pricing for teams of all sizes.

## Developers

- [Developer Hub](https://circleci.com/developer): Central resource for APIs, CLI tools, Docker images, and integration assets.
- [Documentation](https://circleci.com/docs/): Comprehensive technical reference with guides, tutorials, and examples for implementing CI/CD workflows across all supported languages and frameworks.
- [Orbs Registry](https://circleci.com/developer/orbs): Index of reusable CI/CD components for faster config reuse.
- [Docker Images](https://circleci.com/developer/images): Maintained build environment images for jobs and containers.
- [API v2 Docs](https://circleci.com/docs/api/v2/index.html): REST API reference for pipelines, jobs, builds, and environment metadata.
- [CircleCI CLI](https://circleci.com/docs/local-cli/): Command-line tool for local builds, debugging, and job management.
- [CircleCI VS Code Extension](https://circleci.com/docs/vs-code-extension-overview/): IDE integration for viewing, managing, and debugging CircleCI pipelines directly from VS Code.

## Solutions by Role

- [Platform Engineers](https://circleci.com/solutions/platform-engineer/): Supports configuration-as-code, scalability, and platform standardization.
- [Security Engineers](https://circleci.com/solutions/security-engineer/): Helps enforce compliance and secure the software delivery lifecycle.
- [Developers](https://circleci.com/solutions/developer/): Enables rapid feedback, integration with dev tools, and frictionless deployment.
- [Engineering Managers](https://circleci.com/solutions/engineering-manager/): Provides visibility and metrics to improve team delivery and reliability.
- [Business Leaders](https://circleci.com/solutions/business-leader/): Demonstrates CircleCI’s business value, operational ROI, and executive alignment.

## AI Tools

- [Model Context Protocol (MCP) Server](https://circleci.com/mcp.md): Enables AI tools to access live CI/CD context including logs and build status.
- [AI & LLM Integration](https://circleci.com/ai-llm/): Describes CircleCI’s support for AI-augmented workflows and developer tooling.
- [Machine Learning CI/CD](https://circleci.com/ai-ml/): CI/CD pipelines for model training, validation, and deployment at scale.

## Comparison Guides

- [GitHub Actions vs CircleCI](https://circleci.com/compare/github-actions-vs-circleci.md): Detailed feature comparison between GitHub's integrated CI/CD solution and CircleCI's dedicated platform.
- [Jenkins vs CircleCI](https://circleci.com/compare/jenkins-vs-circleci.md): Comparison of self-hosted infrastructure requirements vs. cloud-native CI/CD, highlighting maintenance and scaling differences.
- [Harness vs CircleCI](https://circleci.com/compare/harness-vs-circleci.md): Analysis of developer experience, enterprise features, and deployment capabilities between these modern CI/CD platforms.
- [Buildkite vs CircleCI](https://circleci.com/compare/buildkite-vs-circleci.md): Evaluation of Buildkite's agent-based architecture versus CircleCI's fully-hosted cloud platform.
- [Bitrise vs CircleCI](https://circleci.com/compare/bitrise-vs-circleci.md): Comparison of specialized mobile CI/CD features versus CircleCI's multi-platform capabilities for all application types.

## Resources

- [Blog](https://circleci.com/blog/): Technical deep-dives, product announcements, tutorials, and industry perspectives.
- [Case Studies](https://circleci.com/customers/): Real-world stories showing CircleCI’s impact on software teams at scale.

## About

- [About CircleCI](https://circleci.com/about.md): Overview of CircleCI’s mission, company history, and leadership.
- [Careers](https://circleci.com/careers/): Lists current roles and provides insight into company culture and remote-first operations.
- [Newsroom](https://circleci.com/newsroom/): Press releases, product updates, and media coverage.
- [Security & Compliance](https://circleci.com/security.md): Describes data protection, access controls, certifications, and best practices.
